PC     Output      Line
040000             0001       assume adl=1
040000             0002       org 0x040000
040000 C3 45 00 04 0003       jp start
040004 FF FF FF FF 0004       align 64
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
040040 4D 4F 53    0005       db "MOS"
040043 00          0006       db 00h
040044 01          0007       db 01h
040045             0008   
040045             0009   start:
040045 F5          0010       push af
040046 C5          0011       push bc
040047 D5          0012       push de
040048 DD E5       0013       push ix
04004A FD E5       0014       push iy
04004C CD C9 42 04 0015       call init
040050 CD CA 42 04 0016       call main
040054             0017   
040054             0018   exit:
040054 FD E1       0019       pop iy
040056 DD E1       0020       pop ix
040058 D1          0021       pop de
040059 C1          0022       pop bc
04005A F1          0023       pop af
04005B 21 00 00 00 0024       ld hl,0
04005F             0025   
04005F C9          0026       ret
040060             0027   
040060             0028   ; API INCLUDES
040060             0029       include "mos_api.inc"
040060             0001*  ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/mos_api.inc
040060             0002*  ; Title:	AGON MOS - API for user projects
040060             0003*  ; Author:	Dean Belfield
040060             0004*  ;			Adapted for agon-ez80asm by Jeroen Venema
040060             0005*  ;			Added MOS error codes for return in HL
040060             0006*  ; Created:	03/08/2022
040060             0007*  ; Last Updated:	10/08/2023
040060             0008*  ;
040060             0009*  ; Modinfo:
040060             0010*  ; 05/08/2022:	Added mos_feof
040060             0011*  ; 09/08/2022:	Added system variables: cursorX, cursorY
040060             0012*  ; 18/08/2022:	Added system variables: scrchar, scrpixel, audioChannel, audioSuccess, vpd_pflags
040060             0013*  ; 05/09/2022:	Added mos_ren, vdp_pflag_mode
040060             0014*  ; 24/09/2022:	Added mos_getError, mos_mkdir
040060             0015*  ; 13/10/2022:	Added mos_oscli
040060             0016*  ; 23/02/2023:	Added more sysvars, fixed typo in sysvar_audioSuccess, offsets for sysvar_scrCols, sysvar_scrRows
040060             0017*  ; 04/03/2023:	Added sysvar_scrpixelIndex
040060             0018*  ; 08/03/2023:	Renamed sysvar_keycode to sysvar_keyascii, added sysvar_vkeycode
040060             0019*  ; 15/03/2023:	Added mos_copy, mos_getrtc, mos_setrtc, rtc, vdp_pflag_rtc
040060             0020*  ; 21/03/2023:	Added mos_setintvector, sysvars for keyboard status, vdu codes for vdp
040060             0021*  ; 22/03/2023:	The VDP commands are now indexed from 0x80
040060             0022*  ; 29/03/2023:	Added mos_uopen, mos_uclose, mos_ugetc, mos_uputc
040060             0023*  ; 13/04/2023:	Added FatFS file structures (FFOBJID, FIL, DIR, FILINFO)
040060             0024*  ; 15/04/2023:	Added mos_getfil, mos_fread, mos_fwrite and mos_flseek
040060             0025*  ; 19/05/2023:	Added sysvar_scrMode
040060             0026*  ; 05/06/2023:	Added sysvar_rtcEnable
040060             0027*  ; 03/08/2023:	Added mos_setkbvector
040060             0028*  ; 10/08/2023:	Added mos_getkbmap
040060             0029*  
040060             0030*  ; VDP control (VDU 23, 0, n)
040060             0031*  ;
040060             0032*  vdp_gp:				EQU 80h
040060             0033*  vdp_keycode:		EQU 81h
040060             0034*  vdp_cursor:			EQU	82h
040060             0035*  vdp_scrchar:		EQU	83h
040060             0036*  vdp_scrpixel:		EQU	84h
040060             0037*  vdp_audio:			EQU	85h
040060             0038*  vdp_mode:			EQU	86h
040060             0039*  vdp_rtc:			EQU	87h
040060             0040*  vdp_keystate:		EQU	88h
040060             0041*  vdp_logicalcoords:	EQU	C0h
040060             0042*  vdp_terminalmode:	EQU	FFh
040060             0043*  
040060             0044*  ; MOS high level functions
040060             0045*  ;
040060             0046*  mos_getkey:			EQU	00h
040060             0047*  mos_load:			EQU	01h
040060             0048*  mos_save:			EQU	02h
040060             0049*  mos_cd:				EQU	03h
040060             0050*  mos_dir:			EQU	04h
040060             0051*  mos_del:			EQU	05h
040060             0052*  mos_ren:			EQU	06h
040060             0053*  mos_mkdir:			EQU	07h
040060             0054*  mos_sysvars:		EQU	08h
040060             0055*  mos_editline:		EQU	09h
040060             0056*  mos_fopen:			EQU	0Ah
040060             0057*  mos_fclose:			EQU	0Bh
040060             0058*  mos_fgetc:			EQU	0Ch
040060             0059*  mos_fputc:			EQU	0Dh
040060             0060*  mos_feof:			EQU	0Eh
040060             0061*  mos_getError:		EQU	0Fh
040060             0062*  mos_oscli:			EQU	10h
040060             0063*  mos_copy:			EQU	11h
040060             0064*  mos_getrtc:			EQU	12h
040060             0065*  mos_setrtc:			EQU	13h
040060             0066*  mos_setintvector:	EQU	14h
040060             0067*  mos_uopen:			EQU	15h
040060             0068*  mos_uclose:			EQU	16h
040060             0069*  mos_ugetc:			EQU	17h
040060             0070*  mos_uputc:			EQU	18h
040060             0071*  mos_getfil:			EQU	19h
040060             0072*  mos_fread:			EQU	1Ah
040060             0073*  mos_fwrite:			EQU	1Bh
040060             0074*  mos_flseek:			EQU	1Ch
040060             0075*  mos_setkbvector:	EQU	1Dh
040060             0076*  mos_getkbmap:		EQU	1Eh
040060             0077*  
040060             0078*  ; MOS program exit codes
040060             0079*  ;
040060             0080*  EXIT_OK:				EQU  0;	"OK",
040060             0081*  EXIT_ERROR_SD_ACCESS:	EQU	 1;	"Error accessing SD card",
040060             0082*  EXIT_ERROR_ASSERTION:	EQU  2;	"Assertion failed",
040060             0083*  EXIT_SD_CARDFAILURE:	EQU  3;	"SD card failure",
040060             0084*  EXIT_FILENOTFOUND:		EQU  4;	"Could not find file",
040060             0085*  EXIT_PATHNOTFOUND:		EQU  5;	"Could not find path",
040060             0086*  EXIT_INVALIDPATHNAME:	EQU  6;	"Invalid path name",
040060             0087*  EXIT_ACCESSDENIED_FULL:	EQU  7;	"Access denied or directory full",
040060             0088*  EXIT_ACCESSDENIED:		EQU  8;	"Access denied",
040060             0089*  EXIT_INVALIDOBJECT:		EQU  9;	"Invalid file/directory object",
040060             0090*  EXIT_SD_WRITEPROTECTED:	EQU 10;	"SD card is write protected",
040060             0091*  EXIT_INVALIDDRIVENUMBER:EQU 11;	"Logical drive number is invalid",
040060             0092*  EXIT_NOVOLUMEWORKAREA:	EQU 12;	"Volume has no work area",
040060             0093*  EXIT_NOVALIDFATVOLUME:	EQU 13;	"No valid FAT volume",
040060             0094*  EXIT_ERRORMKFS:			EQU 14;	"Error occurred during mkfs",
040060             0095*  EXIT_VOLUMETIMEOUT:		EQU 15;	"Volume timeout",
040060             0096*  EXIT_VOLUMELOCKED:		EQU 16;	"Volume locked",
040060             0097*  EXIT_LFNALLOCATION:		EQU 17;	"LFN working buffer could not be allocated",
040060             0098*  EXIT_MAXOPENFILES:		EQU 18;	"Too many open files",
040060             0099*  EXIT_INVALIDPARAMETER:	EQU 19;	"Invalid parameter",
040060             0100*  EXIT_INVALIDCOMMAND:	EQU 20;	"Invalid command",
040060             0101*  EXIT_INVALIDEXECUTABLE:	EQU 21;	"Invalid executable",
040060             0102*  ; FatFS file access functions
040060             0103*  ;
040060             0104*  ffs_fopen:			EQU	80h
040060             0105*  ffs_fclose:			EQU	81h
040060             0106*  ffs_fread:			EQU	82h
040060             0107*  ffs_fwrite:			EQU	83h
040060             0108*  ffs_flseek:			EQU	84h
040060             0109*  ffs_ftruncate:		EQU	85h
040060             0110*  ffs_fsync:			EQU	86h
040060             0111*  ffs_fforward:		EQU	87h
040060             0112*  ffs_fexpand:		EQU	88h
040060             0113*  ffs_fgets:			EQU	89h
040060             0114*  ffs_fputc:			EQU	8Ah
040060             0115*  ffs_fputs:			EQU	8Bh
040060             0116*  ffs_fprintf:		EQU	8Ch
040060             0117*  ffs_ftell:			EQU	8Dh
040060             0118*  ffs_feof:			EQU	8Eh
040060             0119*  ffs_fsize:			EQU	8Fh
040060             0120*  ffs_ferror:			EQU	90h
040060             0121*  
040060             0122*  ; FatFS directory access functions
040060             0123*  ;
040060             0124*  ffs_dopen:			EQU	91h
040060             0125*  ffs_dclose:			EQU	92h
040060             0126*  ffs_dread:			EQU	93h
040060             0127*  ffs_dfindfirst:		EQU	94h
040060             0128*  ffs_dfindnext:		EQU	95h
040060             0129*  
040060             0130*  ; FatFS file and directory management functions
040060             0131*  ;
040060             0132*  ffs_stat:			EQU	96h
040060             0133*  ffs_unlink:			EQU	97h
040060             0134*  ffs_rename:			EQU	98h
040060             0135*  ffs_chmod:			EQU	99h
040060             0136*  ffs_utime:			EQU	9Ah
040060             0137*  ffs_mkdir:			EQU	9Bh
040060             0138*  ffs_chdir:			EQU	9Ch
040060             0139*  ffs_chdrive:		EQU	9Dh
040060             0140*  ffs_getcwd:			EQU	9Eh
040060             0141*  
040060             0142*  ; FatFS volume management and system configuration functions
040060             0143*  ;
040060             0144*  ffs_mount:			EQU	9Fh
040060             0145*  ffs_mkfs:			EQU	A0h
040060             0146*  ffs_fdisk:			EQU	A1h
040060             0147*  ffs_getfree:		EQU	A2h
040060             0148*  ffs_getlabel:		EQU	A3h
040060             0149*  ffs_setlabel:		EQU	A4h
040060             0150*  ffs_setcp:			EQU	A5h
040060             0151*  
040060             0152*  ; File access modes
040060             0153*  ;
040060             0154*  fa_read:			EQU	01h
040060             0155*  fa_write:			EQU	02h
040060             0156*  fa_open_existing:	EQU	00h
040060             0157*  fa_create_new:		EQU	04h
040060             0158*  fa_create_always:	EQU	08h
040060             0159*  fa_open_always:		EQU	10h
040060             0160*  fa_open_append:		EQU	30h
040060             0161*  
040060             0162*  ; System variable indexes for api_sysvars
040060             0163*  ; Index into _sysvars in globals.inc
040060             0164*  ;
040060             0165*  sysvar_time:			EQU	00h	; 4: Clock timer in centiseconds (incremented by 2 every VBLANK)
040060             0166*  sysvar_vpd_pflags:		EQU	04h	; 1: Flags to indicate completion of VDP commands
040060             0167*  sysvar_keyascii:		EQU	05h	; 1: ASCII keycode, or 0 if no key is pressed
040060             0168*  sysvar_keymods:			EQU	06h	; 1: Keycode modifiers
040060             0169*  sysvar_cursorX:			EQU	07h	; 1: Cursor X position
040060             0170*  sysvar_cursorY:			EQU	08h	; 1: Cursor Y position
040060             0171*  sysvar_scrchar:			EQU	09h	; 1: Character read from screen
040060             0172*  sysvar_scrpixel:		EQU	0Ah	; 3: Pixel data read from screen (R,B,G)
040060             0173*  sysvar_audioChannel:	EQU	0Dh	; 1: Audio channel
040060             0174*  sysvar_audioSuccess:	EQU	0Eh	; 1: Audio channel note queued (0 = no, 1 = yes)
040060             0175*  sysvar_scrWidth:		EQU	0Fh	; 2: Screen width in pixels
040060             0176*  sysvar_scrHeight:		EQU	11h	; 2: Screen height in pixels
040060             0177*  sysvar_scrCols:			EQU	13h	; 1: Screen columns in characters
040060             0178*  sysvar_scrRows:			EQU	14h	; 1: Screen rows in characters
040060             0179*  sysvar_scrColours:		EQU	15h	; 1: Number of colours displayed
040060             0180*  sysvar_scrpixelIndex:	EQU	16h	; 1: Index of pixel data read from screen
040060             0181*  sysvar_vkeycode:		EQU	17h	; 1: Virtual key code from FabGL
040060             0182*  sysvar_vkeydown:		EQU	18h	; 1: Virtual key state from FabGL (0=up, 1=down)
040060             0183*  sysvar_vkeycount:		EQU	19h	; 1: Incremented every time a key packet is received
040060             0184*  sysvar_rtc:				EQU	1Ah	; 6: Real time clock data
040060             0185*  sysvar_spare:			EQU	20h	; 2: Spare, previously used by rtc
040060             0186*  sysvar_keydelay:		EQU	22h	; 2: Keyboard repeat delay
040060             0187*  sysvar_keyrate:			EQU	24h	; 2: Keyboard repeat reat
040060             0188*  sysvar_keyled:			EQU	26h	; 1: Keyboard LED status
040060             0189*  sysvar_scrMode:			EQU	27h	; 1: Screen mode
040060             0190*  sysvar_rtcEnable:		EQU	28h	; 1: RTC enable flag (0: disabled, 1: use ESP32 RTC)
040060             0191*  
040060             0192*  ; Flags for the VPD protocol
040060             0193*  ;
040060             0194*  vdp_pflag_cursor:		EQU	00000001b
040060             0195*  vdp_pflag_scrchar:		EQU	00000010b
040060             0196*  vdp_pflag_point:		EQU	00000100b
040060             0197*  vdp_pflag_audio:		EQU	00001000b
040060             0198*  vdp_pflag_mode:			EQU	00010000b
040060             0199*  vdp_pflag_rtc:			EQU	00100000b
040060             0200*  
040060             0201*  ;
040060             0202*  ; FatFS structures
040060             0203*  ; These mirror the structures contained in src_fatfs/ff.h in the MOS project
040060             0204*  ;
040060             0205*  ; Object ID and allocation information (FFOBJID)
040060             0206*  ;
040060             0207*  ; Indexes into FFOBJID structure
040060             0208*  ffobjid_fs:			EQU	0	; 3: Pointer to the hosting volume of this object
040060             0209*  ffobjid_id:			EQU	3	; 2: Hosting volume mount ID
040060             0210*  ffobjid_attr:		EQU	5	; 1: Object attribute
040060             0211*  ffobjid_stat:		EQU	6	; 1: Object chain status (b1-0: =0:not contiguous, =2:contiguous, =3:fragmented in this session, b2:sub-directory stretched)
040060             0212*  ffobjid_sclust:		EQU	7	; 4: Object data start cluster (0:no cluster or root directory)
040060             0213*  ffobjid_objsize:	EQU	11	; 4: Object size (valid when sclust != 0)
040060             0214*  ;
040060             0215*  ; File object structure (FIL)
040060             0216*  ;
040060             0217*  ; Indexes into FIL structure
040060             0218*  fil_obj:		EQU 0	; 15: Object identifier
040060             0219*  fil_flag:		EQU	15 	;  1: File status flags
040060             0220*  fil_err:		EQU	16	;  1: Abort flag (error code)
040060             0221*  fil_fptr:		EQU	17	;  4: File read/write pointer (Zeroed on file open)
040060             0222*  fil_clust:		EQU	21	;  4: Current cluster of fpter (invalid when fptr is 0)
040060             0223*  fil_sect:		EQU	25	;  4: Sector number appearing in buf[] (0:invalid)
040060             0224*  fil_dir_sect:	EQU	29	;  4: Sector number containing the directory entry
040060             0225*  fil_dir_ptr:	EQU	33	;  3: Pointer to the directory entry in the win[]
040060             0226*  ;
040060             0227*  ; Directory object structure (DIR)
040060             0228*  ; Indexes into DIR structure
040060             0229*  dir_obj:		EQU  0	; 15: Object identifier
040060             0230*  dir_dptr:		EQU	15	;  4: Current read/write offset
040060             0231*  dir_clust:		EQU	19	;  4: Current cluster
040060             0232*  dir_sect:		EQU	23	;  4: Current sector (0:Read operation has terminated)
040060             0233*  dir_dir:		EQU	27	;  3: Pointer to the directory item in the win[]
040060             0234*  dir_fn:			EQU	30	; 12: SFN (in/out) {body[8],ext[3],status[1]}
040060             0235*  dir_blk_ofs:	EQU	42	;  4: Offset of current entry block being processed (0xFFFFFFFF:Invalid)
040060             0236*  ;
040060             0237*  ; File information structure (FILINFO)
040060             0238*  ;
040060             0239*  ; Indexes into FILINFO structure
040060             0240*  filinfo_fsize:		EQU 0	;   4: File size
040060             0241*  filinfo_fdate:		EQU	4	;   2: Modified date
040060             0242*  filinfo_ftime:		EQU	6	;   2: Modified time
040060             0243*  filinfo_fattrib:	EQU	8	;   1: File attribute
040060             0244*  filinfo_altname:	EQU	9	;  13: Alternative file name
040060             0245*  filinfo_fname:		EQU	22	; 256: Primary file name
040060             0246*  ;
040060             0247*  ; Macro for calling the API
040060             0248*  ; Parameters:
040060             0249*  ; - function: One of the function numbers listed above
040060             0250*  ;
040060             0251*  	MACRO	MOSCALL	function
040060             0252*  			LD	A, function
040060             0253*  			RST.LIL	08h
040060             0254*  	ENDMACRO
040060             0030       include "functions.inc"
040060             0001*  
040060             0002*      MACRO printChar char
040060             0003*      LD A, char
040060             0004*      RST.LIL 10h
040060             0005*      ENDMACRO
040060             0006*  
040060             0007*  ; Simulated call to subroutine at HL
040060             0008*  ; inputs: HL pointing to the subroutine address plus whatever the called function expects
040060             0009*  ; outputs: whatever the subroutine does, including HL and BC
040060             0010*  ; destroys: only what the subroutine does, but always BC
040060             0011*      MACRO callHL
040060             0012*      ld bc,@F ; Address of first instruction after the jump
040060             0013*      push bc ; which constitutes the return address
040060             0014*      jp (hl) ; Jump to the address in HL
040060             0015*  @@:
040060             0016*      ENDMACRO
040060             0017*  
040060             0018*  ; Simulated call to subroutine at IX
040060             0019*  ; inputs: IX pointing to the subroutine address plus whatever the called function expects
040060             0020*  ; outputs: whatever the subroutine does, including IX and BC
040060             0021*  ; destroys: only what the subroutine does, but always BC
040060             0022*      MACRO callIX
040060             0023*      ld bc,@F ; Address of first instruction after the jump
040060             0024*      push bc ; which constitutes the return address
040060             0025*      jp (ix) ; Jump to the address in IX
040060             0026*  @@:
040060             0027*      ENDMACRO
040060             0028*  
040060             0029*  ; Simulated call to soubroutinte at IY
040060             0030*  ; inputs: IY pointing to the subroutine address plus whatever the called function expects
040060             0031*  ; outputs: whatever the subroutine does, including IY and BC
040060             0032*  ; destroys: only what the subroutine does, but always BC
040060             0033*      MACRO callIY
040060             0034*      ld bc,@F ; Address of first instruction after the jump
040060             0035*      push bc ; which constitutes the return address
040060             0036*      jp (iy) ; Jump to the address in IY
040060             0037*  @@:
040060             0038*      ENDMACRO
040060             0039*  
040060             0040*  ; put the value in HLU into the accumulator
040060             0041*  ; destroys: af
040060             0042*      MACRO HLU_TO_A
040060             0043*      push hl ; 4 cycles
040060             0044*      inc sp ; 1 cycle
040060             0045*      pop af ; 4 cycles
040060             0046*      dec sp ; 1 cycle
040060             0047*      ; 10 cycles total
040060             0048*      ENDMACRO
040060             0049*  
040060             0050*  A_TO_HLU:
040060             0051*      ; call is 7 cycles
040060 22 6D 00 04 0052*      ld (@scratch),hl ; 7 cycles
040064 32 6F 00 04 0053*      ld (@scratch+2),a ; 5 cycles
040068 2A 6D 00 04 0054*      ld hl,(@scratch) ; 7 cycles
04006C C9          0055*      ret ; 6 cycles
04006D             0056*      ; 25 cycles total
04006D 00 00 00    0057*  @scratch: dl 0
040070             0058*  
040070             0059*      ; TODO: implement this
040070             0060*      ; MACRO A_TO_HLU
040070             0061*      ;     push.s af
040070             0062*      ;     inc sp
040070             0063*      ;     push.s hl
040070             0064*      ;     pop hl
040070             0065*      ;     inc sp
040070             0066*      ;     inc sp
040070             0067*      ; ENDMACRO
040070             0068*  
040070             0069*      MACRO PUSH_ALL
040070             0070*      ex af,af'
040070             0071*      exx
040070             0072*      push af
040070             0073*      push hl
040070             0074*      push bc
040070             0075*      push de
040070             0076*  
040070             0077*      ex af,af'
040070             0078*      exx
040070             0079*      push af
040070             0080*      push hl
040070             0081*      push bc
040070             0082*      push de
040070             0083*      push ix
040070             0084*      push iy
040070             0085*      ENDMACRO
040070             0086*  
040070             0087*      MACRO POP_ALL
040070             0088*      pop iy
040070             0089*      pop ix
040070             0090*      pop de
040070             0091*      pop bc
040070             0092*      pop hl
040070             0093*      pop af
040070             0094*      ex af,af'
040070             0095*      exx
040070             0096*  
040070             0097*      pop de
040070             0098*      pop bc
040070             0099*      pop hl
040070             0100*      pop af
040070             0101*      ex af,af'
040070             0102*      exx
040070             0103*      ENDMACRO
040070             0104*  
040070             0105*  ; Print a zero-terminated string inline with code, e.g.:
040070             0106*  ;
040070             0107*  ;    call printInline
040070             0108*  ;    ASCIZ "Hello, world!\r\n"
040070             0109*  ;
040070             0110*  ; Destroys: HL,AF
040070             0111*  printInline:
040070 E1          0112*      pop hl ; get the return address = pointer to start of string
040071 CD 77 00 04 0113*      call printString ; HL advances to end of string
040075 E5          0114*      push hl ; restore the return address = pointer to end of string
040076 C9          0115*      ret
040077             0116*  
040077             0117*  ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/functions.s
040077             0118*  ; Print a zero-terminated string
040077             0119*  ; HL: Pointer to string
040077             0120*  printString:
040077 C5          0121*      PUSH BC
040078 01 00 00 00 0122*      LD BC,0
04007C 3E 00       0123*      LD A,0
04007E 5B DF       0124*      RST.LIL 18h
040080 C1          0125*      POP BC
040081 C9          0126*      RET
040082             0127*  ; print a VDU sequence
040082             0128*  ; HL: Pointer to VDU sequence - <1 byte length> <data>
040082             0129*  sendVDUsequence:
040082 C5          0130*      PUSH BC
040083 01 00 00 00 0131*      LD BC, 0
040087 4E          0132*      LD C, (HL)
040088 5B DF       0133*      RST.LIL 18h
04008A C1          0134*      POP BC
04008B C9          0135*      RET
04008C             0136*  ; Print Newline sequence to VDP
04008C             0137*  printNewLine:
04008C F5          0138*      push af ; for some reason rst.lil 10h sets carry flag
04008D 3E 0D       0139*      LD A, '\r'
04008F 5B D7       0140*      RST.LIL 10h
040091 3E 0A       0141*      LD A, '\n'
040093 5B D7       0142*      RST.LIL 10h
040095 F1          0143*      pop af
040096 C9          0144*      RET
040097             0145*  
040097             0146*  ; Print a 24-bit HEX number
040097             0147*  ; HLU: Number to print
040097             0148*  printHex24:
040097             0149*      HLU_TO_A
040097 E5          0001*M     push hl ; 4 cycles
040098 33          0002*M     inc sp ; 1 cycle
040099 F1          0003*M     pop af ; 4 cycles
04009A 3B          0004*M     dec sp ; 1 cycle
04009B             0005*M     ; 10 cycles total
04009B CD A5 00 04 0150*      CALL printHex8
04009F             0151*  ; Print a 16-bit HEX number
04009F             0152*  ; HL: Number to print
04009F             0153*  printHex16:
04009F 7C          0154*      LD A,H
0400A0 CD A5 00 04 0155*      CALL printHex8
0400A4 7D          0156*      LD A,L
0400A5             0157*  ; Print an 8-bit HEX number
0400A5             0158*  ; A: Number to print
0400A5             0159*  printHex8:
0400A5 4F          0160*      LD C,A
0400A6 1F          0161*      RRA
0400A7 1F          0162*      RRA
0400A8 1F          0163*      RRA
0400A9 1F          0164*      RRA
0400AA CD AF 00 04 0165*      CALL @F
0400AE 79          0166*      LD A,C
0400AF             0167*  @@:
0400AF E6 0F       0168*      AND 0Fh
0400B1 C6 90       0169*      ADD A,90h
0400B3 27          0170*      DAA
0400B4 CE 40       0171*      ADC A,40h
0400B6 27          0172*      DAA
0400B7 5B D7       0173*      RST.LIL 10h
0400B9 C9          0174*      RET
0400BA             0175*  
0400BA             0176*  printHexA:
0400BA F5          0177*      push af
0400BB C5          0178*      push bc
0400BC CD A5 00 04 0179*      call printHex8
0400C0 3E 20       0180*      ld a,' '
0400C2 5B D7       0181*      rst.lil 10h
0400C4 C1          0182*      pop bc
0400C5 F1          0183*      pop af
0400C6 C9          0184*      ret
0400C7             0185*  
0400C7             0186*  printHexHL:
0400C7 F5          0187*      push af
0400C8 C5          0188*      push bc
0400C9 CD 9F 00 04 0189*      call printHex16
0400CD 3E 20       0190*      ld a,' '
0400CF 5B D7       0191*      rst.lil 10h
0400D1 C1          0192*      pop bc
0400D2 F1          0193*      pop af
0400D3 C9          0194*      ret
0400D4             0195*  
0400D4             0196*  printHexUHL:
0400D4 F5          0197*      push af
0400D5 C5          0198*      push bc
0400D6 CD 97 00 04 0199*      call printHex24
0400DA 3E 20       0200*      ld a,' '
0400DC 5B D7       0201*      rst.lil 10h
0400DE C1          0202*      pop bc
0400DF F1          0203*      pop af
0400E0 C9          0204*      ret
0400E1             0205*  
0400E1             0206*  printHexAUHL:
0400E1 F5          0207*      push af
0400E2 C5          0208*      push bc
0400E3 CD A5 00 04 0209*      call printHex8
0400E7 3E 2E       0210*      ld a,'.'
0400E9 5B D7       0211*      rst.lil 10h
0400EB CD 97 00 04 0212*      call printHex24
0400EF 3E 20       0213*      ld a,' '
0400F1 5B D7       0214*      rst.lil 10h
0400F3 C1          0215*      pop bc
0400F4 F1          0216*      pop af
0400F5 C9          0217*      ret
0400F6             0218*  
0400F6             0219*  printHexABHL:
0400F6             0220*  ; preserve registers
0400F6 C5          0221*      push bc ; b will be ok c will not
0400F7 F5          0222*      push af ; will get totally destroyed
0400F8             0223*  ; print a
0400F8 CD A5 00 04 0224*      call printHex8
0400FC             0225*  ; print b
0400FC 78          0226*      ld a,b
0400FD CD A5 00 04 0227*      call printHex8
040101             0228*  ; print hl
040101 CD 9F 00 04 0229*      call printHex16
040105             0230*  ; restore registers
040105 F1          0231*      pop af
040106 C1          0232*      pop bc
040107 C9          0233*      ret
040108             0234*  
040108             0235*  printHexBHL:
040108             0236*  ; preserve registers
040108 C5          0237*      push bc ; b will be ok c will not
040109 F5          0238*      push af ; will get totally destroyed
04010A             0239*  ; print b
04010A 78          0240*      ld a,b
04010B CD A5 00 04 0241*      call printHex8
04010F             0242*  ; print hl
04010F CD 9F 00 04 0243*      call printHex16
040113             0244*  ; restore registers
040113 F1          0245*      pop af
040114 C1          0246*      pop bc
040115 C9          0247*      ret
040116             0248*  
040116             0249*  printHexCDE:
040116             0250*  ; preserve registers
040116 C5          0251*      push bc ; b will be ok c will not
040117 F5          0252*      push af ; will get totally destroyed
040118             0253*  ; print c
040118 79          0254*      ld a,c
040119 CD A5 00 04 0255*      call printHex8
04011D             0256*  ; print de
04011D EB          0257*      ex de,hl
04011E CD 9F 00 04 0258*      call printHex16
040122 EB          0259*      ex de,hl
040123             0260*  ; restore registers
040123 F1          0261*      pop af
040124 C1          0262*      pop bc
040125 C9          0263*      ret
040126             0264*  
040126             0265*  printHexUIX:
040126             0266*  ; store everything in scratch
040126 22 9F 05 04 0267*      ld (uhl),hl
04012A ED 43 A2 05 0268*      ld (ubc),bc
       04          
04012F ED 53 A5 05 0269*      ld (ude),de
       04          
040134 DD 22 A8 05 0270*      ld (uix),ix
       04          
040139 FD 22 AB 05 0271*      ld (uiy),iy
       04          
04013E F5          0272*      push af ; fml
04013F             0273*  
04013F 21 36 05 04 0274*      ld hl,str_ixu
040143 CD 77 00 04 0275*      call printString
040147 2A A8 05 04 0276*      ld hl,(uix)
04014B CD 97 00 04 0277*      call printHex24
04014F CD 8C 00 04 0278*      call printNewLine
040153             0279*  
040153             0280*  ; restore everything
040153 2A 9F 05 04 0281*      ld hl, (uhl)
040157 ED 4B A2 05 0282*      ld bc, (ubc)
       04          
04015C ED 5B A5 05 0283*      ld de, (ude)
       04          
040161 DD 2A A8 05 0284*      ld ix, (uix)
       04          
040166 FD 2A AB 05 0285*      ld iy, (uiy)
       04          
04016B F1          0286*      pop af
04016C             0287*  ; all done
04016C C9          0288*      ret
04016D             0289*  
04016D             0290*  ; Print a 0x HEX prefix
04016D             0291*  DisplayHexPrefix:
04016D 3E 30       0292*      LD A, '0'
04016F 5B D7       0293*      RST.LIL 10h
040171 3E 78       0294*      LD A, 'x'
040173 5B D7       0295*      RST.LIL 10h
040175 C9          0296*      RET
040176             0297*  
040176             0298*      MACRO printDecBC
040176             0299*      push hl
040176             0300*      push bc
040176             0301*      pop hl
040176             0302*      call printDec
040176             0303*      pop hl
040176             0304*      ENDMACRO
040176             0305*  
040176             0306*      MACRO printDecDE
040176             0307*      push hl
040176             0308*      push de
040176             0309*      pop hl
040176             0310*      call printDec
040176             0311*      pop hl
040176             0312*      ENDMACRO
040176             0313*  
040176             0314*      MACRO printDecHL
040176             0315*      call printDec
040176             0316*      ENDMACRO
040176             0317*  
040176             0318*      MACRO printDecIX
040176             0319*      push hl
040176             0320*      push ix
040176             0321*      pop hl
040176             0322*      call printDec
040176             0323*      pop hl
040176             0324*      ENDMACRO
040176             0325*  
040176             0326*      MACRO printDecIY
040176             0327*      push hl
040176             0328*      push iy
040176             0329*      pop hl
040176             0330*      call printDec
040176             0331*      pop hl
040176             0332*      ENDMACRO
040176             0333*  
040176             0334*  
040176             0335*  ; Prints the right justified decimal value in HL without leading zeroes
040176             0336*  ; HL : Value to print
040176             0337*  ; preserves all registers and flags
040176             0338*  printDec:
040176             0339*  ; BEGIN MY CODE
040176             0340*  ; back up all the things
040176 F5          0341*      push af
040177 C5          0342*      push bc
040178 D5          0343*      push de
040179 E5          0344*      push hl
04017A             0345*  ; END MY CODE
04017A 11 A2 01 04 0346*      LD DE, _printDecBuffer
04017E CD B2 01 04 0347*      CALL u24_to_ascii
040182             0348*  ; BEGIN MY CODE
040182             0349*  ; replace leading zeroes with spaces
040182 21 A2 01 04 0350*      LD HL, _printDecBuffer
040186 06 07       0351*      ld B, 7 ; if HL was 0, we want to keep the final zero
040188             0352*  @loop:
040188 7E          0353*      LD A, (HL)
040189 FE 30       0354*      CP '0'
04018B C2 95 01 04 0355*      JP NZ, @done
04018F 3E 20       0356*      LD A, ' '
040191 77          0357*      LD (HL), A
040192 23          0358*      INC HL
040193             0359*      ; CALL vdu_cursor_forward
040193 10 F3       0360*      DJNZ @loop
040195             0361*  @done:
040195             0362*  ; END MY CODE
040195 21 A2 01 04 0363*      LD HL, _printDecBuffer
040199 CD 77 00 04 0364*      CALL printString
04019D             0365*  ; BEGIN MY CODE
04019D             0366*  ; restore all the things
04019D E1          0367*      pop hl
04019E D1          0368*      pop de
04019F C1          0369*      pop bc
0401A0 F1          0370*      pop af
0401A1             0371*  ; END MY CODE
0401A1 C9          0372*      RET
0401A2 00 00 00 00 0373*  _printDecBuffer: blkb 16,0 ; a few bytes extra just to be sure
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
0401B2             0374*  
0401B2             0375*  ; This routine converts the unsigned 24-bit value in HLU into it's ASCII representation,
0401B2             0376*  ; starting to memory location pointing by DE, in decimal form and with leading zeroes
0401B2             0377*  ; so it will allways be 8 characters length
0401B2             0378*  ; HL : Value to convert to string
0401B2             0379*  ; DE : pointer to buffer, at least 8 byte + 0
0401B2             0380*  u24_to_ascii:
0401B2 01 80 69 67 0381*      LD BC,-10000000
0401B6 CD E9 01 04 0382*      CALL @one_digit
0401BA 01 C0 BD F0 0383*      LD BC,-1000000
0401BE CD E9 01 04 0384*      CALL @one_digit
0401C2 01 60 79 FE 0385*      LD BC,-100000
0401C6 CD E9 01 04 0386*      CALL @one_digit
0401CA 01 F0 D8 FF 0387*      LD BC,-10000
0401CE CD E9 01 04 0388*      CALL @one_digit
0401D2 01 18 FC FF 0389*      LD BC,-1000
0401D6 CD E9 01 04 0390*      CALL @one_digit
0401DA 01 9C FF FF 0391*      LD BC,-100
0401DE CD E9 01 04 0392*      CALL @one_digit
0401E2 0E F6       0393*      LD C,-10
0401E4 CD E9 01 04 0394*      CALL @one_digit
0401E8 48          0395*      LD C,B
0401E9             0396*  @one_digit:
0401E9 3E 2F       0397*      LD A,'0'-1
0401EB             0398*  @divide_me:
0401EB 3C          0399*      INC A
0401EC 09          0400*      ADD HL,BC
0401ED 38 FC       0401*      JR C,@divide_me
0401EF ED 42       0402*      SBC HL,BC
0401F1 12          0403*      LD (DE),A
0401F2 13          0404*      INC DE
0401F3 C9          0405*      RET
0401F4             0406*  
0401F4             0407*  print_u24:
0401F4 D5          0408*      push de
0401F5 E5          0409*      push hl
0401F6 11 A2 01 04 0410*      ld de,_printDecBuffer
0401FA CD B2 01 04 0411*      call u24_to_ascii
0401FE 21 A2 01 04 0412*      ld hl,_printDecBuffer
040202 CD 77 00 04 0413*      call printString
040206 3E 20       0414*      ld a,' '
040208 5B D7       0415*      rst.lil 10h
04020A E1          0416*      pop hl
04020B D1          0417*      pop de
04020C C9          0418*      ret
04020D             0419*  
04020D             0420*  ; u168_to_ascii: Converts an unsigned 16.8 fixed-point value in HL to an ASCII string.
04020D             0421*  ; HL : Value to convert to string (integer part in H, fractional part in L)
04020D             0422*  ; DE : Pointer to buffer, requires at least 11 bytes (8 digits, sign, decimal point, and null terminator)
04020D             0423*  u168_to_ascii:
04020D             0424*  ; add a leading space to make room for sign flag if needed
04020D 3E 20       0425*      ld a,' '
04020F 12          0426*      ld (de),a
040210 13          0427*      inc de
040211             0428*  ; Convert integer part
040211 E5          0429*      push hl ; Save HL (we’ll need the fractional part later)
040212 CD CF 07 04 0430*      call hlu_udiv256 ; Shift to get integer portion in HL
040216 01 F0 D8 FF 0431*      ld bc, -10000
04021A CD 3D 02 04 0432*      call @one_int
04021E 01 18 FC FF 0433*      ld bc, -1000
040222 CD 3D 02 04 0434*      call @one_int
040226 01 9C FF FF 0435*      ld bc, -100
04022A CD 3D 02 04 0436*      call @one_int
04022E 0E F6       0437*      ld c, -10
040230 CD 3D 02 04 0438*      call @one_int
040234 48          0439*      ld c, b
040235 CD 3D 02 04 0440*      call @one_int
040239 C3 48 02 04 0441*      jp @frac ; Jump to fractional part conversion
04023D             0442*  @one_int:
04023D 3E 2F       0443*      ld a, '0' - 1 ; Start ASCII character at '0'
04023F             0444*  @divide_me:
04023F 3C          0445*      inc a
040240 09          0446*      add hl, bc ; Accumulate until overflow
040241 38 FC       0447*      jr c, @divide_me
040243 ED 42       0448*      sbc hl, bc ; Remove excess after overflow
040245 12          0449*      ld (de), a ; Store ASCII digit
040246 13          0450*      inc de
040247 C9          0451*      ret
040248             0452*  ; Convert fractional part
040248             0453*  @frac:
040248 3E 2E       0454*      ld a, '.' ; Decimal point
04024A 12          0455*      ld (de), a
04024B 13          0456*      inc de
04024C E1          0457*      pop hl ; Restore HL with original fraction
04024D 06 03       0458*      ld b, 3 ; Loop counter for 3 fractional digits
04024F             0459*  @frac_loop:
04024F 26 0A       0460*      ld h, 10 ; Load multiplier for fractional part
040251 ED 6C       0461*      mlt hl ; Multiply by 10, result in HL (H holds the integer part)
040253 3E 30       0462*      ld a, '0'
040255 84          0463*      add a, h ; Convert integer part to ASCII
040256 12          0464*      ld (de), a
040257 13          0465*      inc de
040258 10 F5       0466*      djnz @frac_loop ; Repeat for each fractional digit
04025A             0467*  ; Add null terminator
04025A AF          0468*      xor a ; Null terminator
04025B 12          0469*      ld (de), a
04025C C9          0470*      ret
04025D             0471*  
04025D             0472*  print_u168:
04025D D5          0473*      push de
04025E E5          0474*      push hl
04025F 11 A2 01 04 0475*      ld de,_printDecBuffer
040263 CD 0D 02 04 0476*      call u168_to_ascii
040267 21 A2 01 04 0477*      ld hl,_printDecBuffer
04026B CD 77 00 04 0478*      call printString
04026F E1          0479*      pop hl
040270 D1          0480*      pop de
040271 C9          0481*      ret
040272             0482*  
040272             0483*  ; signed version of u168_to_ascii
040272             0484*  s168_to_ascii:
040272 D5          0485*      push de ; save starting address of buffer
040273 CD 68 07 04 0486*      call hlu_abs
040277 F5          0487*      push af ; save sign flag
040278 CD 0D 02 04 0488*      call u168_to_ascii
04027C F1          0489*      pop af ; restore sign flag
04027D D1          0490*      pop de ; restore starting address of buffer
04027E F0          0491*      ret p ; hlu was positive so nothing to do
04027F 3E 2D       0492*      ld a,'-'
040281 12          0493*      ld (de),a
040282 C9          0494*      ret
040283             0495*  
040283             0496*  print_s168:
040283 D5          0497*      push de
040284 E5          0498*      push hl
040285 11 A2 01 04 0499*      ld de,_printDecBuffer
040289 CD 72 02 04 0500*      call s168_to_ascii
04028D 21 A2 01 04 0501*      ld hl,_printDecBuffer
040291 CD 77 00 04 0502*      call printString
040295 E1          0503*      pop hl
040296 D1          0504*      pop de
040297 C9          0505*      ret
040298             0506*  
040298             0507*  print_s168_hl:
040298 F5          0508*      push af
040299 E5          0509*      push hl
04029A CD 83 02 04 0510*      call print_s168
04029E 3E 20       0511*      ld a,' '
0402A0 5B D7       0512*      rst.lil 10h
0402A2 E1          0513*      pop hl
0402A3 F1          0514*      pop af
0402A4 C9          0515*      ret
0402A5             0516*  
0402A5             0517*  print_s168_bc:
0402A5 F5          0518*      push af
0402A6 C5          0519*      push bc
0402A7 E5          0520*      push hl
0402A8 C5          0521*      push bc
0402A9 E1          0522*      pop hl
0402AA CD 83 02 04 0523*      call print_s168
0402AE 3E 20       0524*      ld a,' '
0402B0 5B D7       0525*      rst.lil 10h
0402B2 E1          0526*      pop hl
0402B3 C1          0527*      pop bc
0402B4 F1          0528*      pop af
0402B5 C9          0529*      ret
0402B6             0530*  
0402B6             0531*  print_s168_de:
0402B6 F5          0532*      push af
0402B7 D5          0533*      push de
0402B8 E5          0534*      push hl
0402B9 EB          0535*      ex de,hl
0402BA CD 83 02 04 0536*      call print_s168
0402BE 3E 20       0537*      ld a,' '
0402C0 5B D7       0538*      rst.lil 10h
0402C2 E1          0539*      pop hl
0402C3 D1          0540*      pop de
0402C4 F1          0541*      pop af
0402C5 C9          0542*      ret
0402C6             0543*  
0402C6             0544*  print_s168_hl_bc_de:
0402C6 F5          0545*      push af
0402C7 C5          0546*      push bc
0402C8 D5          0547*      push de
0402C9 E5          0548*      push hl
0402CA CD 83 02 04 0549*      call print_s168
0402CE 3E 20       0550*      ld a,' '
0402D0 5B D7       0551*      rst.lil 10h
0402D2 C5          0552*      push bc
0402D3 E1          0553*      pop hl
0402D4 CD 83 02 04 0554*      call print_s168
0402D8 3E 20       0555*      ld a,' '
0402DA 5B D7       0556*      rst.lil 10h
0402DC EB          0557*      ex de,hl
0402DD CD 83 02 04 0558*      call print_s168
0402E1 3E 20       0559*      ld a,' '
0402E3 5B D7       0560*      rst.lil 10h
0402E5 E1          0561*      pop hl
0402E6 D1          0562*      pop de
0402E7 C1          0563*      pop bc
0402E8 F1          0564*      pop af
0402E9 C9          0565*      ret
0402EA             0566*  
0402EA             0567*  print_s168_bc_de:
0402EA F5          0568*      push af
0402EB C5          0569*      push bc
0402EC D5          0570*      push de
0402ED C5          0571*      push bc
0402EE E1          0572*      pop hl
0402EF CD 83 02 04 0573*      call print_s168
0402F3 3E 20       0574*      ld a,' '
0402F5 5B D7       0575*      rst.lil 10h
0402F7 EB          0576*      ex de,hl
0402F8 CD 83 02 04 0577*      call print_s168
0402FC 3E 20       0578*      ld a,' '
0402FE 5B D7       0579*      rst.lil 10h
040300 E1          0580*      pop hl
040301 D1          0581*      pop de
040302 C1          0582*      pop bc
040303 F1          0583*      pop af
040304 C9          0584*      ret
040305             0585*  
040305             0586*  print_s168_a:
040305 F5          0587*      push af
040306 C5          0588*      push bc
040307 E5          0589*      push hl
040308 21 00 00 00 0590*      ld hl,0
04030C 6F          0591*      ld l,a
04030D CD 98 02 04 0592*      call print_s168_hl
040311 E1          0593*      pop hl
040312 C1          0594*      pop bc
040313 F1          0595*      pop af
040314 C9          0596*      ret
040315             0597*  
040315             0598*  ; #### new functions added by Brandon R. Gates ####
040315             0599*  
040315             0600*  ; print the binary representation of the 8-bit value in a
040315             0601*  ; destroys a, hl, bc
040315             0602*  printBin8:
040315 06 08       0603*      ld b,8 ; loop counter for 8 bits
040317 21 32 03 04 0604*      ld hl,@cmd ; set hl to the low byte of the output string
04031B             0605*      ; (which will be the high bit of the value in a)
04031B             0606*  @loop:
04031B 07          0607*      rlca ; put the next highest bit into carry
04031C 38 04       0608*      jr c,@one
04031E 36 30       0609*      ld (hl),'0'
040320 18 02       0610*      jr @next_bit
040322             0611*  @one:
040322 36 31       0612*      ld (hl),'1'
040324             0613*  @next_bit:
040324 23          0614*      inc hl
040325 10 F4       0615*      djnz @loop
040327             0616*  ; print it
040327 21 32 03 04 0617*      ld hl,@cmd
04032B 01 08 00 00 0618*      ld bc,@end-@cmd
04032F 5B DF       0619*      rst.lil $18
040331 C9          0620*      ret
040332             0621*  @cmd: ds 8 ; eight bytes for eight bits
04033A             0622*  @end:
04033A             0623*  
04033A             0624*  ; print the binary representation of the 8-bit value in a
04033A             0625*  ; in reverse order (lsb first)
04033A             0626*  ; destroys a, hl, bc
04033A             0627*  printBin8Rev:
04033A 06 08       0628*      ld b,8 ; loop counter for 8 bits
04033C 21 57 03 04 0629*      ld hl,@cmd ; set hl to the low byte of the output string
040340             0630*      ; (which will be the high bit of the value in a)
040340             0631*  @loop:
040340 0F          0632*      rrca ; put the next lowest bit into carry
040341 38 04       0633*      jr c,@one
040343 36 30       0634*      ld (hl),'0'
040345 18 02       0635*      jr @next_bit
040347             0636*  @one:
040347 36 31       0637*      ld (hl),'1'
040349             0638*  @next_bit:
040349 23          0639*      inc hl
04034A 10 F4       0640*      djnz @loop
04034C             0641*  ; print it
04034C 21 57 03 04 0642*      ld hl,@cmd
040350 01 08 00 00 0643*      ld bc,@end-@cmd
040354 5B DF       0644*      rst.lil $18
040356 C9          0645*      ret
040357             0646*  @cmd: ds 8 ; eight bytes for eight bits
04035F             0647*  @end:
04035F             0648*  
04035F             0649*  ; print registers to screen in hexidecimal format
04035F             0650*  ; inputs: none
04035F             0651*  ; outputs: values of every register printed to screen
04035F             0652*  ;    values of each register in global scratch memory
04035F             0653*  ; destroys: nothing
04035F             0654*  stepRegistersHex:
04035F             0655*  ; store everything in scratch
04035F 22 9F 05 04 0656*      ld (uhl),hl
040363 ED 43 A2 05 0657*      ld (ubc),bc
       04          
040368 ED 53 A5 05 0658*      ld (ude),de
       04          
04036D DD 22 A8 05 0659*      ld (uix),ix
       04          
040372 FD 22 AB 05 0660*      ld (uiy),iy
       04          
040377 F5          0661*      push af ; fml
040378 E1          0662*      pop hl ; thanks, zilog
040379 22 9C 05 04 0663*      ld (uaf),hl
04037D F5          0664*      push af ; dammit
04037E             0665*  
04037E             0666*  ; home the cursor
04037E             0667*      ; call vdu_home_cursor
04037E             0668*  
04037E             0669*  ; print each register
04037E 21 22 05 04 0670*      ld hl,str_afu
040382 CD 77 00 04 0671*      call printString
040386 2A 9C 05 04 0672*      ld hl,(uaf)
04038A CD 97 00 04 0673*      call printHex24
04038E CD 8C 00 04 0674*      call printNewLine
040392             0675*  
040392 21 27 05 04 0676*      ld hl,str_hlu
040396 CD 77 00 04 0677*      call printString
04039A 2A 9F 05 04 0678*      ld hl,(uhl)
04039E CD 97 00 04 0679*      call printHex24
0403A2 CD 8C 00 04 0680*      call printNewLine
0403A6             0681*  
0403A6 21 2C 05 04 0682*      ld hl,str_bcu
0403AA CD 77 00 04 0683*      call printString
0403AE 2A A2 05 04 0684*      ld hl,(ubc)
0403B2 CD 97 00 04 0685*      call printHex24
0403B6 CD 8C 00 04 0686*      call printNewLine
0403BA             0687*  
0403BA 21 31 05 04 0688*      ld hl,str_deu
0403BE CD 77 00 04 0689*      call printString
0403C2 2A A5 05 04 0690*      ld hl,(ude)
0403C6 CD 97 00 04 0691*      call printHex24
0403CA CD 8C 00 04 0692*      call printNewLine
0403CE             0693*  
0403CE 21 36 05 04 0694*      ld hl,str_ixu
0403D2 CD 77 00 04 0695*      call printString
0403D6 2A A8 05 04 0696*      ld hl,(uix)
0403DA CD 97 00 04 0697*      call printHex24
0403DE CD 8C 00 04 0698*      call printNewLine
0403E2             0699*  
0403E2 21 3B 05 04 0700*      ld hl,str_iyu
0403E6 CD 77 00 04 0701*      call printString
0403EA 2A AB 05 04 0702*      ld hl,(uiy)
0403EE CD 97 00 04 0703*      call printHex24
0403F2 CD 8C 00 04 0704*      call printNewLine
0403F6             0705*  
0403F6             0706*      ; call vsync
0403F6             0707*  
0403F6 CD 8C 00 04 0708*      call printNewLine
0403FA             0709*  
0403FA             0710*  ; check for right shift key and quit if pressed
0403FA             0711*      MOSCALL mos_getkbmap
0403FA 3E 1E       0001*M 			LD	A, function
0403FC 5B CF       0002*M 			RST.LIL	08h
0403FE             0712*  @stayhere:
0403FE             0713*  ; 7 RightShift
0403FE DD CB 00 76 0714*      bit 6,(ix+0)
040402 20 02       0715*      jr nz,@RightShift
040404 18 F8       0716*      jr @stayhere
040406             0717*  @RightShift:
040406 DD CB 0E 86 0718*      res 0,(ix+14) ; debounce the key (hopefully)
04040A 3E 80       0719*      ld a,%10000000
04040C             0720*      ; call multiPurposeDelay
04040C             0721*  
04040C             0722*  ; restore everything
04040C 2A 9F 05 04 0723*      ld hl, (uhl)
040410 ED 4B A2 05 0724*      ld bc, (ubc)
       04          
040415 ED 5B A5 05 0725*      ld de, (ude)
       04          
04041A DD 2A A8 05 0726*      ld ix, (uix)
       04          
04041F FD 2A AB 05 0727*      ld iy, (uiy)
       04          
040424 F1          0728*      pop af
040425             0729*  ; all done
040425 C9          0730*      ret
040426             0731*  
040426             0732*  ; print registers to screen in hexidecimal format
040426             0733*  ; inputs: none
040426             0734*  ; outputs: values of every register printed to screen
040426             0735*  ;    values of each register in global scratch memory
040426             0736*  ; destroys: nothing
040426             0737*  dumpRegistersHex:
040426             0738*  ; store everything in scratch
040426 22 9F 05 04 0739*      ld (uhl),hl
04042A ED 43 A2 05 0740*      ld (ubc),bc
       04          
04042F ED 53 A5 05 0741*      ld (ude),de
       04          
040434 DD 22 A8 05 0742*      ld (uix),ix
       04          
040439 FD 22 AB 05 0743*      ld (uiy),iy
       04          
04043E F5          0744*      push af ; fml
04043F E1          0745*      pop hl ; thanks, zilog
040440 22 9C 05 04 0746*      ld (uaf),hl
040444 F5          0747*      push af ; dammit
040445             0748*  
040445             0749*  ; home the cursor
040445             0750*      ; call vdu_home_cursor
040445             0751*      ; call printNewLine
040445             0752*  
040445             0753*  ; print each register
040445 21 22 05 04 0754*      ld hl,str_afu
040449 CD 77 00 04 0755*      call printString
04044D 2A 9C 05 04 0756*      ld hl,(uaf)
040451 CD 97 00 04 0757*      call printHex24
040455             0758*      ; call printNewLine
040455             0759*  
040455 21 27 05 04 0760*      ld hl,str_hlu
040459 CD 77 00 04 0761*      call printString
04045D 2A 9F 05 04 0762*      ld hl,(uhl)
040461 CD 97 00 04 0763*      call printHex24
040465             0764*      ; call printNewLine
040465             0765*  
040465 21 2C 05 04 0766*      ld hl,str_bcu
040469 CD 77 00 04 0767*      call printString
04046D 2A A2 05 04 0768*      ld hl,(ubc)
040471 CD 97 00 04 0769*      call printHex24
040475             0770*      ; call printNewLine
040475             0771*  
040475 21 31 05 04 0772*      ld hl,str_deu
040479 CD 77 00 04 0773*      call printString
04047D 2A A5 05 04 0774*      ld hl,(ude)
040481 CD 97 00 04 0775*      call printHex24
040485             0776*      ; call printNewLine
040485             0777*  
040485 21 36 05 04 0778*      ld hl,str_ixu
040489 CD 77 00 04 0779*      call printString
04048D 2A A8 05 04 0780*      ld hl,(uix)
040491 CD 97 00 04 0781*      call printHex24
040495             0782*      ; call printNewLine
040495             0783*  
040495 21 3B 05 04 0784*      ld hl,str_iyu
040499 CD 77 00 04 0785*      call printString
04049D 2A AB 05 04 0786*      ld hl,(uiy)
0404A1 CD 97 00 04 0787*      call printHex24
0404A5             0788*      ; call printNewLine
0404A5             0789*  
0404A5             0790*      ; call vdu_vblank
0404A5             0791*  
0404A5 CD 8C 00 04 0792*      call printNewLine
0404A9             0793*  ; restore everything
0404A9 2A 9F 05 04 0794*      ld hl, (uhl)
0404AD ED 4B A2 05 0795*      ld bc, (ubc)
       04          
0404B2 ED 5B A5 05 0796*      ld de, (ude)
       04          
0404B7 DD 2A A8 05 0797*      ld ix, (uix)
       04          
0404BC FD 2A AB 05 0798*      ld iy, (uiy)
       04          
0404C1 F1          0799*      pop af
0404C2             0800*  ; all done
0404C2 C9          0801*      ret
0404C3             0802*  
0404C3             0803*  dumpRegistersHexPrime:
0404C3 D9          0804*      exx
0404C4 08          0805*      ex af,af'
0404C5 CD 26 04 04 0806*      call dumpRegistersHex
0404C9 08          0807*      ex af,af'
0404CA D9          0808*      exx
0404CB C9          0809*      ret
0404CC             0810*  
0404CC             0811*  ; additionally dump prime registers
0404CC             0812*  ; inputs: none
0404CC             0813*  ; outputs: values of every register printed to screen
0404CC             0814*  ; destroys: nothing
0404CC             0815*  dumpRegistersHexAll:
0404CC CD 26 04 04 0816*      call dumpRegistersHex
0404D0 08          0817*      ex af,af'
0404D1 D9          0818*      exx
0404D2 CD 26 04 04 0819*      call dumpRegistersHex
0404D6 08          0820*      ex af,af'
0404D7 D9          0821*      exx
0404D8 C9          0822*      ret
0404D9             0823*  
0404D9             0824*  ; print hlu to screen in hexidecimal format
0404D9             0825*  ; inputs: none
0404D9             0826*  ; destroys: nothing
0404D9             0827*  print_hex_hl:
0404D9 F5          0828*      push af
0404DA E5          0829*      push hl
0404DB 21 27 05 04 0830*      ld hl,str_hlu
0404DF CD 77 00 04 0831*      call printString
0404E3 E1          0832*      pop hl
0404E4 E5          0833*      push hl
0404E5 CD 97 00 04 0834*      call printHex24
0404E9 3E 20       0835*      ld a,' '
0404EB 5B D7       0836*      rst.lil 10h
0404ED E1          0837*      pop hl
0404EE F1          0838*      pop af
0404EF C9          0839*      ret
0404F0             0840*  
0404F0             0841*  ; print bcu to screen in hexidecimal format
0404F0             0842*  ; inputs: none
0404F0             0843*  ; destroys: nothing
0404F0             0844*  print_hex_bc:
0404F0 F5          0845*      push af
0404F1 E5          0846*      push hl
0404F2 C5          0847*      push bc
0404F3 21 2C 05 04 0848*      ld hl,str_bcu
0404F7 CD 77 00 04 0849*      call printString
0404FB E1          0850*      pop hl
0404FC E5          0851*      push hl
0404FD CD 97 00 04 0852*      call printHex24
040501 3E 20       0853*      ld a,' '
040503 5B D7       0854*      rst.lil 10h
040505 C1          0855*      pop bc
040506 E1          0856*      pop hl
040507 F1          0857*      pop af
040508 C9          0858*      ret
040509             0859*  
040509             0860*  ; print deu to screen in hexidecimal format
040509             0861*  ; inputs: none
040509             0862*  ; destroys: nothing
040509             0863*  print_hex_de:
040509 F5          0864*      push af
04050A E5          0865*      push hl
04050B D5          0866*      push de
04050C 21 31 05 04 0867*      ld hl,str_deu
040510 CD 77 00 04 0868*      call printString
040514 E1          0869*      pop hl
040515 E5          0870*      push hl
040516 CD 97 00 04 0871*      call printHex24
04051A 3E 20       0872*      ld a,' '
04051C 5B D7       0873*      rst.lil 10h
04051E D1          0874*      pop de
04051F E1          0875*      pop hl
040520 F1          0876*      pop af
040521 C9          0877*      ret
040522             0878*  
040522 20 61 66 3D 0879*  str_afu: db " af=",0
       00          
040527 20 68 6C 3D 0880*  str_hlu: db " hl=",0
       00          
04052C 20 62 63 3D 0881*  str_bcu: db " bc=",0
       00          
040531 20 64 65 3D 0882*  str_deu: db " de=",0
       00          
040536 20 69 78 3D 0883*  str_ixu: db " ix=",0
       00          
04053B 20 69 79 3D 0884*  str_iyu: db " iy=",0
       00          
040540             0885*  
040540             0886*  ; print udeuhl to screen in hexidecimal format
040540             0887*  ; inputs: none
040540             0888*  ; outputs: concatenated hexidecimal udeuhl
040540             0889*  ; destroys: nothing
040540             0890*  dumpUDEUHLHex:
040540             0891*  ; store everything in scratch
040540 22 9F 05 04 0892*      ld (uhl),hl
040544 ED 43 A2 05 0893*      ld (ubc),bc
       04          
040549 ED 53 A5 05 0894*      ld (ude),de
       04          
04054E DD 22 A8 05 0895*      ld (uix),ix
       04          
040553 FD 22 AB 05 0896*      ld (uiy),iy
       04          
040558 F5          0897*      push af
040559             0898*  
040559             0899*  ; print each register
040559             0900*  
040559 21 93 05 04 0901*      ld hl,str_udeuhl
04055D CD 77 00 04 0902*      call printString
040561 2A A5 05 04 0903*      ld hl,(ude)
040565 CD 97 00 04 0904*      call printHex24
040569 3E 2E       0905*      ld a,'.' ; print a dot to separate the values
04056B 5B D7       0906*      rst.lil 10h
04056D 2A 9F 05 04 0907*      ld hl,(uhl)
040571 CD 97 00 04 0908*      call printHex24
040575 CD 8C 00 04 0909*      call printNewLine
040579             0910*  
040579             0911*  ; restore everything
040579 2A 9F 05 04 0912*      ld hl, (uhl)
04057D ED 4B A2 05 0913*      ld bc, (ubc)
       04          
040582 ED 5B A5 05 0914*      ld de, (ude)
       04          
040587 DD 2A A8 05 0915*      ld ix, (uix)
       04          
04058C FD 2A AB 05 0916*      ld iy, (uiy)
       04          
040591 F1          0917*      pop af
040592             0918*  ; all done
040592 C9          0919*      ret
040593             0920*  
040593 75 64 65 2E 0921*  str_udeuhl: db "ude.uhl=",0
       75 68 6C 3D 
       00          
04059C             0922*  
04059C             0923*  ; global scratch memory for registers
04059C 00 00 00    0924*  uaf: dl 0
04059F 00 00 00    0925*  uhl: dl 0
0405A2 00 00 00    0926*  ubc: dl 0
0405A5 00 00 00    0927*  ude: dl 0
0405A8 00 00 00    0928*  uix: dl 0
0405AB 00 00 00    0929*  uiy: dl 0
0405AE 00 00 00    0930*  usp: dl 0
0405B1 00 00 00    0931*  upc: dl 0
0405B4             0932*  
0405B4             0933*  ; inputs: whatever is in the flags register
0405B4             0934*  ; outputs: binary representation of flags
0405B4             0935*  ;          with a header so we know which is what
0405B4             0936*  ; destroys: nothing
0405B4             0937*  ; preserves: everything
0405B4             0938*  dumpFlags:
0405B4             0939*  ; first we curse zilog for not giving direct access to flags
0405B4 F5          0940*      push af ; this is so we can send it back unharmed
0405B5 F5          0941*      push af ; this is so we can pop it to hl
0405B6             0942*  ; store everything in scratch
0405B6 22 9F 05 04 0943*      ld (uhl),hl
0405BA ED 43 A2 05 0944*      ld (ubc),bc
       04          
0405BF ED 53 A5 05 0945*      ld (ude),de
       04          
0405C4 DD 22 A8 05 0946*      ld (uix),ix
       04          
0405C9 FD 22 AB 05 0947*      ld (uiy),iy
       04          
0405CE             0948*  ; next we print the header
0405CE 21 FA 05 04 0949*      ld hl,@header
0405D2 CD 77 00 04 0950*      call printString
0405D6 E1          0951*      pop hl ; flags are now in l
0405D7 7D          0952*      ld a,l ; flags are now in a
0405D8 CD 15 03 04 0953*      call printBin8
0405DC CD 8C 00 04 0954*      call printNewLine
0405E0             0955*  ; restore everything
0405E0 2A 9F 05 04 0956*      ld hl, (uhl)
0405E4 ED 4B A2 05 0957*      ld bc, (ubc)
       04          
0405E9 ED 5B A5 05 0958*      ld de, (ude)
       04          
0405EE DD 2A A8 05 0959*      ld ix, (uix)
       04          
0405F3 FD 2A AB 05 0960*      ld iy, (uiy)
       04          
0405F8 F1          0961*      pop af ; send her home the way she came
0405F9 C9          0962*      ret
0405FA             0963*  ; Bit 7 (S): Sign flag
0405FA             0964*  ; Bit 6 (Z): Zero flag
0405FA             0965*  ; Bit 5 (5): Reserved (copy of bit 5 of the result)
0405FA             0966*  ; Bit 4 (H): Half Carry flag
0405FA             0967*  ; Bit 3 (3): Reserved (copy of bit 3 of the result)
0405FA             0968*  ; Bit 2 (PV): Parity/Overflow flag
0405FA             0969*  ; Bit 1 (N): Subtract flag
0405FA             0970*  ; Bit 0 (C): Carry flag
0405FA 53 5A 78 48 0971*  @header: db "SZxHxPNC\r\n",0 ; cr/lf and 0 terminator
       78 50 4E 43 
       0D 0A 00    
040605             0972*  
040605             0973*  ; set all the bits in the flag register
040605             0974*  ; more of an academic exercise than anything useful
040605             0975*  ; inputs; none
040605             0976*  ; outputs; a=0,f=255
040605             0977*  ; destroys: flags, hl
040605             0978*  ; preserves: a, because why not
040605             0979*  setAllFlags:
040605 21 FF 00 00 0980*      ld hl,255
040609 67          0981*      ld h,a ; four cycles to preserve a is cheap
04060A E5          0982*      push hl
04060B F1          0983*      pop af
04060C C9          0984*      ret
04060D             0985*  
04060D             0986*  ; reset all the bits in the flag register
04060D             0987*  ; unlike its inverse counterpart, this may actually be useful
04060D             0988*  ; inputs; none
04060D             0989*  ; outputs; a=0,f=0
04060D             0990*  ; destroys: flags, hl
04060D             0991*  ; preserves: a, because why not
04060D             0992*  resetAllFlags:
04060D 21 00 00 00 0993*      ld hl,0
040611 67          0994*      ld h,a ; four cycles to preserve a is cheap
040612 E5          0995*      push hl
040613 F1          0996*      pop af
040614 C9          0997*      ret
040615             0998*  
040615             0999*  ; wait until user presses a key
040615             1000*  ; inputs: none
040615             1001*  ; outputs: ascii code of key pressed in a
040615             1002*  ; destroys: af,ix
040615             1003*  waitKeypress:
040615             1004*      MOSCALL mos_getkey
040615 3E 00       0001*M 			LD	A, function
040617 5B CF       0002*M 			RST.LIL	08h
040619 C9          1005*      ret
04061A             1006*  
04061A             1007*  ; print bytes from an address to the screen in hexidecimal format
04061A             1008*  ; inputs: hl = address of first byte to print, a = number of bytes to print
04061A             1009*  ; outputs: values of each byte printed to screen separated by spaces
04061A             1010*  ; destroys: nothing
04061A             1011*  dumpMemoryHex:
04061A             1012*  ; save registers to the stack
04061A C5          1013*      push bc
04061B E5          1014*      push hl
04061C F5          1015*      push af
04061D             1016*  
04061D             1017*  ; print the address and separator
04061D CD 97 00 04 1018*      call printHex24
040621 3E 3A       1019*      ld a,':'
040623 5B D7       1020*      rst.lil 10h
040625 3E 20       1021*      ld a,' '
040627 5B D7       1022*      rst.lil 10h
040629             1023*  
040629             1024*  ; set b to be our loop counter
040629 F1          1025*      pop af
04062A 47          1026*      ld b,a
04062B E1          1027*      pop hl
04062C E5          1028*      push hl
04062D F5          1029*      push af
04062E             1030*  @loop:
04062E             1031*  ; print the byte
04062E 7E          1032*      ld a,(hl)
04062F CD A5 00 04 1033*      call printHex8
040633             1034*  ; print a space
040633 3E 20       1035*      ld a,' '
040635 5B D7       1036*      rst.lil 10h
040637 23          1037*      inc hl
040638 10 F4       1038*      djnz @loop
04063A CD 8C 00 04 1039*      call printNewLine
04063E             1040*  
04063E             1041*  ; restore everything
04063E F1          1042*      pop af
04063F E1          1043*      pop hl
040640 C1          1044*      pop bc
040641             1045*  
040641             1046*  ; all done
040641 C9          1047*      ret
040642             1048*  
040642             1049*  
040642             1050*  ; print bytes from an address to the screen in binary format
040642             1051*  ; inputs: hl = address of first byte to print, a = number of bytes to print
040642             1052*  ; outputs: values of each byte printed to screen separated by spaces
040642             1053*  ; destroys: nothing
040642             1054*  dumpMemoryBin:
040642             1055*  ; save all registers to the stack
040642 F5          1056*      push af
040643 C5          1057*      push bc
040644 D5          1058*      push de
040645 E5          1059*      push hl
040646 DD E5       1060*      push ix
040648 FD E5       1061*      push iy
04064A             1062*  
04064A             1063*  ; set b to be our loop counter
04064A 47          1064*      ld b,a
04064B             1065*  @loop:
04064B             1066*  ; print the byte
04064B 7E          1067*      ld a,(hl)
04064C E5          1068*      push hl
04064D C5          1069*      push bc
04064E CD 15 03 04 1070*      call printBin8
040652 C1          1071*      pop bc
040653             1072*  ; print a space
040653 3E 20       1073*      ld a,' '
040655 5B D7       1074*      rst.lil 10h
040657 E1          1075*      pop hl
040658 23          1076*      inc hl
040659 10 F0       1077*      djnz @loop
04065B CD 8C 00 04 1078*      call printNewLine
04065F             1079*  
04065F             1080*  ; restore everything
04065F FD E1       1081*      pop iy
040661 DD E1       1082*      pop ix
040663 E1          1083*      pop hl
040664 D1          1084*      pop de
040665 C1          1085*      pop bc
040666 F1          1086*      pop af
040667             1087*  ; all done
040667 C9          1088*      ret
040668             1089*  
040668             1090*  ; print bytes from an address to the screen in binary format
040668             1091*  ; with the bits of each byte in reverse order (lsb first)
040668             1092*  ; inputs: hl = address of first byte to print, a = number of bytes to print
040668             1093*  ; outputs: values of each byte printed to screen separated by spaces
040668             1094*  ; destroys: nothing
040668             1095*  dumpMemoryBinRev:
040668             1096*  ; save all registers to the stack
040668 F5          1097*      push af
040669 C5          1098*      push bc
04066A D5          1099*      push de
04066B E5          1100*      push hl
04066C DD E5       1101*      push ix
04066E FD E5       1102*      push iy
040670             1103*  
040670             1104*  ; set b to be our loop counter
040670 47          1105*      ld b,a
040671             1106*  @loop:
040671             1107*  ; print the byte
040671 7E          1108*      ld a,(hl)
040672 E5          1109*      push hl
040673 C5          1110*      push bc
040674 CD 3A 03 04 1111*      call printBin8Rev
040678 C1          1112*      pop bc
040679             1113*  ; print a space
040679 3E 20       1114*      ld a,' '
04067B 5B D7       1115*      rst.lil 10h
04067D E1          1116*      pop hl
04067E 23          1117*      inc hl
04067F 10 F0       1118*      djnz @loop
040681 CD 8C 00 04 1119*      call printNewLine
040685             1120*  
040685             1121*  ; restore everything
040685 FD E1       1122*      pop iy
040687 DD E1       1123*      pop ix
040689 E1          1124*      pop hl
04068A D1          1125*      pop de
04068B C1          1126*      pop bc
04068C F1          1127*      pop af
04068D             1128*  ; all done
04068D C9          1129*      ret
04068E             0031       include "arith24.inc"
04068E             0001*  ;------------------------------------------------------------------------
04068E             0002*  ;  arith24.asm
04068E             0003*  ;  24-bit ez80 arithmetic routines
04068E             0004*  ;  Copyright (c) Shawn Sijnstra 2024
04068E             0005*  ;  MIT license
04068E             0006*  ;
04068E             0007*  ;  This library was created as a tool to help make ez80
04068E             0008*  ;  24-bit native assembly routines for simple mathematical problems
04068E             0009*  ;  more widely available.
04068E             0010*  ;
04068E             0011*  ;------------------------------------------------------------------------
04068E             0012*  
04068E             0013*  ; ;------------------------------------------------------------------------
04068E             0014*  ; ; DEPRECATED BY umul24 in fixed168.inc
04068E             0015*  ; ;------------------------------------------------------------------------
04068E             0016*  ; ; umul24:	HL = HL*DE (unsigned)
04068E             0017*  ; ; Preserves AF, BC, DE
04068E             0018*  ; ; Uses a fast multiply routine.
04068E             0019*  ; ;------------------------------------------------------------------------
04068E             0020*  ; umul24:
04068E             0021*  ; 	push	DE
04068E             0022*  ; 	push	BC
04068E             0023*  ; 	push	AF
04068E             0024*  ; 	push	HL
04068E             0025*  ; 	pop		BC
04068E             0026*  ;     ld	 	a, 24 ; No. of bits to process
04068E             0027*  ;     ld	 	hl, 0 ; Result
04068E             0028*  ; umul24_lp:
04068E             0029*  ; 	add	hl,hl
04068E             0030*  ; 	ex	de,hl
04068E             0031*  ; 	add	hl,hl
04068E             0032*  ; 	ex	de,hl
04068E             0033*  ; 	jr	nc,umul24_nc
04068E             0034*  ; 	add	hl,bc
04068E             0035*  ; umul24_nc:
04068E             0036*  ; 	dec	a
04068E             0037*  ; 	jr	nz,umul24_lp
04068E             0038*  ; 	pop	af
04068E             0039*  ; 	pop	bc
04068E             0040*  ; 	pop	de
04068E             0041*  ; 	ret
04068E             0042*  
04068E             0043*  
04068E             0044*  ;------------------------------------------------------------------------
04068E             0045*  ; udiv24
04068E             0046*  ; Unsigned 24-bit division
04068E             0047*  ; Divides HLU by DEU. Gives result in DEU (and BC), remainder in HLU.
04068E             0048*  ;
04068E             0049*  ; Uses AF BC DE HL
04068E             0050*  ; Uses Restoring Division algorithm
04068E             0051*  ;------------------------------------------------------------------------
04068E             0052*  
04068E             0053*  udiv24:
04068E E5          0054*  	push	hl
04068F C1          0055*  	pop		bc	;move dividend to BCU
040690 21 00 00 00 0056*  	ld		hl,0	;result
040694 A7          0057*  	and		a
040695 ED 52       0058*  	sbc		hl,de	;test for div by 0
040697 C8          0059*  	ret		z		;it's zero, carry flag is clear
040698 19          0060*  	add		hl,de	;HL is 0 again
040699 3E 18       0061*  	ld		a,24	;number of loops through.
04069B             0062*  udiv1:
04069B C5          0063*  	push	bc	;complicated way of doing this because of lack of access to top bits
04069C E3          0064*  	ex		(sp),hl
04069D 37          0065*  	scf
04069E ED 6A       0066*  	adc	hl,hl
0406A0 E3          0067*  	ex	(sp),hl
0406A1 C1          0068*  	pop	bc		;we now have bc = (bc * 2) + 1
0406A2             0069*  
0406A2 ED 6A       0070*  	adc	hl,hl
0406A4 A7          0071*  	and	a		;is this the bug
0406A5 ED 52       0072*  	sbc	hl,de
0406A7 30 02       0073*  	jr	nc,udiv2
0406A9 19          0074*  	add	hl,de
0406AA             0075*  ;	dec	c
0406AA 0B          0076*  	dec	bc
0406AB             0077*  udiv2:
0406AB 3D          0078*  	dec	a
0406AC 20 ED       0079*  	jr	nz,udiv1
0406AE 37          0080*  	scf		;flag used for div0 error
0406AF C5          0081*  	push	bc
0406B0 D1          0082*  	pop		de	;remainder
0406B1 C9          0083*  	ret
0406B2             0084*  
0406B2             0085*  
0406B2             0086*  
0406B2             0087*  ;------------------------------------------------------------------------
0406B2             0088*  ; neg24
0406B2             0089*  ; Returns: HLU = 0-HLU
0406B2             0090*  ; preserves all other registers
0406B2             0091*  ;------------------------------------------------------------------------
0406B2             0092*  neg24:
0406B2 D5          0093*  	push	de
0406B3 EB          0094*  	ex		de,hl
0406B4 21 00 00 00 0095*  	ld		hl,0
0406B8 B7          0096*  	or		a
0406B9 ED 52       0097*  	sbc		hl,de
0406BB D1          0098*  	pop		de
0406BC C9          0099*  	ret
0406BD             0100*  
0406BD             0101*  ;------------------------------------------------------------------------
0406BD             0102*  ; or_hlu_deu: 24 bit bitwise OR
0406BD             0103*  ; Returns: hlu = hlu OR deu
0406BD             0104*  ; preserves all other registers
0406BD             0105*  ;------------------------------------------------------------------------
0406BD             0106*  or_hlu_deu:
0406BD 22 46 07 04 0107*  	ld	(bitbuf1),hl
0406C1 ED 53 49 07 0108*  	ld	(bitbuf2),de
       04          
0406C6 D5          0109*  	push	de	;preserve DEU
0406C7 C5          0110*  	push	bc	;preserve BCU
0406C8 06 03       0111*  	ld		b,3
0406CA 21 46 07 04 0112*  	ld	hl,bitbuf1
0406CE 11 46 07 04 0113*  	ld	de,bitbuf1
0406D2             0114*  orloop_24:
0406D2 1A          0115*  	ld	a,(de)
0406D3 B6          0116*  	or	(hl)
0406D4 12          0117*  	ld	(de),a
0406D5 13          0118*  	inc	de
0406D6 23          0119*  	inc	hl
0406D7 10 F9       0120*  	djnz	orloop_24
0406D9 2A 49 07 04 0121*  	ld	hl,(bitbuf2)
0406DD C1          0122*  	pop		bc	;restore BC
0406DE D1          0123*  	pop		de	;restore DE
0406DF             0124*  
0406DF             0125*  ;------------------------------------------------------------------------
0406DF             0126*  ; and_hlu_deu: 24 bit bitwise AND
0406DF             0127*  ; Returns: hlu = hlu AND deu
0406DF             0128*  ; preserves all other registers
0406DF             0129*  ;------------------------------------------------------------------------
0406DF             0130*  and_hlu_deu:
0406DF 22 46 07 04 0131*  	ld	(bitbuf1),hl
0406E3 ED 53 49 07 0132*  	ld	(bitbuf2),de
       04          
0406E8 D5          0133*  	push	de	;preserve DEU
0406E9 C5          0134*  	push	bc	;preserve BCU
0406EA 06 03       0135*  	ld		b,3
0406EC 21 46 07 04 0136*  	ld	hl,bitbuf1
0406F0 11 46 07 04 0137*  	ld	de,bitbuf1
0406F4             0138*  andloop_24:
0406F4 1A          0139*  	ld	a,(de)
0406F5 A6          0140*  	and	(hl)
0406F6 12          0141*  	ld	(de),a
0406F7 13          0142*  	inc	de
0406F8 23          0143*  	inc	hl
0406F9 10 F9       0144*  	djnz	andloop_24
0406FB 2A 49 07 04 0145*  	ld	hl,(bitbuf2)
0406FF C1          0146*  	pop		bc	;restore BC
040700 D1          0147*  	pop		de	;restore DE
040701             0148*  
040701             0149*  ;------------------------------------------------------------------------
040701             0150*  ; xor_hlu_deu: 24 bit bitwise XOR
040701             0151*  ; Returns: hlu = hlu XOR deu
040701             0152*  ; preserves all other registers
040701             0153*  ;------------------------------------------------------------------------
040701             0154*  xor_hlu_deu:
040701 22 46 07 04 0155*  	ld	(bitbuf1),hl
040705 ED 53 49 07 0156*  	ld	(bitbuf2),de
       04          
04070A D5          0157*  	push	de	;preserve DEU
04070B C5          0158*  	push	bc	;preserve BCU
04070C 06 03       0159*  	ld		b,3
04070E 21 46 07 04 0160*  	ld	hl,bitbuf1
040712 11 46 07 04 0161*  	ld	de,bitbuf1
040716             0162*  xorloop_24:
040716 1A          0163*  	ld	a,(de)
040717 AE          0164*  	xor	(hl)
040718 12          0165*  	ld	(de),a
040719 13          0166*  	inc	de
04071A 23          0167*  	inc	hl
04071B 10 F9       0168*  	djnz	xorloop_24
04071D 2A 49 07 04 0169*  	ld	hl,(bitbuf2)
040721 C1          0170*  	pop		bc	;restore BC
040722 D1          0171*  	pop		de	;restore DE
040723             0172*  
040723             0173*  ;------------------------------------------------------------------------
040723             0174*  ; shl_hlu: 24 bit shift left hlu by a positions
040723             0175*  ; Returns: hlu = hlu << a
040723             0176*  ;		   a = 0
040723             0177*  ; NOTE: only considers a up to 16 bits.
040723             0178*  ; preserves all other registers
040723             0179*  ; modified by Brandon R. Gates to use a instead of de
040723             0180*  ;------------------------------------------------------------------------
040723             0181*  shl_hlu:
040723 B7          0182*  	or a
040724 C8          0183*  	ret		z		;we're done
040725 29          0184*  	add		hl,hl	;shift HLU left
040726 3D          0185*  	dec a
040727 18 FA       0186*  	jr		shl_hlu
040729             0187*  
040729             0188*  ;------------------------------------------------------------------------
040729             0189*  ; shr_hlu: 24 bit shift right hlu by a positions
040729             0190*  ; Returns: hlu = hlu >> a
040729             0191*  ;		   a = 0
040729             0192*  ; NOTE: only considers a up to 16 bits.
040729             0193*  ; preserves all other registers
040729             0194*  ; modified by Brandon R. Gates to use a instead of de
040729             0195*  ;------------------------------------------------------------------------
040729             0196*  shr_hlu:
040729 22 46 07 04 0197*  	ld		(bitbuf1),hl
04072D 21 48 07 04 0198*  	ld		hl,bitbuf1+2
040731             0199*  @shr_loop:
040731 B7          0200*  	or a
040732 28 0D       0201*  	jr		z,@shr_done		;we're done
040734             0202*  ;carry is clear from or instruction
040734 CB 1E       0203*  	rr		(hl)
040736 2B          0204*  	dec		hl
040737 CB 1E       0205*  	rr		(hl)
040739 2B          0206*  	dec		hl
04073A CB 1E       0207*  	rr		(hl)
04073C 23          0208*  	inc		hl
04073D 23          0209*  	inc		hl
04073E 3D          0210*  	dec a
04073F 18 F0       0211*  	jr		@shr_loop
040741             0212*  @shr_done:
040741 2A 46 07 04 0213*  	ld		hl,(bitbuf1)	;collect result
040745 C9          0214*  	ret
040746             0215*  
040746             0216*  ;------------------------------------------------------------------------
040746             0217*  ; Scratch area for calculations
040746             0218*  ;------------------------------------------------------------------------
040746 00 00 00    0219*  bitbuf1:	dw24	0	;bit manipulation buffer 1
040749 00 00 00    0220*  bitbuf2:	dw24	0	;bit manipulation buffer 2
04074C             0221*  
04074C             0222*  ; -----------------------------------------------------------------------
04074C             0223*  ; Functions added by Brandon R. Gates
04074C             0224*  ; -----------------------------------------------------------------------
04074C             0225*  
04074C             0226*  ;------------------------------------------------------------------------
04074C             0227*  ; shr_hlu_div: Quick division by powers of two based on log2 of A
04074C             0228*  ;              Determines the LSB of A and shifts HLU accordingly.
04074C             0229*  ;              HLU = HLU >> LSB(A)
04074C             0230*  ; Returns: HLU = HLU >> LSB(A)
04074C             0231*  ; Destroys: af
04074C             0232*  ;------------------------------------------------------------------------
04074C             0233*  shr_hlu_log2a:
04074C B7          0234*  	or a    ; check for zero
04074D C8          0235*  	ret z   ; nothing to shift so we're done
04074E C5          0236*  	push 	bc ; preserve
04074F 06 00       0237*  	ld		b,0 ; clear b
040751             0238*  @find_bit:
040751 0F          0239*  	rrca ; bit 0 to carry
040752 DA 5B 07 04 0240*  	jp c,@found_bit
040756 04          0241*  	inc b ; next bit
040757 C3 51 07 04 0242*  	jp @find_bit
04075B             0243*  @found_bit:
04075B 78          0244*  	ld a,b
04075C CD 29 07 04 0245*  	call shr_hlu
040760 C1          0246*  	pop 	bc ; restore
040761 C9          0247*  	ret
040762             0248*  ; end shr_hlu_log2a
040762             0032       include "maths.inc"
040762             0001*  ; test the sign of HL
040762             0002*  ; inputs: HL obviously
040762             0003*  ; outputs: sign flag set if HL is negative, zero flag set if HL is zero
040762             0004*  ; destroys: flags
040762             0005*      MACRO sign_hlu
040762             0006*      add hl,de
040762             0007*      or a ; clear flags
040762             0008*      sbc hl,de
040762             0009*      ENDMACRO
040762             0010*  
040762             0011*  
040762             0012*  ;------------------------------------------------------------------------
040762             0013*  ; Scratch area for calculations
040762             0014*  ;------------------------------------------------------------------------
040762 00 00 00    0015*  scratch1: dw24 0 ;bit manipulation buffer 1
040765 00 00 00    0016*  scratch2: dw24 0 ;bit manipulation buffer 2
040768             0017*  
040768             0018*  ; absolute value of hlu
040768             0019*  ; returns: abs(hlu), flags set according to the incoming sign of hlu:
040768             0020*  ;         s1,z0,pv0,n1,c0 if hlu was negative
040768             0021*  ;         s0,z1,pv0,n1,c0 if hlu was zero
040768             0022*  ;         s0,z0,pv0,n1,c0 if hlu was positive
040768             0023*  ; destroys: a
040768             0024*  hlu_abs:
040768 19          0025*      add hl,de
040769 B7          0026*      or a
04076A ED 52       0027*      sbc hl,de
04076C FA 71 07 04 0028*      jp m,@is_neg
040770 C9          0029*      ret ; hlu is positive or zero so we're done
040771             0030*  @is_neg:
040771 F5          0031*      push af ; otherwise, save current flags for return
040772 CD 78 07 04 0032*      call neg_hlu ; negate hlu
040776 F1          0033*      pop af ; get back flags
040777 C9          0034*      ret
040778             0035*  
040778             0036*  ; flip the sign of hlu
040778             0037*  ; inputs: hlu
040778             0038*  ; returns: 0-hlu, flags set appropriately for the result:
040778             0039*  ;         s1,z0,pv0,n1,c1 if result is negative
040778             0040*  ;         s0,z1,pv0,n1,c0 if result is zero
040778             0041*  ;         s0,z0,pv0,n1,c1 if result is positive
040778             0042*  ; destroys a
040778             0043*  neg_hlu:
040778 D5          0044*      push de ; save de
040779 EB          0045*      ex de,hl ; put hl into de
04077A 21 00 00 00 0046*      ld hl,0 ; clear hl
04077E AF          0047*      xor a ; clear carry
04077F ED 52       0048*      sbc hl,de ; 0-hlu = -hlu
040781 D1          0049*      pop de ; get de back
040782 C9          0050*      ret ; easy peasy
040783             0051*  
040783             0052*  ;------------------------------------------------------------------------
040783             0053*  ; divide hlu by 2, inspired by above
040783             0054*  ;------------------------------------------------------------------------
040783             0055*  hlu_div2:
040783 22 62 07 04 0056*      ld (scratch1),hl
040787 21 64 07 04 0057*      ld hl,scratch1+2
04078B CB 1E       0058*      rr (hl)
04078D 2B          0059*      dec hl
04078E CB 1E       0060*      rr (hl)
040790 2B          0061*      dec hl
040791 CB 1E       0062*      rr (hl)
040793 23          0063*      inc hl
040794 23          0064*      inc hl
040795 2A 62 07 04 0065*      ld hl,(scratch1)
040799 C9          0066*      ret
04079A             0067*  
04079A             0068*  ; this is my little hack to divide by 16
04079A             0069*  hlu_div16:
04079A AF          0070*      xor a
04079B 29          0071*      add hl,hl
04079C 17          0072*      rla
04079D 29          0073*      add hl,hl
04079E 17          0074*      rla
04079F 29          0075*      add hl,hl
0407A0 17          0076*      rla
0407A1 29          0077*      add hl,hl
0407A2 17          0078*      rla
0407A3 22 B0 07 04 0079*      ld (@scratch),hl
0407A7 32 B3 07 04 0080*      ld (@scratch+3),a
0407AB 2A B1 07 04 0081*      ld hl,(@scratch+1)
0407AF C9          0082*      ret
0407B0             0083*  @scratch: ds 4
0407B4             0084*  
0407B4             0085*  ; hlu signed division by 256
0407B4             0086*  ; returns: hlu / 256
0407B4             0087*  ; destroys: af
0407B4             0088*  hlu_sdiv256:
0407B4 AF          0089*      xor a ; assume hl is positive
0407B5 22 CB 07 04 0090*      ld (@buffer),hl
0407B9             0091*      sign_hlu
0407B9 19          0001*M     add hl,de
0407BA B7          0002*M     or a ; clear flags
0407BB ED 52       0003*M     sbc hl,de
0407BD F2 C2 07 04 0092*      jp p,@hl_pos
0407C1 3D          0093*      dec a
0407C2             0094*  @hl_pos:
0407C2 32 CE 07 04 0095*      ld (@buffer+3),a
0407C6 2A CC 07 04 0096*      ld hl,(@buffer+1)
0407CA C9          0097*      ret
0407CB             0098*  @buffer: ds 4
0407CF             0099*  
0407CF             0100*  ; hlu 1 byte right shift, unsigned
0407CF             0101*  ; returns: hlu / 256, fractional portion in a
0407CF             0102*  ; destroys: af
0407CF             0103*  hlu_udiv256:
0407CF AF          0104*      xor a
0407D0 32 E1 07 04 0105*      ld (@buffer+3),a
0407D4 7D          0106*      ld a,l ; save the fractional portion
0407D5 22 DE 07 04 0107*      ld (@buffer),hl
0407D9 2A DF 07 04 0108*      ld hl,(@buffer+1)
0407DD C9          0109*      ret
0407DE             0110*  @buffer: ds 4
0407E2             0111*  
0407E2             0112*      MACRO hlu_mul256
0407E2             0113*      add hl,hl ; * 2
0407E2             0114*      add hl,hl ; * 4
0407E2             0115*      add hl,hl ; * 8
0407E2             0116*      add hl,hl ; * 16
0407E2             0117*      add hl,hl ; * 32
0407E2             0118*      add hl,hl ; * 64
0407E2             0119*      add hl,hl ; * 128
0407E2             0120*      add hl,hl ; * 256
0407E2             0121*      ENDMACRO
0407E2             0122*  
0407E2             0123*  ; compute the modulo of hlu by deu
0407E2             0124*  ; outputs: hlu = hlu % deu
0407E2             0125*  ; destroys: f, hl
0407E2             0126*  hlu_mod:
0407E2 B7          0127*      or a ; clear carry
0407E3             0128*  @loop:
0407E3 ED 52       0129*      sbc hl,de
0407E5 DA ED 07 04 0130*      jp c, @end
0407E9 C3 E3 07 04 0131*      jp @loop
0407ED             0132*  @end:
0407ED 19          0133*      add hl,de
0407EE C9          0134*      ret
0407EF             0135*  
0407EF             0136*  
0407EF 00 00 00 00 0137*  add_bcd_arg1: db #00,#00,#00,#00
0407F3 00 00 00 00 0138*  add_bcd_arg2: db #00,#00,#00,#00
0407F7             0139*  
0407F7             0140*  ; set bcd values in a scratch memory address from registers bcde
0407F7             0141*  ; input: hl; scratch address,bcde; 8-place bcd number
0407F7             0142*  ; destroys ; hl
0407F7             0143*  set_bcd:
0407F7 73          0144*      ld (hl),e
0407F8 23          0145*      inc hl
0407F9 72          0146*      ld (hl),d
0407FA 23          0147*      inc hl
0407FB 71          0148*      ld (hl),c
0407FC 23          0149*      inc hl
0407FD 70          0150*      ld (hl),b
0407FE C9          0151*      ret
0407FF             0152*  
0407FF             0153*  ; load bcd values from a scratch memory address to bcde
0407FF             0154*  ; input: hl; scratch address
0407FF             0155*  ; output: bcde; 8-place bcd number
0407FF             0156*  ; destroys: hl
0407FF             0157*  get_bcd:
0407FF 5E          0158*      ld e,(hl)
040800 23          0159*      inc hl
040801 56          0160*      ld d,(hl)
040802 23          0161*      inc hl
040803 4E          0162*      ld c,(hl)
040804 23          0163*      inc hl
040805 46          0164*      ld b,(hl)
040806 C9          0165*      ret
040807             0166*  
040807             0167*  ; BCD addition
040807             0168*  ; inputs: (hl) and (de) point to BCD numbers of equal length (divisible by 2)
040807             0169*  ;       a is the number of bytes holding each number (number of places/2)
040807             0170*  ; outputs: (hl) + (de) --> (hl)
040807             0171*  ; destroys: a,b,de,hl
040807             0172*  add_bcd:
040807 47          0173*      ld b,a ; loop counter
040808 AF          0174*      xor a ; reset a, clear carry flag
040809             0175*  adcec:
040809 1A          0176*      ld a,(de) ; addend to acc
04080A 8E          0177*      adc a,(hl) ; add (hl) to acc
04080B 27          0178*      daa ; adjust result to bcd
04080C 77          0179*      ld (hl),a ; store result
04080D 23          0180*      inc hl ; advance memory pointers
04080E 13          0181*      inc de
04080F 10 F8       0182*      djnz adcec ; loop until b == 0
040811 C9          0183*      ret
040812             0184*  
040812             0185*  ; BCD subtraction
040812             0186*  ; inputs: (hl) and (de) point to BCD numbers of equal length (divisible by 2)
040812             0187*  ;       a is the number of bytes holding each number (number of places/2)
040812             0188*  ; outputs: (hl) - (de) --> (hl)
040812             0189*  ; destroys: a,b,de,hl
040812             0190*  sub_bcd:
040812 47          0191*      ld b,a ; loop counter
040813 AF          0192*      xor a ; reset a,clear carry flag
040814             0193*  subdec:
040814 1A          0194*      ld a,(de) ; subtrahend to acc
040815 9E          0195*      sbc a,(hl) ; subtract (hl) from acc
040816 27          0196*      daa ; adjust result to bcd
040817 77          0197*      ld (hl),a ; store result
040818 23          0198*      inc hl ; advance memory pointers
040819 13          0199*      inc de
04081A 10 F8       0200*      djnz subdec ; loop until b == 0
04081C C9          0201*      ret
04081D             0202*  
04081D             0203*  ; http://www.z80.info/pseudo-random.txt
04081D             0204*  rand_8:
04081D C5          0205*      push bc
04081E 3A 31 08 04 0206*      ld a,(r_seed)
040822 4F          0207*      ld c,a
040823             0208*  
040823 0F          0209*      rrca ; multiply by 32
040824 0F          0210*      rrca
040825 0F          0211*      rrca
040826 EE 1F       0212*      xor 0x1f
040828             0213*  
040828 81          0214*      add a,c
040829 DE FF       0215*      sbc a,255 ; carry
04082B             0216*  
04082B 32 31 08 04 0217*      ld (r_seed),a
04082F C1          0218*      pop bc
040830 C9          0219*      ret
040831 50          0220*  r_seed: defb $50
040832             0221*  
040832             0222*  ; https://www.omnimaga.org/asm-language/ez80-optimized-routines/msg399325/#msg399325
040832             0223*  prng24:
040832             0224*  ;;Expects ADL mode.
040832             0225*  ;;Output: HL
040832             0226*  ;;50cc
040832             0227*  ;;33 bytes
040832             0228*  ;;cycle length: 281,474,959,933,440 (about 2.8 trillion)
040832 ED 5B 53 08 0229*      ld de,(seed1)
       04          
040837 B7          0230*      or a
040838 ED 62       0231*      sbc hl,hl
04083A 19          0232*      add hl,de
04083B 29          0233*      add hl,hl
04083C 29          0234*      add hl,hl
04083D 2C          0235*      inc l
04083E 19          0236*      add hl,de
04083F 22 53 08 04 0237*      ld (seed1),hl
040843 2A 56 08 04 0238*      ld hl,(seed2)
040847 29          0239*      add hl,hl
040848 9F          0240*      sbc a,a
040849 E6 1B       0241*      and %00011011
04084B AD          0242*      xor l
04084C 6F          0243*      ld l,a
04084D 22 56 08 04 0244*      ld (seed2),hl
040851 19          0245*      add hl,de
040852 C9          0246*      ret
040853 00 00 00    0247*  seed1: dl 0
040856 00 00 00    0248*  seed2: dl 0
040859             0033       include "files.inc"
040859             0001*  ; load to onboard 8k sram
040859             0002*  filedata: equ 0xB7E000; Directory object structure (DIR)
040859             0034       include "fixed168.inc"
040859             0001*  ; multiply a signed 24-bit number by an unsigned 8-bit number giving a signed 24-bit result
040859             0002*  ; uses EZ80 MLT instruction for speed
040859             0003*  ; operation: UHL * A --> UHL
040859             0004*  ; destroys: AF, HL
040859             0005*  smul24x8:
040859             0006*  ; make hl positive and store sign flag
040859 CD 68 07 04 0007*      call hlu_abs
04085D F5          0008*      push af
04085E             0009*  ; do the division
04085E CD 69 08 04 0010*      call mul24x8 ; hl = product
040862             0011*  ; adjust sign of result
040862 F1          0012*      pop af ; sign de
040863 F0          0013*      ret p ; hl was positive, nothing to do
040864 CD 78 07 04 0014*      call neg_hlu ; result is negative
040868 C9          0015*      ret
040869             0016*  
040869             0017*  ; unsigned multiplication of a 24-bit and 8-bit number giving a 32-bit result
040869             0018*  ; uses EZ80 MLT instruction for speed
040869             0019*  ; operation: UHL * A --> AUHL
040869             0020*  ; destroys: AF, HL
040869             0021*  mul24x8:
040869 D5          0022*      push de ; preserve de
04086A             0023*  ; low byte
04086A 5D          0024*      ld e,l
04086B 57          0025*      ld d,a
04086C ED 5C       0026*      mlt de
04086E 6B          0027*      ld l,e ; product low byte
04086F 08          0028*      ex af,af' ; save multiplier
040870 7A          0029*      ld a,d ; carry
040871 08          0030*      ex af,af' ; save carry, restore multiplier
040872             0031*  ; high byte
040872 5C          0032*      ld e,h
040873 57          0033*      ld d,a
040874 ED 5C       0034*      mlt de
040876 08          0035*      ex af,af' ; save multiplier, restore carry
040877 83          0036*      add a,e ; add carry
040878 67          0037*      ld h,a ; product middle byte
040879 7A          0038*      ld a,d ; carry
04087A 08          0039*      ex af,af' ; save carry, restore multiplier
04087B             0040*  ; upper byte
04087B 22 96 08 04 0041*      ld (@scratch),hl ; 7 cycles
04087F 5F          0042*      ld e,a
040880 3A 98 08 04 0043*      ld a,(@scratch+2)
040884 57          0044*      ld d,a
040885 ED 5C       0045*      mlt de
040887 08          0046*      ex af,af' ; restore carry
040888 8B          0047*      adc a,e ; add carry
040889 32 98 08 04 0048*      ld (@scratch+2),a ; 5 cycles
04088D 2A 96 08 04 0049*      ld hl,(@scratch) ; 7 cycles
040891             0050*  ; highest byte
040891 3E 00       0051*      ld a,0 ; preserve carry flag
040893 8A          0052*      adc a,d ; product highest byte
040894 D1          0053*      pop de ; restore de
040895 C9          0054*      ret
040896             0055*  @scratch: ds 3
040899             0056*  
040899 00 00 00 00 0057*  mul24out: blkb 6,0
       00 00       
04089F             0058*  
04089F             0059*  ; unsigned multiplication of two 24-bit numbers giving a 48-bit result
04089F             0060*  ; operation: UHL * UDE --> mul24out
04089F             0061*  mul24:
04089F DD E5       0062*      push ix ; preserve
0408A1             0063*  ; point to output buffer and clear it
0408A1 DD 21 99 08 0064*      ld ix,mul24out
       04          
0408A6 C5          0065*      push bc
0408A7 01 00 00 00 0066*      ld bc,0
0408AB DD 0F 00    0067*      ld (ix),bc
0408AE DD 0F 03    0068*      ld (ix+3),bc
0408B1 C1          0069*      pop bc
0408B2             0070*  ; STEP 1: UHL * E
0408B2 7B          0071*      ld a,e
0408B3 E5          0072*      push hl
0408B4 CD 69 08 04 0073*      call mul24x8
0408B8 DD 2F 00    0074*      ld (ix+0),hl
0408BB DD 77 03    0075*      ld (ix+3),a
0408BE             0076*  ; STEP 2: UHL * D
0408BE E1          0077*      pop hl
0408BF E5          0078*      push hl
0408C0 7A          0079*      ld a,d
0408C1 CD 69 08 04 0080*      call mul24x8
0408C5 CD DE 08 04 0081*      call @accumulate
0408C9             0082*  ; STEP 3: UHL * DEU
0408C9 E1          0083*      pop hl
0408CA ED 53 0E 09 0084*      ld (@de),de
       04          
0408CF 3A 10 09 04 0085*      ld a,(@de+2)
0408D3 CD 69 08 04 0086*      call mul24x8
0408D7 CD DE 08 04 0087*      call @accumulate
0408DB             0088*  ; all done
0408DB DD E1       0089*      pop ix ; restore
0408DD C9          0090*      ret
0408DE             0091*  @accumulate:
0408DE DD 23       0092*      inc ix
0408E0             0093*  ; highest byte of product to carry
0408E0 DD 77 03    0094*      ld (ix+3),a
0408E3             0095*  ; low byte of product
0408E3 7D          0096*      ld a,l
0408E4 DD 86 00    0097*      add a,(ix+0)
0408E7 DD 77 00    0098*      ld (ix+0),a
0408EA             0099*  ; high byte of product
0408EA 7C          0100*      ld a,h
0408EB DD 8E 01    0101*      adc a,(ix+1)
0408EE DD 77 01    0102*      ld (ix+1),a
0408F1             0103*  ; uppper byte of product
0408F1 22 0B 09 04 0104*      ld (@hl),hl
0408F5 3A 0D 09 04 0105*      ld a,(@hl+2)
0408F9 DD 8E 02    0106*      adc a,(ix+2)
0408FC DD 77 02    0107*      ld (ix+2),a
0408FF             0108*  ; carry
0408FF 3E 00       0109*      ld a,0 ; preserve flags
040901 DD 8E 03    0110*      adc a,(ix+3)
040904 DD 77 03    0111*      ld (ix+3),a
040907 C9          0112*      ret
040908             0113*  
040908 00 00 00    0114*  @ix: dl 0
04090B 00 00 00    0115*  @hl: dl 0
04090E 00 00 00    0116*  @de: dl 0
040911             0117*  
040911             0118*  ; UHL * UDE --> UHL (unsigned)
040911             0119*  umul24:
040911 CD 9F 08 04 0120*      call mul24
040915 2A 99 08 04 0121*      ld hl,(mul24out)
040919 C9          0122*      ret
04091A             0123*  
04091A             0124*  ; UH.L = UH.L*UD.E (unsigned)
04091A             0125*  umul168:
04091A CD 9F 08 04 0126*      call mul24
04091E 2A 9A 08 04 0127*      ld hl,(mul24out+1)
040922 C9          0128*      ret
040923             0129*  
040923             0130*  ; UH.L * UD.E --> UH.L (signed)
040923             0131*  smul168:
040923             0132*  ; make everything positive and store sign flags
040923 CD 68 07 04 0133*      call hlu_abs
040927 F5          0134*      push af
040928 EB          0135*      ex de,hl
040929 CD 68 07 04 0136*      call hlu_abs
04092D EB          0137*      ex de,hl
04092E F5          0138*      push af
04092F             0139*  ; do the division
04092F CD 1A 09 04 0140*      call umul168 ; hl = product
040933             0141*  ; adjust sign of result
040933 F1          0142*      pop af ; sign de
040934 FA 3F 09 04 0143*      jp m,@de_neg
040938 F1          0144*      pop af ; sign hl
040939 F0          0145*      ret p ; both positive, nothing to do
04093A             0146*  @hl_neg:
04093A CD 78 07 04 0147*      call neg_hlu ; de pos, hl neg, result is negative
04093E C9          0148*      ret
04093F             0149*  @de_neg:
04093F F1          0150*      pop af
040940 F8          0151*      ret m ; both negative, nothing to do
040941 CD 78 07 04 0152*      call neg_hlu ; result is negative
040945 C9          0153*      ret
040946             0154*  
040946             0155*  ; UH.L / UD.E --> UD.E rem UHL (unsigned)
040946             0156*  ; perform unsigned division of 16.8 fixed place values
040946             0157*  ; with an unsigned 16.8 fixed place result and 24-bit remainder
040946             0158*  udiv168:
040946             0159*  ; back up divisor
040946 ED 53 7D 09 0160*      ld (@ude),de
       04          
04094B             0161*  ; get the 16-bit integer part of the quotient
04094B CD 8E 06 04 0162*      call udiv24 ; de = quotient, hl = remainder
04094F             0163*  ; load quotient to upper three bytes of output
04094F ED 53 84 09 0164*      ld (div168_out+1),de
       04          
040954             0165*  @div256:
040954             0166*  ; multiply remainder by 256
040954             0167*      hlu_mul256
040954 29          0001*M     add hl,hl ; * 2
040955 29          0002*M     add hl,hl ; * 4
040956 29          0003*M     add hl,hl ; * 8
040957 29          0004*M     add hl,hl ; * 16
040958 29          0005*M     add hl,hl ; * 32
040959 29          0006*M     add hl,hl ; * 64
04095A 29          0007*M     add hl,hl ; * 128
04095B 29          0008*M     add hl,hl ; * 256
04095C             0168*  ; skip fractional computation if remainder is zero
04095C             0169*      sign_hlu
04095C 19          0001*M     add hl,de
04095D B7          0002*M     or a ; clear flags
04095E ED 52       0003*M     sbc hl,de
040960 20 03       0170*      jr nz,@div_frac
040962 AF          0171*      xor a
040963 18 0A       0172*      jr @write_frac
040965             0173*  ; now divide the shifted remainder by the divisor
040965             0174*  @div_frac:
040965 ED 5B 7D 09 0175*      ld de,(@ude) ; get back divisor
       04          
04096A CD 8E 06 04 0176*      call udiv24 ; de = quotient, hl = remainder
04096E             0177*  ; load low byte of quotient to low byte of output
04096E 7B          0178*      ld a,e
04096F             0179*  @write_frac:
04096F 32 83 09 04 0180*      ld (div168_out),a
040973             0181*  ; load de with return value
040973 ED 5B 83 09 0182*      ld de,(div168_out)
       04          
040978             0183*  ; load a with any overflow
040978 3A 86 09 04 0184*      ld a,(div168_out+3)
04097C C9          0185*      ret ; ud.e is the 16.8 result
04097D             0186*  @ude: ds 6
040983             0187*  div168_out: ds 4 ; the extra byte is for overflow
040987             0188*  
040987             0189*  ; UH.L / UD.E --> UD.E (signed) rem UHL (unsigned)
040987             0190*  ; perform signed division of 16.8 fixed place values
040987             0191*  ; with a signed 16.8 fixed place result and unsigned 24-bit remainder
040987             0192*  sdiv168:
040987             0193*  ; make everything positive and store sign flags
040987 CD 68 07 04 0194*      call hlu_abs
04098B F5          0195*      push af
04098C EB          0196*      ex de,hl
04098D CD 68 07 04 0197*      call hlu_abs
040991 EB          0198*      ex de,hl
040992 F5          0199*      push af
040993             0200*  ; do the division
040993 CD 46 09 04 0201*      call udiv168 ; de = quotient, hl = remainder
040997             0202*  ; adjust sign of result
040997 F1          0203*      pop af ; sign de
040998 FA A5 09 04 0204*      jp m,@de_neg
04099C F1          0205*      pop af ; sign hl
04099D F0          0206*      ret p ; both positive, nothing to do
04099E             0207*  @hl_neg:
04099E EB          0208*      ex de,hl ; hl = quotient, de = remainder
04099F CD 78 07 04 0209*      call neg_hlu ; de pos, hl neg, result is negative
0409A3 EB          0210*      ex de,hl ; de = negated quotient, hl = remainder
0409A4 C9          0211*      ret
0409A5             0212*  @de_neg:
0409A5 F1          0213*      pop af
0409A6 F8          0214*      ret m ; both negative, nothing to do
0409A7 EB          0215*      ex de,hl ; hl = quotient, de = remainder
0409A8 CD 78 07 04 0216*      call neg_hlu ; result is negative
0409AC EB          0217*      ex de,hl ; de = negated quotient, hl = remainder
0409AD C9          0218*      ret
0409AE             0219*  
0409AE             0220*  ; convert signed angles from a 360 to 256 degree circle
0409AE             0221*  ; inputs: uh.l is the angle360 in 16.8 fixed format
0409AE             0222*  ; outputs: uh.l is the angle256 in 16.8 fixed format
0409AE             0223*  ; destroys: TODO
0409AE             0224*  deg_360_to_256:
0409AE D5          0225*      push de ; preserve de
0409AF             0226*  ; make angle positive and store sign flag
0409AF CD 68 07 04 0227*      call hlu_abs
0409B3 F5          0228*      push af
0409B4             0229*  ; multiply by coversion factor of 256/360
0409B4 11 B6 00 00 0230*      ld de,0x0000B6 ; 0.711
0409B8 CD 1A 09 04 0231*      call umul168 ; uh.l = uh.l * 0.711
0409BC             0232*  ; restore sign flag and adjust output accordingly
0409BC F1          0233*      pop af
0409BD F2 C5 09 04 0234*      jp p,@pos ; positive number
0409C1 CD 78 07 04 0235*      call neg_hlu
0409C5             0236*  @pos:
0409C5             0237*  ; restore de and return uh.l as the result
0409C5 D1          0238*      pop de
0409C6 C9          0239*      ret
0409C7             0240*  
0409C7             0241*  ; convert signed angles from a 256 to 360 degree circle
0409C7             0242*  ; inputs: uh.l is the angle256 in 16.8 fixed format
0409C7             0243*  ; outputs: uh.l is the angle360 in 16.8 fixed format
0409C7             0244*  ; destroys: TODO
0409C7             0245*  deg_256_to_360:
0409C7 D5          0246*      push de ; preserve de
0409C8             0247*  ; make angle positive and store sign flag
0409C8 CD 68 07 04 0248*      call hlu_abs
0409CC F5          0249*      push af
0409CD             0250*  ; multiply by coversion factor of 360/256
0409CD 11 68 01 00 0251*      ld de,0x000168 ; 1.406
0409D1 CD 1A 09 04 0252*      call umul168 ; uh.l = uh.l * 1.406
0409D5             0253*  ; restore sign flag and adjust output accordingly
0409D5 F1          0254*      pop af
0409D6 F2 DE 09 04 0255*      jp p,@pos ; positive number
0409DA CD 78 07 04 0256*      call neg_hlu
0409DE             0257*  @pos:
0409DE             0258*  ; restore de and return uh.l as the result
0409DE D1          0259*      pop de
0409DF C9          0260*      ret
0409E0             0261*  
0409E0             0262*  ; fixed 16.8 routine
0409E0             0263*  ; cos(uh.l) --> uh.l
0409E0             0264*  ; destroys: f, hl
0409E0             0265*  cos168:
0409E0 D5          0266*      push de ; preserve de
0409E1             0267*  ; for cos we simply increment the angle by 90 degrees
0409E1             0268*  ; or 0x004000 in 16.8 degrees256
0409E1             0269*  ; which makes it a sin problem
0409E1 11 00 40 00 0270*      ld de,0x004000
0409E5 19          0271*      add hl,de ; modulo 256 happens below
0409E6 D1          0272*      pop de ; restore de
0409E7             0273*  ; fall through to sin168
0409E7             0274*  
0409E7             0275*  ; ---------------------
0409E7             0276*  ; fixed 16.8 routine
0409E7             0277*  ; sin(uh.l) --> uh.l
0409E7             0278*  ; destroys: f, hl
0409E7             0279*  sin168:
0409E7 D5          0280*      push de
0409E8             0281*  ; handle negative angles appropriately
0409E8 CD 68 07 04 0282*      call hlu_abs
0409EC F2 F5 09 04 0283*      jp p,@F
0409F0 11 00 00 FF 0284*      ld de,-256*256
0409F4 19          0285*      add hl,de
0409F5             0286*  @@:
0409F5 2E 03       0287*      ld l,3 ; multiply by 3 to get our lookup index
0409F7 ED 6C       0288*      mlt hl
0409F9 11 44 0C 04 0289*      ld de,sin_lut_168 ; grab the lut address
0409FD 19          0290*      add hl,de ; bump hl by the index
0409FE ED 27       0291*      ld hl,(hl) ; don't try this on a z80!
040A00 D1          0292*      pop de
040A01 C9          0293*      ret
040A02             0294*  
040A02             0295*  ; 16.8 fixed inputs / outputs
040A02             0296*  ; takes: uh.l as angle in degrees 256
040A02             0297*  ;        ud.e as radius
040A02             0298*  ; returns ub.c as dx, ud.e as dy, uh.l as radius
040A02             0299*  ;        displacements from origin (0,0)
040A02             0300*  ; destroys: everything except indexes
040A02             0301*  polar_to_cartesian:
040A02             0302*  ; back up input parameters
040A02 22 31 0A 04 0303*      ld (@angle), hl
040A06 ED 53 34 0A 0304*      ld (@radius), de
       04          
040A0B             0305*  ; compute dx = sin(uh.l) * ud.e
040A0B CD E7 09 04 0306*      call sin168 ; uh.l = sin(uh.l)
040A0F ED 5B 34 0A 0307*      ld de,(@radius)
       04          
040A14 CD 23 09 04 0308*      call smul168 ; uh.l = dx
040A18 E5          0309*      push hl
040A19             0310*  ; compute dy = -cos(uh.l) * ud.e
040A19 2A 31 0A 04 0311*      ld hl,(@angle)
040A1D CD E0 09 04 0312*      call cos168 ; uh.l = cos(uh.l)
040A21 ED 5B 34 0A 0313*      ld de,(@radius)
       04          
040A26 CD 23 09 04 0314*      call smul168 ; uh.l = dy
040A2A CD 78 07 04 0315*      call neg_hlu ; invert dy for screen coords convention
040A2E EB          0316*      ex de,hl ; de = dy for output
040A2F C1          0317*      pop bc ; bc = dx for output
040A30             0318*  ; and out
040A30 C9          0319*      ret
040A31             0320*  @angle: ds 3
040A34             0321*  @radius: ds 3
040A37             0322*  
040A37             0323*  ; inputs: ub.c and ud.e are x0 and y0 in 16.8 fixed format
040A37             0324*  ;         ui.x and ui.y are x1 and y1 in 16.8 fixed format
040A37             0325*  ; output: ub.c and ud.e are dx and dy in 16.8 fixed format
040A37             0326*  ;         also populates scratch locations dx168 and dy168
040A37             0327*  ; destroys: a,hl,bc,de
040A37             0328*  dxy168:
040A37             0329*  ; compute dx = x1-x0
040A37 AF          0330*      xor a ; clear carry
040A38 DD E5       0331*      push ix ; move ix to hl via the stack
040A3A E1          0332*      pop hl ; hl = x1
040A3B ED 42       0333*      sbc hl,bc ; hl = dx
040A3D 22 52 0A 04 0334*      ld (dx168),hl ; dx to scratch
040A41             0335*  ; compute dy = y1-y0
040A41 AF          0336*      xor a ; clear carry
040A42 FD E5       0337*      push iy ; move iy to hl via the stack
040A44 E1          0338*      pop hl ; hl = y1
040A45 ED 52       0339*      sbc hl,de ; hl = dy
040A47 22 58 0A 04 0340*      ld (dy168),hl ; dy to scratch
040A4B             0341*  ; populate output registers and return
040A4B EB          0342*      ex de,hl ; ud.e = dy
040A4C ED 4B 52 0A 0343*      ld bc,(dx168) ; ub.c = dx
       04          
040A51 C9          0344*      ret
040A52 00 00 00 00 0345*  dx168: blkb 6,0
       00 00       
040A58 00 00 00 00 0346*  dy168: blkb 6,0
       00 00       
040A5E             0347*  
040A5E             0348*  ; compute the euclidian distance between two cartesian coordinates
040A5E             0349*  ; using the formula d = sqrt(dx^2+dy^2)
040A5E             0350*  ; inputs: dx168 and dy168 are dx and dy in 16.8 fixed format
040A5E             0351*  ; output; uh.l is the 16.8 fixed format distance
040A5E             0352*  ;         also populates scratch locations dx168 and dy168
040A5E             0353*  ; destroys: a,hl,bc,de
040A5E             0354*  ; NOTE: rounds both deltas down to the nearest integer to avoid overflow when squaring,
040A5E             0355*  ;       thus the result will always be an integer, albeit in 16.8 format
040A5E             0356*  distance168:
040A5E             0357*  ; compute dy^2
040A5E 2A 58 0A 04 0358*      ld hl,(dy168)
040A62 CD 68 07 04 0359*      call hlu_abs
040A66 CD CF 07 04 0360*      call hlu_udiv256 ; make integer to avoid overflow
040A6A E5          0361*      push hl
040A6B D1          0362*      pop de
040A6C CD 11 09 04 0363*      call umul24 ; hl = dy^2
040A70 E5          0364*      push hl ; save dy^2
040A71             0365*  ; compute dx^2
040A71 2A 52 0A 04 0366*      ld hl,(dx168)
040A75 CD 68 07 04 0367*      call hlu_abs
040A79 CD CF 07 04 0368*      call hlu_udiv256 ; make integer to avoid overflow
040A7D E5          0369*      push hl
040A7E D1          0370*      pop de
040A7F CD 11 09 04 0371*      call umul24 ; hl = dx^2
040A83             0372*  ; add dx^2 and dy^2
040A83 D1          0373*      pop de ; de = dy^2 (was hl)
040A84 19          0374*      add hl,de ; hl = dx^2 + dy^2
040A85             0375*  ; compute the square root
040A85 CD 5E 0B 04 0376*      call sqrt24 ; de = sqrt(dx^2 + dy^2)
040A89 EB          0377*      ex de,hl ; hl = distance
040A8A             0378*      hlu_mul256 ; convert back to 16.8 fixed
040A8A 29          0001*M     add hl,hl ; * 2
040A8B 29          0002*M     add hl,hl ; * 4
040A8C 29          0003*M     add hl,hl ; * 8
040A8D 29          0004*M     add hl,hl ; * 16
040A8E 29          0005*M     add hl,hl ; * 32
040A8F 29          0006*M     add hl,hl ; * 64
040A90 29          0007*M     add hl,hl ; * 128
040A91 29          0008*M     add hl,hl ; * 256
040A92 C9          0379*      ret
040A93             0380*  
040A93             0381*  ; atan2_(ub.c,ud.e) --> uh.l
040A93             0382*  ; inputs: ub.c and ud.e are dx and dy in 16.8 fixed format
040A93             0383*  ;   whether inputs are integers or fractional doesn't matter
040A93             0384*  ;   so long as the sign bit of the upper byte is correct
040A93             0385*  ; output: uh.l is the 16.8 fixed angle in degrees 256
040A93             0386*  ; angles are COMPASS HEADINGS based on
040A93             0387*  ; screen coordinate conventions,where the y axis is flipped
040A93             0388*  ; #E0 224      0       32 #20
040A93             0389*  ;        -x,-y | +x,-y
040A93             0390*  ; #C0 192------+------ 64 #40
040A93             0391*  ;        -x,+y | +x,+y
040A93             0392*  ; #A0 160   128 #80   96 #60
040A93             0393*  atan2_168fast:
040A93             0394*  ; get signs and make everything positive
040A93             0395*  ; get abs(x) and store its original sign
040A93 C5          0396*      push bc
040A94 E1          0397*      pop hl
040A95 CD 68 07 04 0398*      call hlu_abs ; if x was negative this also sets the sign flag
040A99 E5          0399*      push hl ; store abs(x)
040A9A C1          0400*      pop bc ; bc = abs(x)
040A9B F5          0401*      push af ; store sign of x
040A9C             0402*  ; get abs(y) and store its original sign
040A9C EB          0403*      ex de,hl ; hl = y
040A9D CD 68 07 04 0404*      call hlu_abs ; if y was negative this also sets the sign flag
040AA1 EB          0405*      ex de,hl ; de = abs(y)
040AA2 F5          0406*      push af ; store sign of y
040AA3             0407*  ; if abs(bc) < abs(de),then we do bc/de,otherwise de/bc
040AA3             0408*  ; this ensures that our lookup value is between 0 and 1 inclusive
040AA3 AF          0409*      xor a ; clear the carry flag
040AA4 D5          0410*      push de
040AA5 E1          0411*      pop hl
040AA6 ED 42       0412*      sbc hl,bc
040AA8 F5          0413*      push af ; save sign of de - bc
040AA9 F2 B2 0A 04 0414*      jp p,@1 ; bc <= de, so we skip ahead
040AAD             0415*  ; otherwise we swap bc and de
040AAD C5          0416*      push bc
040AAE E1          0417*      pop hl
040AAF EB          0418*      ex de,hl
040AB0 E5          0419*      push hl
040AB1 C1          0420*      pop bc
040AB2             0421*  @1:
040AB2             0422*  ; now we're ready to snag our preliminary result
040AB2 C5          0423*      push bc
040AB3 E1          0424*      pop hl
040AB4 CD 22 0B 04 0425*      call atan_168fast ; uh.l comes back with prelim result
040AB8             0426*  ; now we adjust uh.l based on sign of de - bc
040AB8 F1          0427*      pop af
040AB9 F2 C5 0A 04 0428*      jp p,@2 ; bc <= de,so we skip ahead
040ABD EB          0429*      ex de,hl
040ABE 21 00 40 00 0430*      ld hl,64*256 ; subtract from 64 (90) degrees
040AC2 AF          0431*      xor a ; clear the carry flag
040AC3 ED 52       0432*      sbc hl,de
040AC5             0433*  @2:
040AC5             0434*  ; adjust the result based on quadrant
040AC5             0435*  ; #E0 224      0       32 #20
040AC5             0436*  ;        -x,-y | +x,-y
040AC5             0437*  ; #C0 192------+------ 64 #40
040AC5             0438*  ;        -x,+y | +x,+y
040AC5             0439*  ; #A0 160   128 #80   96 #60
040AC5 F1          0440*      pop af ; sign of y
040AC6 CA 03 0B 04 0441*      jp z,@y_zero
040ACA F2 E3 0A 04 0442*      jp p,@y_pos
040ACE             0443*  ; y neg,check x
040ACE F1          0444*      pop af ; sign of x
040ACF CA DD 0A 04 0445*      jp z,@y_neg_x_zero
040AD3 F2 E2 0A 04 0446*      jp p,@y_neg_x_pos
040AD7             0447*  ; y neg,x neg
040AD7             0448*  ; angle is 128 to 256 (270 to 360)
040AD7             0449*  ; negating the intermediate does the trick
040AD7 CD 78 07 04 0450*      call neg_hlu
040ADB 18 31       0451*      jr @zero_hlu
040ADD             0452*  
040ADD             0453*  @y_neg_x_zero:
040ADD             0454*  ; y neg,x zero
040ADD             0455*  ; angle is 0
040ADD 21 00 00 00 0456*      ld hl,0
040AE1 C9          0457*      ret
040AE2             0458*  @y_neg_x_pos:
040AE2             0459*  ; y neg,x pos
040AE2             0460*  ; angle is 0 to 64 (0 to 90)
040AE2             0461*  ; so we're good
040AE2 C9          0462*      ret
040AE3             0463*  
040AE3             0464*  @y_pos:
040AE3 F1          0465*      pop af ; sign of x
040AE4 CA F3 0A 04 0466*      jp z,@y_pos_x_zero
040AE8 F2 F8 0A 04 0467*      jp p,@y_pos_x_pos
040AEC             0468*  ; y pos,x neg
040AEC             0469*  ; angle is 128 to 192 (180-270)
040AEC             0470*  ; so we add 128 to intermediate
040AEC 11 00 80 00 0471*      ld de,128*256
040AF0 19          0472*      add hl,de
040AF1 18 1B       0473*      jr @zero_hlu
040AF3             0474*  @y_pos_x_zero:
040AF3             0475*  ; y pos,x zero
040AF3             0476*  ; angle is 128 (180)
040AF3 21 00 80 00 0477*      ld hl,128*256
040AF7 C9          0478*      ret
040AF8             0479*  @y_pos_x_pos:
040AF8             0480*  ; y pos,x pos
040AF8             0481*  ; angle is 64 to 128 (90 to 180)
040AF8             0482*  ; neg the intermediate and add 180 degrees
040AF8 CD 78 07 04 0483*      call neg_hlu
040AFC 11 00 80 00 0484*      ld de,128*256
040B00 19          0485*      add hl,de
040B01 18 0B       0486*      jr @zero_hlu
040B03             0487*  
040B03             0488*  @y_zero:
040B03 F1          0489*      pop af ; sign of x
040B04 FA 09 0B 04 0490*      jp m,@y_zero_x_neg
040B08             0491*  ; y zero,x pos
040B08             0492*  ; angle is 64 (90),nothing to do
040B08 C9          0493*      ret
040B09             0494*  @y_zero_x_neg:
040B09             0495*  ; y zero ,x neg
040B09             0496*  ; angle is 192 (270)
040B09 21 00 C0 00 0497*      ld hl,192*256
040B0D C9          0498*      ret
040B0E             0499*  @zero_hlu:
040B0E AF          0500*      xor a
040B0F 22 1C 0B 04 0501*      ld (@scratch),hl
040B13 32 1E 0B 04 0502*      ld (@scratch+2),a
040B17 2A 1C 0B 04 0503*      ld hl,(@scratch)
040B1B C9          0504*      ret
040B1C             0505*  @scratch: ds 6
040B22             0506*  
040B22             0507*  ; inputs: ub.c and ud.e are dx and dy in 16.8 fixed format
040B22             0508*  ; output: uh.l is the 16.8 fixed format angle in degrees 256
040B22             0509*  ; destroys: a,hl,bc,de
040B22             0510*  ; note: only works for angles from 0 to 32 (45) degrees
040B22             0511*  ;   use atan2_168fast (which calls this proc) to handle the full 256 (360) degrees
040B22             0512*  atan_168fast:
040B22             0513*  ; because we use compass headings instead of geometric angles
040B22             0514*  ; we compute dx/dy which is 1/tan(theta) in the maths world
040B22             0515*  ; we can do faster unsigned division here because we know dx and dy are positive
040B22 CD 46 09 04 0516*      call udiv168 ; ud.e = dx/dy
040B26 EB          0517*      ex de,hl ; uh.l = dx/dy
040B27             0518*  ; test uh.l for 0
040B27 19          0519*      add hl,de
040B28 B7          0520*      or a
040B29 ED 52       0521*      sbc hl,de
040B2B 28 22       0522*      jr z,@is_zero
040B2D             0523*  ; test uh.l for 1
040B2D AF          0524*      xor a ; clear carry
040B2E EB          0525*      ex de,hl
040B2F 21 00 01 00 0526*      ld hl,1*256 ; 1 in 16.8 fixed format
040B33 ED 52       0527*      sbc hl,de
040B35 28 13       0528*      jr z,@is_45
040B37 EB          0529*      ex de,hl
040B38             0530*  ; no special cases so we move on
040B38             0531*  ; l contains the fractional portion of tan(uh.l)
040B38             0532*  ; we multiply it by three to get our lookup table index
040B38 26 03       0533*      ld h,3
040B3A ED 6C       0534*      mlt hl ; index into lut
040B3C 11 00 00 00 0535*      ld de,0 ; clear deu
040B40 54          0536*      ld d,h ; copy hl to de
040B41 5D          0537*      ld e,l ; de contains our index
040B42 21 47 0F 04 0538*      ld hl,atan_lut_168 ; grab the lut address
040B46 19          0539*      add hl,de ; bump hl by the index
040B47 ED 27       0540*      ld hl,(hl) ; don't try this on a z80!
040B49 C9          0541*      ret ; and out
040B4A             0542*  @is_45:
040B4A 21 00 40 00 0543*      ld hl,64*256
040B4E C9          0544*      ret
040B4F             0545*  ; for the case tan(0)
040B4F             0546*  @is_zero:
040B4F 21 00 00 00 0547*      ld hl,0*256
040B53 C9          0548*      ret
040B54             0549*  
040B54             0550*  ; Expects  ADL mode
040B54             0551*  ; Inputs:  UH.L
040B54             0552*  ; Outputs: UH.L is the 16.8 square root
040B54             0553*  ;          UDE is the integer difference inputHL-DE^2
040B54             0554*  sqrt168:
040B54 CD 5E 0B 04 0555*      call sqrt24
040B58 EB          0556*      ex de,hl
040B59 29          0557*      add hl,hl
040B5A 29          0558*      add hl,hl
040B5B 29          0559*      add hl,hl
040B5C 29          0560*      add hl,hl
040B5D C9          0561*      ret
040B5E             0562*  
040B5E             0563*  ; credit: xeda112358
040B5E             0564*  ; https://www.cemetech.net/forum/viewtopic.php?t=11178&postdays=0&postorder=asc&start=0
040B5E             0565*  sqrt24:
040B5E             0566*  ; Expects ADL mode
040B5E             0567*  ; Inputs: HL
040B5E             0568*  ; Outputs: DE is the integer square root
040B5E             0569*  ;  HL is the difference inputHL-DE^2
040B5E             0570*  ;  c flag reset
040B5E 01 00 00 00 0571*      ld bc,0 ; clear bcu
040B62 11 00 00 00 0572*      ld de,0 ; clear deu
040B66 AF          0573*      xor a
040B67 45          0574*      ld b,l
040B68 C5          0575*      push bc
040B69 47          0576*      ld b,a
040B6A 6F          0577*      ld l,a
040B6B             0578*  ; Iteration 1
040B6B 29          0579*      add hl,hl
040B6C CB 11       0580*      rl c
040B6E 29          0581*      add hl,hl
040B6F CB 11       0582*      rl c
040B71 91          0583*      sub c
040B72 30 04       0584*      jr nc,$+6
040B74 1C          0585*      inc e
040B75 1C          0586*      inc e
040B76 2F          0587*      cpl
040B77 4F          0588*      ld c,a
040B78             0589*  ; Iteration 2
040B78 29          0590*      add hl,hl
040B79 CB 11       0591*      rl c
040B7B 29          0592*      add hl,hl
040B7C CB 11       0593*      rl c
040B7E CB 13       0594*      rl e
040B80 7B          0595*      ld a,e
040B81 91          0596*      sub c
040B82 30 04       0597*      jr nc,$+6
040B84 1C          0598*      inc e
040B85 1C          0599*      inc e
040B86 2F          0600*      cpl
040B87 4F          0601*      ld c,a
040B88             0602*  ; Iteration 3
040B88 29          0603*      add hl,hl
040B89 CB 11       0604*      rl c
040B8B 29          0605*      add hl,hl
040B8C CB 11       0606*      rl c
040B8E CB 13       0607*      rl e
040B90 7B          0608*      ld a,e
040B91 91          0609*      sub c
040B92 30 04       0610*      jr nc,$+6
040B94 1C          0611*      inc e
040B95 1C          0612*      inc e
040B96 2F          0613*      cpl
040B97 4F          0614*      ld c,a
040B98             0615*  ; Iteration 4
040B98 29          0616*      add hl,hl
040B99 CB 11       0617*      rl c
040B9B 29          0618*      add hl,hl
040B9C CB 11       0619*      rl c
040B9E CB 13       0620*      rl e
040BA0 7B          0621*      ld a,e
040BA1 91          0622*      sub c
040BA2 30 04       0623*      jr nc,$+6
040BA4 1C          0624*      inc e
040BA5 1C          0625*      inc e
040BA6 2F          0626*      cpl
040BA7 4F          0627*      ld c,a
040BA8             0628*  ; Iteration 5
040BA8 29          0629*      add hl,hl
040BA9 CB 11       0630*      rl c
040BAB 29          0631*      add hl,hl
040BAC CB 11       0632*      rl c
040BAE CB 13       0633*      rl e
040BB0 7B          0634*      ld a,e
040BB1 91          0635*      sub c
040BB2 30 04       0636*      jr nc,$+6
040BB4 1C          0637*      inc e
040BB5 1C          0638*      inc e
040BB6 2F          0639*      cpl
040BB7 4F          0640*      ld c,a
040BB8             0641*  ; Iteration 6
040BB8 29          0642*      add hl,hl
040BB9 CB 11       0643*      rl c
040BBB 29          0644*      add hl,hl
040BBC CB 11       0645*      rl c
040BBE CB 13       0646*      rl e
040BC0 7B          0647*      ld a,e
040BC1 91          0648*      sub c
040BC2 30 04       0649*      jr nc,$+6
040BC4 1C          0650*      inc e
040BC5 1C          0651*      inc e
040BC6 2F          0652*      cpl
040BC7 4F          0653*      ld c,a
040BC8             0654*  ; Iteration 7
040BC8 29          0655*      add hl,hl
040BC9 CB 11       0656*      rl c
040BCB 29          0657*      add hl,hl
040BCC CB 11       0658*      rl c
040BCE CB 10       0659*      rl b
040BD0 EB          0660*      ex de,hl
040BD1 29          0661*      add hl,hl
040BD2 E5          0662*      push hl
040BD3 ED 42       0663*      sbc hl,bc
040BD5 30 06       0664*      jr nc,$+8
040BD7 7C          0665*      ld a,h
040BD8 2F          0666*      cpl
040BD9 47          0667*      ld b,a
040BDA 7D          0668*      ld a,l
040BDB 2F          0669*      cpl
040BDC 4F          0670*      ld c,a
040BDD E1          0671*      pop hl
040BDE 30 02       0672*      jr nc,$+4
040BE0 23          0673*      inc hl
040BE1 23          0674*      inc hl
040BE2 EB          0675*      ex de,hl
040BE3             0676*  ; Iteration 8
040BE3 29          0677*      add hl,hl
040BE4 69          0678*      ld l,c
040BE5 60          0679*      ld h,b
040BE6 ED 6A       0680*      adc hl,hl
040BE8 ED 6A       0681*      adc hl,hl
040BEA EB          0682*      ex de,hl
040BEB 29          0683*      add hl,hl
040BEC ED 52       0684*      sbc hl,de
040BEE 19          0685*      add hl,de
040BEF EB          0686*      ex de,hl
040BF0 30 04       0687*      jr nc,$+6
040BF2 ED 52       0688*      sbc hl,de
040BF4 13          0689*      inc de
040BF5 13          0690*      inc de
040BF6             0691*  ; Iteration 9
040BF6 F1          0692*      pop af
040BF7 17          0693*      rla
040BF8 ED 6A       0694*      adc hl,hl
040BFA 17          0695*      rla
040BFB ED 6A       0696*      adc hl,hl
040BFD EB          0697*      ex de,hl
040BFE 29          0698*      add hl,hl
040BFF ED 52       0699*      sbc hl,de
040C01 19          0700*      add hl,de
040C02 EB          0701*      ex de,hl
040C03 30 04       0702*      jr nc,$+6
040C05 ED 52       0703*      sbc hl,de
040C07 13          0704*      inc de
040C08 13          0705*      inc de
040C09             0706*  ; Iteration 10
040C09 17          0707*      rla
040C0A ED 6A       0708*      adc hl,hl
040C0C 17          0709*      rla
040C0D ED 6A       0710*      adc hl,hl
040C0F EB          0711*      ex de,hl
040C10 29          0712*      add hl,hl
040C11 ED 52       0713*      sbc hl,de
040C13 19          0714*      add hl,de
040C14 EB          0715*      ex de,hl
040C15 30 04       0716*      jr nc,$+6
040C17 ED 52       0717*      sbc hl,de
040C19 13          0718*      inc de
040C1A 13          0719*      inc de
040C1B             0720*  ; Iteration 11
040C1B 17          0721*      rla
040C1C ED 6A       0722*      adc hl,hl
040C1E 17          0723*      rla
040C1F ED 6A       0724*      adc hl,hl
040C21 EB          0725*      ex de,hl
040C22 29          0726*      add hl,hl
040C23 ED 52       0727*      sbc hl,de
040C25 19          0728*      add hl,de
040C26 EB          0729*      ex de,hl
040C27 30 04       0730*      jr nc,$+6
040C29 ED 52       0731*      sbc hl,de
040C2B 13          0732*      inc de
040C2C 13          0733*      inc de
040C2D             0734*  ; Iteration 12
040C2D 17          0735*      rla
040C2E ED 6A       0736*      adc hl,hl
040C30 17          0737*      rla
040C31 ED 6A       0738*      adc hl,hl
040C33 EB          0739*      ex de,hl
040C34 29          0740*      add hl,hl
040C35 ED 52       0741*      sbc hl,de
040C37 19          0742*      add hl,de
040C38 EB          0743*      ex de,hl
040C39 30 04       0744*      jr nc,$+6
040C3B ED 52       0745*      sbc hl,de
040C3D 13          0746*      inc de
040C3E 13          0747*      inc de
040C3F CB 1A       0748*      rr d
040C41 CB 1B       0749*      rr e
040C43 C9          0750*      ret
040C44             0751*  
040C44             0752*  sin_lut_168:
040C44 00 00 00    0753*      dl 0x000000 ; 0.000 00, 0.000
040C47 06 00 00    0754*      dl 0x000006 ; 1.406 01, 0.025
040C4A 0C 00 00    0755*      dl 0x00000C ; 2.813 02, 0.049
040C4D 12 00 00    0756*      dl 0x000012 ; 4.219 03, 0.074
040C50 19 00 00    0757*      dl 0x000019 ; 5.625 04, 0.098
040C53 1F 00 00    0758*      dl 0x00001F ; 7.031 05, 0.122
040C56 25 00 00    0759*      dl 0x000025 ; 8.438 06, 0.147
040C59 2B 00 00    0760*      dl 0x00002B ; 9.844 07, 0.171
040C5C 31 00 00    0761*      dl 0x000031 ; 11.250 08, 0.195
040C5F 38 00 00    0762*      dl 0x000038 ; 12.656 09, 0.219
040C62 3E 00 00    0763*      dl 0x00003E ; 14.063 0A, 0.243
040C65 44 00 00    0764*      dl 0x000044 ; 15.469 0B, 0.267
040C68 4A 00 00    0765*      dl 0x00004A ; 16.875 0C, 0.290
040C6B 50 00 00    0766*      dl 0x000050 ; 18.281 0D, 0.314
040C6E 56 00 00    0767*      dl 0x000056 ; 19.688 0E, 0.337
040C71 5C 00 00    0768*      dl 0x00005C ; 21.094 0F, 0.360
040C74 61 00 00    0769*      dl 0x000061 ; 22.500 10, 0.383
040C77 67 00 00    0770*      dl 0x000067 ; 23.906 11, 0.405
040C7A 6D 00 00    0771*      dl 0x00006D ; 25.313 12, 0.428
040C7D 73 00 00    0772*      dl 0x000073 ; 26.719 13, 0.450
040C80 78 00 00    0773*      dl 0x000078 ; 28.125 14, 0.471
040C83 7E 00 00    0774*      dl 0x00007E ; 29.531 15, 0.493
040C86 83 00 00    0775*      dl 0x000083 ; 30.938 16, 0.514
040C89 88 00 00    0776*      dl 0x000088 ; 32.344 17, 0.535
040C8C 8E 00 00    0777*      dl 0x00008E ; 33.750 18, 0.556
040C8F 93 00 00    0778*      dl 0x000093 ; 35.156 19, 0.576
040C92 98 00 00    0779*      dl 0x000098 ; 36.563 1A, 0.596
040C95 9D 00 00    0780*      dl 0x00009D ; 37.969 1B, 0.615
040C98 A2 00 00    0781*      dl 0x0000A2 ; 39.375 1C, 0.634
040C9B A7 00 00    0782*      dl 0x0000A7 ; 40.781 1D, 0.653
040C9E AB 00 00    0783*      dl 0x0000AB ; 42.188 1E, 0.672
040CA1 B0 00 00    0784*      dl 0x0000B0 ; 43.594 1F, 0.690
040CA4 B5 00 00    0785*      dl 0x0000B5 ; 45.000 20, 0.707
040CA7 B9 00 00    0786*      dl 0x0000B9 ; 46.406 21, 0.724
040CAA BD 00 00    0787*      dl 0x0000BD ; 47.813 22, 0.741
040CAD C1 00 00    0788*      dl 0x0000C1 ; 49.219 23, 0.757
040CB0 C5 00 00    0789*      dl 0x0000C5 ; 50.625 24, 0.773
040CB3 C9 00 00    0790*      dl 0x0000C9 ; 52.031 25, 0.788
040CB6 CD 00 00    0791*      dl 0x0000CD ; 53.438 26, 0.803
040CB9 D1 00 00    0792*      dl 0x0000D1 ; 54.844 27, 0.818
040CBC D4 00 00    0793*      dl 0x0000D4 ; 56.250 28, 0.831
040CBF D8 00 00    0794*      dl 0x0000D8 ; 57.656 29, 0.845
040CC2 DB 00 00    0795*      dl 0x0000DB ; 59.063 2A, 0.858
040CC5 DE 00 00    0796*      dl 0x0000DE ; 60.469 2B, 0.870
040CC8 E1 00 00    0797*      dl 0x0000E1 ; 61.875 2C, 0.882
040CCB E4 00 00    0798*      dl 0x0000E4 ; 63.281 2D, 0.893
040CCE E7 00 00    0799*      dl 0x0000E7 ; 64.688 2E, 0.904
040CD1 EA 00 00    0800*      dl 0x0000EA ; 66.094 2F, 0.914
040CD4 EC 00 00    0801*      dl 0x0000EC ; 67.500 30, 0.924
040CD7 EE 00 00    0802*      dl 0x0000EE ; 68.906 31, 0.933
040CDA F1 00 00    0803*      dl 0x0000F1 ; 70.313 32, 0.942
040CDD F3 00 00    0804*      dl 0x0000F3 ; 71.719 33, 0.950
040CE0 F4 00 00    0805*      dl 0x0000F4 ; 73.125 34, 0.957
040CE3 F6 00 00    0806*      dl 0x0000F6 ; 74.531 35, 0.964
040CE6 F8 00 00    0807*      dl 0x0000F8 ; 75.938 36, 0.970
040CE9 F9 00 00    0808*      dl 0x0000F9 ; 77.344 37, 0.976
040CEC FB 00 00    0809*      dl 0x0000FB ; 78.750 38, 0.981
040CEF FC 00 00    0810*      dl 0x0000FC ; 80.156 39, 0.985
040CF2 FD 00 00    0811*      dl 0x0000FD ; 81.563 3A, 0.989
040CF5 FE 00 00    0812*      dl 0x0000FE ; 82.969 3B, 0.992
040CF8 FE 00 00    0813*      dl 0x0000FE ; 84.375 3C, 0.995
040CFB FF 00 00    0814*      dl 0x0000FF ; 85.781 3D, 0.997
040CFE FF 00 00    0815*      dl 0x0000FF ; 87.188 3E, 0.999
040D01 FF 00 00    0816*      dl 0x0000FF ; 88.594 3F, 1.000
040D04 00 01 00    0817*      dl 0x000100 ; 90.000 40, 1.000
040D07 FF 00 00    0818*      dl 0x0000FF ; 91.406 41, 1.000
040D0A FF 00 00    0819*      dl 0x0000FF ; 92.813 42, 0.999
040D0D FF 00 00    0820*      dl 0x0000FF ; 94.219 43, 0.997
040D10 FE 00 00    0821*      dl 0x0000FE ; 95.625 44, 0.995
040D13 FE 00 00    0822*      dl 0x0000FE ; 97.031 45, 0.992
040D16 FD 00 00    0823*      dl 0x0000FD ; 98.438 46, 0.989
040D19 FC 00 00    0824*      dl 0x0000FC ; 99.844 47, 0.985
040D1C FB 00 00    0825*      dl 0x0000FB ; 101.250 48, 0.981
040D1F F9 00 00    0826*      dl 0x0000F9 ; 102.656 49, 0.976
040D22 F8 00 00    0827*      dl 0x0000F8 ; 104.063 4A, 0.970
040D25 F6 00 00    0828*      dl 0x0000F6 ; 105.469 4B, 0.964
040D28 F4 00 00    0829*      dl 0x0000F4 ; 106.875 4C, 0.957
040D2B F3 00 00    0830*      dl 0x0000F3 ; 108.281 4D, 0.950
040D2E F1 00 00    0831*      dl 0x0000F1 ; 109.688 4E, 0.942
040D31 EE 00 00    0832*      dl 0x0000EE ; 111.094 4F, 0.933
040D34 EC 00 00    0833*      dl 0x0000EC ; 112.500 50, 0.924
040D37 EA 00 00    0834*      dl 0x0000EA ; 113.906 51, 0.914
040D3A E7 00 00    0835*      dl 0x0000E7 ; 115.313 52, 0.904
040D3D E4 00 00    0836*      dl 0x0000E4 ; 116.719 53, 0.893
040D40 E1 00 00    0837*      dl 0x0000E1 ; 118.125 54, 0.882
040D43 DE 00 00    0838*      dl 0x0000DE ; 119.531 55, 0.870
040D46 DB 00 00    0839*      dl 0x0000DB ; 120.938 56, 0.858
040D49 D8 00 00    0840*      dl 0x0000D8 ; 122.344 57, 0.845
040D4C D4 00 00    0841*      dl 0x0000D4 ; 123.750 58, 0.831
040D4F D1 00 00    0842*      dl 0x0000D1 ; 125.156 59, 0.818
040D52 CD 00 00    0843*      dl 0x0000CD ; 126.563 5A, 0.803
040D55 C9 00 00    0844*      dl 0x0000C9 ; 127.969 5B, 0.788
040D58 C5 00 00    0845*      dl 0x0000C5 ; 129.375 5C, 0.773
040D5B C1 00 00    0846*      dl 0x0000C1 ; 130.781 5D, 0.757
040D5E BD 00 00    0847*      dl 0x0000BD ; 132.188 5E, 0.741
040D61 B9 00 00    0848*      dl 0x0000B9 ; 133.594 5F, 0.724
040D64 B5 00 00    0849*      dl 0x0000B5 ; 135.000 60, 0.707
040D67 B0 00 00    0850*      dl 0x0000B0 ; 136.406 61, 0.690
040D6A AB 00 00    0851*      dl 0x0000AB ; 137.813 62, 0.672
040D6D A7 00 00    0852*      dl 0x0000A7 ; 139.219 63, 0.653
040D70 A2 00 00    0853*      dl 0x0000A2 ; 140.625 64, 0.634
040D73 9D 00 00    0854*      dl 0x00009D ; 142.031 65, 0.615
040D76 98 00 00    0855*      dl 0x000098 ; 143.438 66, 0.596
040D79 93 00 00    0856*      dl 0x000093 ; 144.844 67, 0.576
040D7C 8E 00 00    0857*      dl 0x00008E ; 146.250 68, 0.556
040D7F 88 00 00    0858*      dl 0x000088 ; 147.656 69, 0.535
040D82 83 00 00    0859*      dl 0x000083 ; 149.063 6A, 0.514
040D85 7E 00 00    0860*      dl 0x00007E ; 150.469 6B, 0.493
040D88 78 00 00    0861*      dl 0x000078 ; 151.875 6C, 0.471
040D8B 73 00 00    0862*      dl 0x000073 ; 153.281 6D, 0.450
040D8E 6D 00 00    0863*      dl 0x00006D ; 154.688 6E, 0.428
040D91 67 00 00    0864*      dl 0x000067 ; 156.094 6F, 0.405
040D94 61 00 00    0865*      dl 0x000061 ; 157.500 70, 0.383
040D97 5C 00 00    0866*      dl 0x00005C ; 158.906 71, 0.360
040D9A 56 00 00    0867*      dl 0x000056 ; 160.313 72, 0.337
040D9D 50 00 00    0868*      dl 0x000050 ; 161.719 73, 0.314
040DA0 4A 00 00    0869*      dl 0x00004A ; 163.125 74, 0.290
040DA3 44 00 00    0870*      dl 0x000044 ; 164.531 75, 0.267
040DA6 3E 00 00    0871*      dl 0x00003E ; 165.938 76, 0.243
040DA9 38 00 00    0872*      dl 0x000038 ; 167.344 77, 0.219
040DAC 31 00 00    0873*      dl 0x000031 ; 168.750 78, 0.195
040DAF 2B 00 00    0874*      dl 0x00002B ; 170.156 79, 0.171
040DB2 25 00 00    0875*      dl 0x000025 ; 171.563 7A, 0.147
040DB5 1F 00 00    0876*      dl 0x00001F ; 172.969 7B, 0.122
040DB8 19 00 00    0877*      dl 0x000019 ; 174.375 7C, 0.098
040DBB 12 00 00    0878*      dl 0x000012 ; 175.781 7D, 0.074
040DBE 0C 00 00    0879*      dl 0x00000C ; 177.188 7E, 0.049
040DC1 06 00 00    0880*      dl 0x000006 ; 178.594 7F, 0.025
040DC4 00 00 00    0881*      dl 0x000000 ; 180.000 80, 0.000
040DC7 FA FF FF    0882*      dl 0xFFFFFA ; 181.406 81, -0.025
040DCA F4 FF FF    0883*      dl 0xFFFFF4 ; 182.813 82, -0.049
040DCD EE FF FF    0884*      dl 0xFFFFEE ; 184.219 83, -0.074
040DD0 E7 FF FF    0885*      dl 0xFFFFE7 ; 185.625 84, -0.098
040DD3 E1 FF FF    0886*      dl 0xFFFFE1 ; 187.031 85, -0.122
040DD6 DB FF FF    0887*      dl 0xFFFFDB ; 188.438 86, -0.147
040DD9 D5 FF FF    0888*      dl 0xFFFFD5 ; 189.844 87, -0.171
040DDC CF FF FF    0889*      dl 0xFFFFCF ; 191.250 88, -0.195
040DDF C8 FF FF    0890*      dl 0xFFFFC8 ; 192.656 89, -0.219
040DE2 C2 FF FF    0891*      dl 0xFFFFC2 ; 194.063 8A, -0.243
040DE5 BC FF FF    0892*      dl 0xFFFFBC ; 195.469 8B, -0.267
040DE8 B6 FF FF    0893*      dl 0xFFFFB6 ; 196.875 8C, -0.290
040DEB B0 FF FF    0894*      dl 0xFFFFB0 ; 198.281 8D, -0.314
040DEE AA FF FF    0895*      dl 0xFFFFAA ; 199.688 8E, -0.337
040DF1 A4 FF FF    0896*      dl 0xFFFFA4 ; 201.094 8F, -0.360
040DF4 9F FF FF    0897*      dl 0xFFFF9F ; 202.500 90, -0.383
040DF7 99 FF FF    0898*      dl 0xFFFF99 ; 203.906 91, -0.405
040DFA 93 FF FF    0899*      dl 0xFFFF93 ; 205.313 92, -0.428
040DFD 8D FF FF    0900*      dl 0xFFFF8D ; 206.719 93, -0.450
040E00 88 FF FF    0901*      dl 0xFFFF88 ; 208.125 94, -0.471
040E03 82 FF FF    0902*      dl 0xFFFF82 ; 209.531 95, -0.493
040E06 7D FF FF    0903*      dl 0xFFFF7D ; 210.938 96, -0.514
040E09 78 FF FF    0904*      dl 0xFFFF78 ; 212.344 97, -0.535
040E0C 72 FF FF    0905*      dl 0xFFFF72 ; 213.750 98, -0.556
040E0F 6D FF FF    0906*      dl 0xFFFF6D ; 215.156 99, -0.576
040E12 68 FF FF    0907*      dl 0xFFFF68 ; 216.563 9A, -0.596
040E15 63 FF FF    0908*      dl 0xFFFF63 ; 217.969 9B, -0.615
040E18 5E FF FF    0909*      dl 0xFFFF5E ; 219.375 9C, -0.634
040E1B 59 FF FF    0910*      dl 0xFFFF59 ; 220.781 9D, -0.653
040E1E 55 FF FF    0911*      dl 0xFFFF55 ; 222.188 9E, -0.672
040E21 50 FF FF    0912*      dl 0xFFFF50 ; 223.594 9F, -0.690
040E24 4B FF FF    0913*      dl 0xFFFF4B ; 225.000 A0, -0.707
040E27 47 FF FF    0914*      dl 0xFFFF47 ; 226.406 A1, -0.724
040E2A 43 FF FF    0915*      dl 0xFFFF43 ; 227.813 A2, -0.741
040E2D 3F FF FF    0916*      dl 0xFFFF3F ; 229.219 A3, -0.757
040E30 3B FF FF    0917*      dl 0xFFFF3B ; 230.625 A4, -0.773
040E33 37 FF FF    0918*      dl 0xFFFF37 ; 232.031 A5, -0.788
040E36 33 FF FF    0919*      dl 0xFFFF33 ; 233.438 A6, -0.803
040E39 2F FF FF    0920*      dl 0xFFFF2F ; 234.844 A7, -0.818
040E3C 2C FF FF    0921*      dl 0xFFFF2C ; 236.250 A8, -0.831
040E3F 28 FF FF    0922*      dl 0xFFFF28 ; 237.656 A9, -0.845
040E42 25 FF FF    0923*      dl 0xFFFF25 ; 239.063 AA, -0.858
040E45 22 FF FF    0924*      dl 0xFFFF22 ; 240.469 AB, -0.870
040E48 1F FF FF    0925*      dl 0xFFFF1F ; 241.875 AC, -0.882
040E4B 1C FF FF    0926*      dl 0xFFFF1C ; 243.281 AD, -0.893
040E4E 19 FF FF    0927*      dl 0xFFFF19 ; 244.688 AE, -0.904
040E51 16 FF FF    0928*      dl 0xFFFF16 ; 246.094 AF, -0.914
040E54 14 FF FF    0929*      dl 0xFFFF14 ; 247.500 B0, -0.924
040E57 12 FF FF    0930*      dl 0xFFFF12 ; 248.906 B1, -0.933
040E5A 0F FF FF    0931*      dl 0xFFFF0F ; 250.313 B2, -0.942
040E5D 0D FF FF    0932*      dl 0xFFFF0D ; 251.719 B3, -0.950
040E60 0C FF FF    0933*      dl 0xFFFF0C ; 253.125 B4, -0.957
040E63 0A FF FF    0934*      dl 0xFFFF0A ; 254.531 B5, -0.964
040E66 08 FF FF    0935*      dl 0xFFFF08 ; 255.938 B6, -0.970
040E69 07 FF FF    0936*      dl 0xFFFF07 ; 257.344 B7, -0.976
040E6C 05 FF FF    0937*      dl 0xFFFF05 ; 258.750 B8, -0.981
040E6F 04 FF FF    0938*      dl 0xFFFF04 ; 260.156 B9, -0.985
040E72 03 FF FF    0939*      dl 0xFFFF03 ; 261.563 BA, -0.989
040E75 02 FF FF    0940*      dl 0xFFFF02 ; 262.969 BB, -0.992
040E78 02 FF FF    0941*      dl 0xFFFF02 ; 264.375 BC, -0.995
040E7B 01 FF FF    0942*      dl 0xFFFF01 ; 265.781 BD, -0.997
040E7E 01 FF FF    0943*      dl 0xFFFF01 ; 267.188 BE, -0.999
040E81 01 FF FF    0944*      dl 0xFFFF01 ; 268.594 BF, -1.000
040E84 00 FF FF    0945*      dl 0xFFFF00 ; 270.000 C0, -1.000
040E87 01 FF FF    0946*      dl 0xFFFF01 ; 271.406 C1, -1.000
040E8A 01 FF FF    0947*      dl 0xFFFF01 ; 272.813 C2, -0.999
040E8D 01 FF FF    0948*      dl 0xFFFF01 ; 274.219 C3, -0.997
040E90 02 FF FF    0949*      dl 0xFFFF02 ; 275.625 C4, -0.995
040E93 02 FF FF    0950*      dl 0xFFFF02 ; 277.031 C5, -0.992
040E96 03 FF FF    0951*      dl 0xFFFF03 ; 278.438 C6, -0.989
040E99 04 FF FF    0952*      dl 0xFFFF04 ; 279.844 C7, -0.985
040E9C 05 FF FF    0953*      dl 0xFFFF05 ; 281.250 C8, -0.981
040E9F 07 FF FF    0954*      dl 0xFFFF07 ; 282.656 C9, -0.976
040EA2 08 FF FF    0955*      dl 0xFFFF08 ; 284.063 CA, -0.970
040EA5 0A FF FF    0956*      dl 0xFFFF0A ; 285.469 CB, -0.964
040EA8 0C FF FF    0957*      dl 0xFFFF0C ; 286.875 CC, -0.957
040EAB 0D FF FF    0958*      dl 0xFFFF0D ; 288.281 CD, -0.950
040EAE 0F FF FF    0959*      dl 0xFFFF0F ; 289.688 CE, -0.942
040EB1 12 FF FF    0960*      dl 0xFFFF12 ; 291.094 CF, -0.933
040EB4 14 FF FF    0961*      dl 0xFFFF14 ; 292.500 D0, -0.924
040EB7 16 FF FF    0962*      dl 0xFFFF16 ; 293.906 D1, -0.914
040EBA 19 FF FF    0963*      dl 0xFFFF19 ; 295.313 D2, -0.904
040EBD 1C FF FF    0964*      dl 0xFFFF1C ; 296.719 D3, -0.893
040EC0 1F FF FF    0965*      dl 0xFFFF1F ; 298.125 D4, -0.882
040EC3 22 FF FF    0966*      dl 0xFFFF22 ; 299.531 D5, -0.870
040EC6 25 FF FF    0967*      dl 0xFFFF25 ; 300.938 D6, -0.858
040EC9 28 FF FF    0968*      dl 0xFFFF28 ; 302.344 D7, -0.845
040ECC 2C FF FF    0969*      dl 0xFFFF2C ; 303.750 D8, -0.831
040ECF 2F FF FF    0970*      dl 0xFFFF2F ; 305.156 D9, -0.818
040ED2 33 FF FF    0971*      dl 0xFFFF33 ; 306.563 DA, -0.803
040ED5 37 FF FF    0972*      dl 0xFFFF37 ; 307.969 DB, -0.788
040ED8 3B FF FF    0973*      dl 0xFFFF3B ; 309.375 DC, -0.773
040EDB 3F FF FF    0974*      dl 0xFFFF3F ; 310.781 DD, -0.757
040EDE 43 FF FF    0975*      dl 0xFFFF43 ; 312.188 DE, -0.741
040EE1 47 FF FF    0976*      dl 0xFFFF47 ; 313.594 DF, -0.724
040EE4 4B FF FF    0977*      dl 0xFFFF4B ; 315.000 E0, -0.707
040EE7 50 FF FF    0978*      dl 0xFFFF50 ; 316.406 E1, -0.690
040EEA 55 FF FF    0979*      dl 0xFFFF55 ; 317.813 E2, -0.672
040EED 59 FF FF    0980*      dl 0xFFFF59 ; 319.219 E3, -0.653
040EF0 5E FF FF    0981*      dl 0xFFFF5E ; 320.625 E4, -0.634
040EF3 63 FF FF    0982*      dl 0xFFFF63 ; 322.031 E5, -0.615
040EF6 68 FF FF    0983*      dl 0xFFFF68 ; 323.438 E6, -0.596
040EF9 6D FF FF    0984*      dl 0xFFFF6D ; 324.844 E7, -0.576
040EFC 72 FF FF    0985*      dl 0xFFFF72 ; 326.250 E8, -0.556
040EFF 78 FF FF    0986*      dl 0xFFFF78 ; 327.656 E9, -0.535
040F02 7D FF FF    0987*      dl 0xFFFF7D ; 329.063 EA, -0.514
040F05 82 FF FF    0988*      dl 0xFFFF82 ; 330.469 EB, -0.493
040F08 88 FF FF    0989*      dl 0xFFFF88 ; 331.875 EC, -0.471
040F0B 8D FF FF    0990*      dl 0xFFFF8D ; 333.281 ED, -0.450
040F0E 93 FF FF    0991*      dl 0xFFFF93 ; 334.688 EE, -0.428
040F11 99 FF FF    0992*      dl 0xFFFF99 ; 336.094 EF, -0.405
040F14 9F FF FF    0993*      dl 0xFFFF9F ; 337.500 F0, -0.383
040F17 A4 FF FF    0994*      dl 0xFFFFA4 ; 338.906 F1, -0.360
040F1A AA FF FF    0995*      dl 0xFFFFAA ; 340.313 F2, -0.337
040F1D B0 FF FF    0996*      dl 0xFFFFB0 ; 341.719 F3, -0.314
040F20 B6 FF FF    0997*      dl 0xFFFFB6 ; 343.125 F4, -0.290
040F23 BC FF FF    0998*      dl 0xFFFFBC ; 344.531 F5, -0.267
040F26 C2 FF FF    0999*      dl 0xFFFFC2 ; 345.938 F6, -0.243
040F29 C8 FF FF    1000*      dl 0xFFFFC8 ; 347.344 F7, -0.219
040F2C CF FF FF    1001*      dl 0xFFFFCF ; 348.750 F8, -0.195
040F2F D5 FF FF    1002*      dl 0xFFFFD5 ; 350.156 F9, -0.171
040F32 DB FF FF    1003*      dl 0xFFFFDB ; 351.563 FA, -0.147
040F35 E1 FF FF    1004*      dl 0xFFFFE1 ; 352.969 FB, -0.122
040F38 E7 FF FF    1005*      dl 0xFFFFE7 ; 354.375 FC, -0.098
040F3B EE FF FF    1006*      dl 0xFFFFEE ; 355.781 FD, -0.074
040F3E F4 FF FF    1007*      dl 0xFFFFF4 ; 357.188 FE, -0.049
040F41 FA FF FF    1008*      dl 0xFFFFFA ; 358.594 FF, -0.025
040F44 00 00 00    1009*      dl 0x000000 ; 0.000 00, 0.000 for interpolation
040F47             1010*  
040F47             1011*  atan_lut_168:
040F47 00 00 00    1012*      dl 0x000000 ; 000000, 0.000
040F4A 28 00 00    1013*      dl 0x000028 ; 000001, 0.224
040F4D 51 00 00    1014*      dl 0x000051 ; 000002, 0.448
040F50 7A 00 00    1015*      dl 0x00007A ; 000003, 0.671
040F53 A2 00 00    1016*      dl 0x0000A2 ; 000004, 0.895
040F56 CB 00 00    1017*      dl 0x0000CB ; 000005, 1.119
040F59 F4 00 00    1018*      dl 0x0000F4 ; 000006, 1.343
040F5C 1D 01 00    1019*      dl 0x00011D ; 000007, 1.566
040F5F 45 01 00    1020*      dl 0x000145 ; 000008, 1.790
040F62 6E 01 00    1021*      dl 0x00016E ; 000009, 2.013
040F65 97 01 00    1022*      dl 0x000197 ; 00000A, 2.237
040F68 BF 01 00    1023*      dl 0x0001BF ; 00000B, 2.460
040F6B E8 01 00    1024*      dl 0x0001E8 ; 00000C, 2.684
040F6E 11 02 00    1025*      dl 0x000211 ; 00000D, 2.907
040F71 39 02 00    1026*      dl 0x000239 ; 00000E, 3.130
040F74 62 02 00    1027*      dl 0x000262 ; 00000F, 3.353
040F77 8B 02 00    1028*      dl 0x00028B ; 000010, 3.576
040F7A B3 02 00    1029*      dl 0x0002B3 ; 000011, 3.799
040F7D DC 02 00    1030*      dl 0x0002DC ; 000012, 4.022
040F80 04 03 00    1031*      dl 0x000304 ; 000013, 4.245
040F83 2D 03 00    1032*      dl 0x00032D ; 000014, 4.467
040F86 55 03 00    1033*      dl 0x000355 ; 000015, 4.690
040F89 7E 03 00    1034*      dl 0x00037E ; 000016, 4.912
040F8C A6 03 00    1035*      dl 0x0003A6 ; 000017, 5.134
040F8F CE 03 00    1036*      dl 0x0003CE ; 000018, 5.356
040F92 F7 03 00    1037*      dl 0x0003F7 ; 000019, 5.578
040F95 1F 04 00    1038*      dl 0x00041F ; 00001A, 5.799
040F98 48 04 00    1039*      dl 0x000448 ; 00001B, 6.021
040F9B 70 04 00    1040*      dl 0x000470 ; 00001C, 6.242
040F9E 98 04 00    1041*      dl 0x000498 ; 00001D, 6.463
040FA1 C0 04 00    1042*      dl 0x0004C0 ; 00001E, 6.684
040FA4 E8 04 00    1043*      dl 0x0004E8 ; 00001F, 6.905
040FA7 11 05 00    1044*      dl 0x000511 ; 000020, 7.125
040FAA 39 05 00    1045*      dl 0x000539 ; 000021, 7.345
040FAD 61 05 00    1046*      dl 0x000561 ; 000022, 7.565
040FB0 89 05 00    1047*      dl 0x000589 ; 000023, 7.785
040FB3 B1 05 00    1048*      dl 0x0005B1 ; 000024, 8.005
040FB6 D9 05 00    1049*      dl 0x0005D9 ; 000025, 8.224
040FB9 01 06 00    1050*      dl 0x000601 ; 000026, 8.443
040FBC 28 06 00    1051*      dl 0x000628 ; 000027, 8.662
040FBF 50 06 00    1052*      dl 0x000650 ; 000028, 8.881
040FC2 78 06 00    1053*      dl 0x000678 ; 000029, 9.099
040FC5 A0 06 00    1054*      dl 0x0006A0 ; 00002A, 9.317
040FC8 C7 06 00    1055*      dl 0x0006C7 ; 00002B, 9.535
040FCB EF 06 00    1056*      dl 0x0006EF ; 00002C, 9.752
040FCE 16 07 00    1057*      dl 0x000716 ; 00002D, 9.970
040FD1 3E 07 00    1058*      dl 0x00073E ; 00002E, 10.187
040FD4 65 07 00    1059*      dl 0x000765 ; 00002F, 10.403
040FD7 8D 07 00    1060*      dl 0x00078D ; 000030, 10.620
040FDA B4 07 00    1061*      dl 0x0007B4 ; 000031, 10.836
040FDD DB 07 00    1062*      dl 0x0007DB ; 000032, 11.051
040FE0 03 08 00    1063*      dl 0x000803 ; 000033, 11.267
040FE3 2A 08 00    1064*      dl 0x00082A ; 000034, 11.482
040FE6 51 08 00    1065*      dl 0x000851 ; 000035, 11.697
040FE9 78 08 00    1066*      dl 0x000878 ; 000036, 11.911
040FEC 9F 08 00    1067*      dl 0x00089F ; 000037, 12.125
040FEF C6 08 00    1068*      dl 0x0008C6 ; 000038, 12.339
040FF2 ED 08 00    1069*      dl 0x0008ED ; 000039, 12.553
040FF5 13 09 00    1070*      dl 0x000913 ; 00003A, 12.766
040FF8 3A 09 00    1071*      dl 0x00093A ; 00003B, 12.978
040FFB 61 09 00    1072*      dl 0x000961 ; 00003C, 13.191
040FFE 87 09 00    1073*      dl 0x000987 ; 00003D, 13.403
041001 AE 09 00    1074*      dl 0x0009AE ; 00003E, 13.614
041004 D4 09 00    1075*      dl 0x0009D4 ; 00003F, 13.825
041007 FB 09 00    1076*      dl 0x0009FB ; 000040, 14.036
04100A 21 0A 00    1077*      dl 0x000A21 ; 000041, 14.247
04100D 47 0A 00    1078*      dl 0x000A47 ; 000042, 14.457
041010 6D 0A 00    1079*      dl 0x000A6D ; 000043, 14.666
041013 94 0A 00    1080*      dl 0x000A94 ; 000044, 14.876
041016 BA 0A 00    1081*      dl 0x000ABA ; 000045, 15.085
041019 E0 0A 00    1082*      dl 0x000AE0 ; 000046, 15.293
04101C 05 0B 00    1083*      dl 0x000B05 ; 000047, 15.501
04101F 2B 0B 00    1084*      dl 0x000B2B ; 000048, 15.709
041022 51 0B 00    1085*      dl 0x000B51 ; 000049, 15.916
041025 77 0B 00    1086*      dl 0x000B77 ; 00004A, 16.123
041028 9C 0B 00    1087*      dl 0x000B9C ; 00004B, 16.329
04102B C2 0B 00    1088*      dl 0x000BC2 ; 00004C, 16.535
04102E E7 0B 00    1089*      dl 0x000BE7 ; 00004D, 16.740
041031 0C 0C 00    1090*      dl 0x000C0C ; 00004E, 16.945
041034 32 0C 00    1091*      dl 0x000C32 ; 00004F, 17.150
041037 57 0C 00    1092*      dl 0x000C57 ; 000050, 17.354
04103A 7C 0C 00    1093*      dl 0x000C7C ; 000051, 17.558
04103D A1 0C 00    1094*      dl 0x000CA1 ; 000052, 17.761
041040 C6 0C 00    1095*      dl 0x000CC6 ; 000053, 17.964
041043 EB 0C 00    1096*      dl 0x000CEB ; 000054, 18.166
041046 0F 0D 00    1097*      dl 0x000D0F ; 000055, 18.368
041049 34 0D 00    1098*      dl 0x000D34 ; 000056, 18.569
04104C 58 0D 00    1099*      dl 0x000D58 ; 000057, 18.770
04104F 7D 0D 00    1100*      dl 0x000D7D ; 000058, 18.970
041052 A1 0D 00    1101*      dl 0x000DA1 ; 000059, 19.170
041055 C6 0D 00    1102*      dl 0x000DC6 ; 00005A, 19.370
041058 EA 0D 00    1103*      dl 0x000DEA ; 00005B, 19.569
04105B 0E 0E 00    1104*      dl 0x000E0E ; 00005C, 19.767
04105E 32 0E 00    1105*      dl 0x000E32 ; 00005D, 19.965
041061 56 0E 00    1106*      dl 0x000E56 ; 00005E, 20.163
041064 7A 0E 00    1107*      dl 0x000E7A ; 00005F, 20.360
041067 9E 0E 00    1108*      dl 0x000E9E ; 000060, 20.556
04106A C1 0E 00    1109*      dl 0x000EC1 ; 000061, 20.752
04106D E5 0E 00    1110*      dl 0x000EE5 ; 000062, 20.947
041070 08 0F 00    1111*      dl 0x000F08 ; 000063, 21.142
041073 2C 0F 00    1112*      dl 0x000F2C ; 000064, 21.337
041076 4F 0F 00    1113*      dl 0x000F4F ; 000065, 21.531
041079 72 0F 00    1114*      dl 0x000F72 ; 000066, 21.724
04107C 95 0F 00    1115*      dl 0x000F95 ; 000067, 21.917
04107F B8 0F 00    1116*      dl 0x000FB8 ; 000068, 22.109
041082 DB 0F 00    1117*      dl 0x000FDB ; 000069, 22.301
041085 FE 0F 00    1118*      dl 0x000FFE ; 00006A, 22.493
041088 21 10 00    1119*      dl 0x001021 ; 00006B, 22.683
04108B 44 10 00    1120*      dl 0x001044 ; 00006C, 22.874
04108E 66 10 00    1121*      dl 0x001066 ; 00006D, 23.063
041091 89 10 00    1122*      dl 0x001089 ; 00006E, 23.253
041094 AB 10 00    1123*      dl 0x0010AB ; 00006F, 23.441
041097 CD 10 00    1124*      dl 0x0010CD ; 000070, 23.629
04109A EF 10 00    1125*      dl 0x0010EF ; 000071, 23.817
04109D 11 11 00    1126*      dl 0x001111 ; 000072, 24.004
0410A0 33 11 00    1127*      dl 0x001133 ; 000073, 24.191
0410A3 55 11 00    1128*      dl 0x001155 ; 000074, 24.376
0410A6 77 11 00    1129*      dl 0x001177 ; 000075, 24.562
0410A9 99 11 00    1130*      dl 0x001199 ; 000076, 24.747
0410AC BA 11 00    1131*      dl 0x0011BA ; 000077, 24.931
0410AF DC 11 00    1132*      dl 0x0011DC ; 000078, 25.115
0410B2 FD 11 00    1133*      dl 0x0011FD ; 000079, 25.298
0410B5 1E 12 00    1134*      dl 0x00121E ; 00007A, 25.481
0410B8 3F 12 00    1135*      dl 0x00123F ; 00007B, 25.663
0410BB 60 12 00    1136*      dl 0x001260 ; 00007C, 25.844
0410BE 81 12 00    1137*      dl 0x001281 ; 00007D, 26.025
0410C1 A2 12 00    1138*      dl 0x0012A2 ; 00007E, 26.206
0410C4 C3 12 00    1139*      dl 0x0012C3 ; 00007F, 26.386
0410C7 E4 12 00    1140*      dl 0x0012E4 ; 000080, 26.565
0410CA 04 13 00    1141*      dl 0x001304 ; 000081, 26.744
0410CD 25 13 00    1142*      dl 0x001325 ; 000082, 26.922
0410D0 45 13 00    1143*      dl 0x001345 ; 000083, 27.100
0410D3 65 13 00    1144*      dl 0x001365 ; 000084, 27.277
0410D6 85 13 00    1145*      dl 0x001385 ; 000085, 27.453
0410D9 A5 13 00    1146*      dl 0x0013A5 ; 000086, 27.629
0410DC C5 13 00    1147*      dl 0x0013C5 ; 000087, 27.805
0410DF E5 13 00    1148*      dl 0x0013E5 ; 000088, 27.979
0410E2 05 14 00    1149*      dl 0x001405 ; 000089, 28.154
0410E5 24 14 00    1150*      dl 0x001424 ; 00008A, 28.327
0410E8 44 14 00    1151*      dl 0x001444 ; 00008B, 28.501
0410EB 63 14 00    1152*      dl 0x001463 ; 00008C, 28.673
0410EE 83 14 00    1153*      dl 0x001483 ; 00008D, 28.845
0410F1 A2 14 00    1154*      dl 0x0014A2 ; 00008E, 29.017
0410F4 C1 14 00    1155*      dl 0x0014C1 ; 00008F, 29.187
0410F7 E0 14 00    1156*      dl 0x0014E0 ; 000090, 29.358
0410FA FF 14 00    1157*      dl 0x0014FF ; 000091, 29.527
0410FD 1E 15 00    1158*      dl 0x00151E ; 000092, 29.697
041100 3C 15 00    1159*      dl 0x00153C ; 000093, 29.865
041103 5B 15 00    1160*      dl 0x00155B ; 000094, 30.033
041106 79 15 00    1161*      dl 0x001579 ; 000095, 30.201
041109 98 15 00    1162*      dl 0x001598 ; 000096, 30.368
04110C B6 15 00    1163*      dl 0x0015B6 ; 000097, 30.534
04110F D4 15 00    1164*      dl 0x0015D4 ; 000098, 30.700
041112 F2 15 00    1165*      dl 0x0015F2 ; 000099, 30.865
041115 10 16 00    1166*      dl 0x001610 ; 00009A, 31.030
041118 2E 16 00    1167*      dl 0x00162E ; 00009B, 31.194
04111B 4C 16 00    1168*      dl 0x00164C ; 00009C, 31.357
04111E 6A 16 00    1169*      dl 0x00166A ; 00009D, 31.520
041121 87 16 00    1170*      dl 0x001687 ; 00009E, 31.682
041124 A5 16 00    1171*      dl 0x0016A5 ; 00009F, 31.844
041127 C2 16 00    1172*      dl 0x0016C2 ; 0000A0, 32.005
04112A DF 16 00    1173*      dl 0x0016DF ; 0000A1, 32.166
04112D FC 16 00    1174*      dl 0x0016FC ; 0000A2, 32.326
041130 19 17 00    1175*      dl 0x001719 ; 0000A3, 32.486
041133 36 17 00    1176*      dl 0x001736 ; 0000A4, 32.645
041136 53 17 00    1177*      dl 0x001753 ; 0000A5, 32.803
041139 70 17 00    1178*      dl 0x001770 ; 0000A6, 32.961
04113C 8C 17 00    1179*      dl 0x00178C ; 0000A7, 33.118
04113F A9 17 00    1180*      dl 0x0017A9 ; 0000A8, 33.275
041142 C5 17 00    1181*      dl 0x0017C5 ; 0000A9, 33.431
041145 E2 17 00    1182*      dl 0x0017E2 ; 0000AA, 33.587
041148 FE 17 00    1183*      dl 0x0017FE ; 0000AB, 33.742
04114B 1A 18 00    1184*      dl 0x00181A ; 0000AC, 33.896
04114E 36 18 00    1185*      dl 0x001836 ; 0000AD, 34.050
041151 52 18 00    1186*      dl 0x001852 ; 0000AE, 34.203
041154 6E 18 00    1187*      dl 0x00186E ; 0000AF, 34.356
041157 8A 18 00    1188*      dl 0x00188A ; 0000B0, 34.509
04115A A5 18 00    1189*      dl 0x0018A5 ; 0000B1, 34.660
04115D C1 18 00    1190*      dl 0x0018C1 ; 0000B2, 34.811
041160 DC 18 00    1191*      dl 0x0018DC ; 0000B3, 34.962
041163 F7 18 00    1192*      dl 0x0018F7 ; 0000B4, 35.112
041166 13 19 00    1193*      dl 0x001913 ; 0000B5, 35.262
041169 2E 19 00    1194*      dl 0x00192E ; 0000B6, 35.410
04116C 49 19 00    1195*      dl 0x001949 ; 0000B7, 35.559
04116F 64 19 00    1196*      dl 0x001964 ; 0000B8, 35.707
041172 7F 19 00    1197*      dl 0x00197F ; 0000B9, 35.854
041175 99 19 00    1198*      dl 0x001999 ; 0000BA, 36.001
041178 B4 19 00    1199*      dl 0x0019B4 ; 0000BB, 36.147
04117B CE 19 00    1200*      dl 0x0019CE ; 0000BC, 36.293
04117E E9 19 00    1201*      dl 0x0019E9 ; 0000BD, 36.438
041181 03 1A 00    1202*      dl 0x001A03 ; 0000BE, 36.582
041184 1D 1A 00    1203*      dl 0x001A1D ; 0000BF, 36.726
041187 37 1A 00    1204*      dl 0x001A37 ; 0000C0, 36.870
04118A 51 1A 00    1205*      dl 0x001A51 ; 0000C1, 37.013
04118D 6B 1A 00    1206*      dl 0x001A6B ; 0000C2, 37.155
041190 85 1A 00    1207*      dl 0x001A85 ; 0000C3, 37.297
041193 9F 1A 00    1208*      dl 0x001A9F ; 0000C4, 37.439
041196 B9 1A 00    1209*      dl 0x001AB9 ; 0000C5, 37.579
041199 D2 1A 00    1210*      dl 0x001AD2 ; 0000C6, 37.720
04119C EC 1A 00    1211*      dl 0x001AEC ; 0000C7, 37.859
04119F 05 1B 00    1212*      dl 0x001B05 ; 0000C8, 37.999
0411A2 1E 1B 00    1213*      dl 0x001B1E ; 0000C9, 38.137
0411A5 37 1B 00    1214*      dl 0x001B37 ; 0000CA, 38.276
0411A8 50 1B 00    1215*      dl 0x001B50 ; 0000CB, 38.413
0411AB 69 1B 00    1216*      dl 0x001B69 ; 0000CC, 38.550
0411AE 82 1B 00    1217*      dl 0x001B82 ; 0000CD, 38.687
0411B1 9B 1B 00    1218*      dl 0x001B9B ; 0000CE, 38.823
0411B4 B4 1B 00    1219*      dl 0x001BB4 ; 0000CF, 38.959
0411B7 CC 1B 00    1220*      dl 0x001BCC ; 0000D0, 39.094
0411BA E5 1B 00    1221*      dl 0x001BE5 ; 0000D1, 39.228
0411BD FD 1B 00    1222*      dl 0x001BFD ; 0000D2, 39.362
0411C0 16 1C 00    1223*      dl 0x001C16 ; 0000D3, 39.496
0411C3 2E 1C 00    1224*      dl 0x001C2E ; 0000D4, 39.629
0411C6 46 1C 00    1225*      dl 0x001C46 ; 0000D5, 39.762
0411C9 5E 1C 00    1226*      dl 0x001C5E ; 0000D6, 39.894
0411CC 76 1C 00    1227*      dl 0x001C76 ; 0000D7, 40.025
0411CF 8E 1C 00    1228*      dl 0x001C8E ; 0000D8, 40.156
0411D2 A5 1C 00    1229*      dl 0x001CA5 ; 0000D9, 40.286
0411D5 BD 1C 00    1230*      dl 0x001CBD ; 0000DA, 40.416
0411D8 D5 1C 00    1231*      dl 0x001CD5 ; 0000DB, 40.546
0411DB EC 1C 00    1232*      dl 0x001CEC ; 0000DC, 40.675
0411DE 04 1D 00    1233*      dl 0x001D04 ; 0000DD, 40.803
0411E1 1B 1D 00    1234*      dl 0x001D1B ; 0000DE, 40.931
0411E4 32 1D 00    1235*      dl 0x001D32 ; 0000DF, 41.059
0411E7 49 1D 00    1236*      dl 0x001D49 ; 0000E0, 41.186
0411EA 60 1D 00    1237*      dl 0x001D60 ; 0000E1, 41.312
0411ED 77 1D 00    1238*      dl 0x001D77 ; 0000E2, 41.438
0411F0 8E 1D 00    1239*      dl 0x001D8E ; 0000E3, 41.564
0411F3 A5 1D 00    1240*      dl 0x001DA5 ; 0000E4, 41.689
0411F6 BB 1D 00    1241*      dl 0x001DBB ; 0000E5, 41.814
0411F9 D2 1D 00    1242*      dl 0x001DD2 ; 0000E6, 41.938
0411FC E9 1D 00    1243*      dl 0x001DE9 ; 0000E7, 42.061
0411FF FF 1D 00    1244*      dl 0x001DFF ; 0000E8, 42.184
041202 15 1E 00    1245*      dl 0x001E15 ; 0000E9, 42.307
041205 2C 1E 00    1246*      dl 0x001E2C ; 0000EA, 42.429
041208 42 1E 00    1247*      dl 0x001E42 ; 0000EB, 42.551
04120B 58 1E 00    1248*      dl 0x001E58 ; 0000EC, 42.672
04120E 6E 1E 00    1249*      dl 0x001E6E ; 0000ED, 42.793
041211 84 1E 00    1250*      dl 0x001E84 ; 0000EE, 42.913
041214 99 1E 00    1251*      dl 0x001E99 ; 0000EF, 43.033
041217 AF 1E 00    1252*      dl 0x001EAF ; 0000F0, 43.152
04121A C5 1E 00    1253*      dl 0x001EC5 ; 0000F1, 43.271
04121D DA 1E 00    1254*      dl 0x001EDA ; 0000F2, 43.390
041220 F0 1E 00    1255*      dl 0x001EF0 ; 0000F3, 43.508
041223 05 1F 00    1256*      dl 0x001F05 ; 0000F4, 43.625
041226 1B 1F 00    1257*      dl 0x001F1B ; 0000F5, 43.742
041229 30 1F 00    1258*      dl 0x001F30 ; 0000F6, 43.859
04122C 45 1F 00    1259*      dl 0x001F45 ; 0000F7, 43.975
04122F 5A 1F 00    1260*      dl 0x001F5A ; 0000F8, 44.091
041232 6F 1F 00    1261*      dl 0x001F6F ; 0000F9, 44.206
041235 84 1F 00    1262*      dl 0x001F84 ; 0000FA, 44.321
041238 99 1F 00    1263*      dl 0x001F99 ; 0000FB, 44.435
04123B AD 1F 00    1264*      dl 0x001FAD ; 0000FC, 44.549
04123E C2 1F 00    1265*      dl 0x001FC2 ; 0000FD, 44.662
041241 D7 1F 00    1266*      dl 0x001FD7 ; 0000FE, 44.775
041244 EB 1F 00    1267*      dl 0x001FEB ; 0000FF, 44.888
041247 00 20 00    1268*      dl 0x002000 ; 000100, 45.000 only needed for interpolation
04124A             0035       include "images.inc"
04124A             0001*  image_type: equ 0
04124A             0002*  image_width: equ image_type+3
04124A             0003*  image_height: equ image_width+3
04124A             0004*  image_filesize: equ image_height+3
04124A             0005*  image_filename: equ image_filesize+3
04124A             0006*  image_bufferId: equ image_filename+3
04124A             0007*  image_record_size: equ image_bufferId+3
04124A             0008*  
04124A 00 00 00    0009*  cur_image_list: dl 0
04124D 00 00 00    0010*  cur_file_idx: dl 0
041250 00 00 00    0011*  cur_filename: dl 0
041253 00 00 00    0012*  cur_buffer_id: dl 0
041256             0013*  
041256             0014*  ; load_ui_images:
041256             0015*  ; ; initialize image loading variables
041256             0016*  ;     ld hl,0
041256             0017*  ;     ld (cur_file_idx),hl
041256             0018*  ;     ld hl,ui_image_list
041256             0019*  ;     ld (cur_image_list),hl
041256             0020*  ; ; load images
041256             0021*  ;     ld b,ui_num_images
041256             0022*  ; @loop:
041256             0023*  ;     push bc
041256             0024*  ;     call load_next_image
041256             0025*  ;     pop bc
041256             0026*  ;     djnz @loop
041256             0027*  ;     ret
041256             0028*  
041256             0029*  load_sprite_images:
041256             0030*  ; initialize image loading variables
041256 21 00 00 00 0031*      ld hl,0
04125A 22 4D 12 04 0032*      ld (cur_file_idx),hl
04125E 21 C2 1B 04 0033*      ld hl,sprites_image_list
041262 22 4A 12 04 0034*      ld (cur_image_list),hl
041266 01 71 00 00 0035*      ld bc,sprites_num_images
04126A             0036*  ; load images
04126A CD 6F 12 04 0037*      call img_load_main
04126E C9          0038*      ret
04126F             0039*  
04126F             0040*  ; inputs: bc is the number of images to load, cur_image_list set
04126F             0041*  img_load_main:
04126F AF          0042*      xor a
041270 32 4D 12 04 0043*      ld (cur_file_idx),a
041274             0044*  
041274             0045*  img_load_main_loop:
041274             0046*  ; back up loop counter
041274 C5          0047*      push bc
041275             0048*  
041275             0049*  ; load the next image
041275 CD 90 12 04 0050*      call load_next_image
041279             0051*  
041279             0052*  ; ; plot the background
041279             0053*  ;     call vdu_cls
041279             0054*  ;     ld hl,BUF_SPLASH_BG
041279             0055*  ;     call vdu_buff_select
041279             0056*  ;     ld bc,0
041279             0057*  ;     ld de,0
041279             0058*  ;     call vdu_plot_bmp
041279             0059*  
041279             0060*  ; ; draw the most recently loaded image
041279             0061*  ; 	ld hl,(cur_buffer_id)
041279             0062*  ; 	call vdu_buff_select
041279             0063*  ; 	ld bc,0
041279             0064*  ; 	ld de,0
041279             0065*  ; 	call vdu_plot_bmp
041279             0066*  
041279             0067*  ; ; move logo
041279             0068*  ;     call move_logo
041279             0069*  
041279             0070*  ; print current filename
041279 2A 50 12 04 0071*      ld hl,(cur_filename)
04127D CD 77 00 04 0072*      call printString
041281             0073*  
041281             0074*  ; flip the framebuffer
041281             0075*      ; call vdu_flip
041281             0076*  
041281             0077*  ; decrement loop counter
041281 C1          0078*      pop bc
041282 0B          0079*      dec bc
041283 79          0080*      ld a,c
041284 B7          0081*      or a
041285 C2 74 12 04 0082*      jp nz,img_load_main_loop
041289 78          0083*      ld a,b
04128A B7          0084*      or a
04128B C2 74 12 04 0085*      jp nz,img_load_main_loop
04128F C9          0086*      ret
041290             0087*  
041290             0088*  load_next_image:
041290 16 12       0089*      ld d,image_record_size
041292 3A 4D 12 04 0090*      ld a,(cur_file_idx)
041296 5F          0091*      ld e,a
041297 ED 5C       0092*      mlt de
041299 FD 2A 4A 12 0093*      ld iy,(cur_image_list)
       04          
04129E FD 19       0094*      add iy,de
0412A0             0095*  
0412A0 FD 7E 00    0096*      ld a,(iy+image_type) ; get image type
0412A3 FD 07 03    0097*      ld bc,(iy+image_width) ; get image width
0412A6 FD 17 06    0098*      ld de,(iy+image_height) ; get image height
0412A9 FD 31 09    0099*      ld ix,(iy+image_filesize) ; get image file size
0412AC FD 27 0F    0100*      ld hl,(iy+image_bufferId) ; get image bufferId
0412AF 22 53 12 04 0101*      ld (cur_buffer_id),hl
0412B3 FD 37 0C    0102*      ld iy,(iy+image_filename) ; get image filename
0412B6 FD 22 50 12 0103*      ld (cur_filename),iy
       04          
0412BB CD 90 16 04 0104*      call vdu_load_img
0412BF FD 21 4D 12 0105*      ld iy,cur_file_idx
       04          
0412C4 FD 34 00    0106*      inc (iy)
0412C7 C9          0107*      ret
0412C8             0108*  
0412C8             0109*  ; img_load_init:
0412C8             0110*  ; ; initialize logo's position parameters
0412C8             0111*  ;     ld hl,0
0412C8             0112*  ;     ld (logo_xvel),hl
0412C8             0113*  ;     ld (logo_xpos),hl
0412C8             0114*  ; ; begin 16.8 maths to determine logo's y position and velocity
0412C8             0115*  ;     ld hl,240-16*256 ; allow space for text at bottom of screen
0412C8             0116*  ;     ld (logo_ypos),hl
0412C8             0117*  ;     ex de,hl
0412C8             0118*  ;     ld hl,-8*256 ; 8 pixels from top of screen
0412C8             0119*  ;     add hl,de ; distance for logo to travel
0412C8             0120*  ;     ld de,-sprites_num_images*256
0412C8             0121*  ;     call sdiv168 ; ud.e = distance / num images = y velocity
0412C8             0122*  ;     ld (logo_yvel),de
0412C8             0123*  ; ; all done
0412C8             0124*  ;     ret
0412C8             0125*  
0412C8             0126*  ; move_logo:
0412C8             0127*  ; ; activate logo bitmap
0412C8             0128*  ;     ld hl, BUF_SPLASH_LOGO
0412C8             0129*  ;     call vdu_buff_select
0412C8             0130*  ; ; update position based on velocity parameters
0412C8             0131*  ;     ld hl,(logo_ypos)
0412C8             0132*  ;     ld de,(logo_yvel)
0412C8             0133*  ;     add hl,de
0412C8             0134*  ;     ld (logo_ypos),hl
0412C8             0135*  ; ; draw logo
0412C8             0136*  ;     ld bc,(logo_xpos)
0412C8             0137*  ;     ld de,(logo_ypos)
0412C8             0138*  ;     call vdu_plot_bmp168
0412C8             0139*  ;     ret
0412C8             0140*  
0412C8             0141*  ; logo_xvel: dl 0
0412C8             0142*  ; logo_xpos: dl 0
0412C8             0143*  
0412C8             0144*  ; logo_yvel: dl 0
0412C8             0145*  ; logo_ypos: dl 0
0412C8             0036       include "timer.inc"
0412C8             0001*  ; Table 32. Timer Control Registers
0412C8             0002*  ; this constant is the base address of the timer control registers
0412C8             0003*  ; each timer takes three bytes:
0412C8             0004*  ;   0: control register
0412C8             0005*  ;   1: low byte of timer reset value
0412C8             0006*  ;   2: high byte of timer reset value
0412C8             0007*  ; note that the value is only 8-bits,so we use in0/out0 i/o calls,
0412C8             0008*  ; which correctly force the high and upper bytes of the address bus to zero
0412C8             0009*  TMR_CTL:     equ 80h
0412C8             0010*  
0412C8             0011*  ; Timer Control Register Bit Definitions
0412C8             0012*  PRT_IRQ_0:    equ %00000000 ; The timer does not reach its end-of-count value.
0412C8             0013*                              ; This bit is reset to 0 every time the TMRx_CTL register is read.
0412C8             0014*  PRT_IRQ_1:    equ %10000000 ; The timer reaches its end-of-count value. If IRQ_EN is set to 1,
0412C8             0015*                              ; an interrupt signal is sent to the CPU. This bit remains 1 until
0412C8             0016*                              ; the TMRx_CTL register is read.
0412C8             0017*  
0412C8             0018*  IRQ_EN_0:     equ %00000000 ; Timer interrupt requests are disabled.
0412C8             0019*  IRQ_EN_1:     equ %01000000 ; Timer interrupt requests are enabled.
0412C8             0020*  
0412C8             0021*  PRT_MODE_0:   equ %00000000 ; The timer operates in SINGLE PASS mode. PRT_EN (bit 0) is reset to
0412C8             0022*                              ;  0,and counting stops when the end-of-count value is reached.
0412C8             0023*  PRT_MODE_1:   equ %00010000 ; The timer operates in CONTINUOUS mode. The timer reload value is
0412C8             0024*                              ; written to the counter when the end-of-count value is reached.
0412C8             0025*  
0412C8             0026*  ; CLK_DIV is a 2-bit mask that sets the timer input source clock divider
0412C8             0027*  CLK_DIV_256:  equ %00001100 ;
0412C8             0028*  CLK_DIV_64:   equ %00001000 ;
0412C8             0029*  CLK_DIV_16:   equ %00000100 ;
0412C8             0030*  CLK_DIV_4:    equ %00000000 ;
0412C8             0031*  
0412C8             0032*  RST_EN_0:     equ %00000000 ; The reload and restart function is disabled.
0412C8             0033*  RST_EN_1:     equ %00000010 ; The reload and restart function is enabled.
0412C8             0034*                              ; When a 1 is written to this bit,the values in the reload registers
0412C8             0035*                              ;  are loaded into the downcounter when the timer restarts. The
0412C8             0036*                              ; programmer must ensure that this bit is set to 1 each time
0412C8             0037*                              ; SINGLE-PASS mode is used.
0412C8             0038*  
0412C8             0039*  ; disable/enable the programmable reload timer
0412C8             0040*  PRT_EN_0:     equ %00000000 ;
0412C8             0041*  PRT_EN_1:     equ %00000001 ;
0412C8             0042*  
0412C8             0043*  ; Table 37. Timer Input Source Select Register
0412C8             0044*  ; Each of the 4 timers are allocated two bits of the 8-bit register
0412C8             0045*  ; in little-endian order,with TMR0 using bits 0 and 1,TMR1 using bits 2 and 3,etc.
0412C8             0046*  ;   00: System clock / CLK_DIV
0412C8             0047*  ;   01: RTC / CLK_DIV
0412C8             0048*  ;   NOTE: these are the values given in the manual,but it may be a typo
0412C8             0049*  ;   10: GPIO port B pin 1.
0412C8             0050*  ;   11: GPIO port B pin 1.
0412C8             0051*  TMR_ISS:   equ 92h ; register address
0412C8             0052*  
0412C8             0053*  ; Table 51. Real-Time Clock Control Register
0412C8             0054*  RTC_CTRL: equ EDh ; register address
0412C8             0055*  
0412C8             0056*  ; alarm interrupt disable/enable
0412C8             0057*  RTC_ALARM_0:    equ %00000000
0412C8             0058*  RTC_ALARM_1:    equ %10000000
0412C8             0059*  
0412C8             0060*  ; interrupt on alarm disable/enable
0412C8             0061*  RTC_INT_ENT_0:  equ %00000000
0412C8             0062*  RTC_INT_ENT_1:  equ %01000000
0412C8             0063*  
0412C8             0064*  RTC_BCD_EN_0:   equ %00000000   ; RTC count and alarm registers are binary
0412C8             0065*  RTC_BCD_EN_1:   equ %00100000   ; RTC count and alarm registers are BCD
0412C8             0066*  
0412C8             0067*  RTC_CLK_SEL_0:  equ %00000000   ; RTC clock source is crystal oscillator output (32768 Hz).
0412C8             0068*                                  ; On-chip 32768 Hz oscillator is enabled.
0412C8             0069*  RTC_CLK_SEL_1:  equ %00010000   ; RTC clock source is power line frequency input as set by FREQ_SEL.
0412C8             0070*                                  ; On-chip 32768 Hz oscillator is disabled.
0412C8             0071*  
0412C8             0072*  RTC_FREQ_SEL_0: equ %00000000   ; 60 Hz power line frequency.
0412C8             0073*  RTC_FREQ_SEL_1: equ %00001000   ; 50 Hz power line frequency.
0412C8             0074*  
0412C8             0075*  RTC_SLP_WAKE_0: equ %00000000   ; RTC does not generate a sleep-mode recovery reset.
0412C8             0076*  RTC_SLP_WAKE_1: equ %00000010   ; RTC generates a sleep-mode recovery reset.
0412C8             0077*  
0412C8             0078*  RTC_UNLOCK_0:   equ %00000000   ; RTC count registers are locked to prevent Write access.
0412C8             0079*                                  ; RTC counter is enabled.
0412C8             0080*  RTC_UNLOCK_1:   equ %00000001   ; RTC count registers are unlocked to allow Write access.
0412C8             0081*                                  ; RTC counter is disabled.
0412C8             0082*  
0412C8             0083*  ; prt_reload_emulator: equ 11234 ; 1/102.4 seconds on emulator with 16 clock divider
0412C8             0084*  
0412C8             0085*  prt_reload_emulator: equ 11519 ; 1 centisecond on emulator with 16 clock divider
0412C8             0086*  prt_reload_hardware: equ 11532 ; 1 centisecond on hardware with 16 clock divider
0412C8 00 00 00    0087*  prt_reload: dl 0x000000
0412CB             0088*  
0412CB             0089*  ; set PRT timer
0412CB             0090*  prt_set:
0412CB 21 00 00 00 0091*      ld hl,0
0412CF 22 19 13 04 0092*      ld (prt_irq_counter),hl
0412D3 2A C8 12 04 0093*      ld hl,(prt_reload)
0412D7 ED 29 84    0094*      out0 ($84),l
0412DA ED 21 85    0095*  	out0 ($85),h
0412DD             0096*  ; disable timer
0412DD 3E 06       0097*      ld a,PRT_IRQ_0 | IRQ_EN_0 | PRT_MODE_0 | CLK_DIV_16 | RST_EN_1 | PRT_EN_0
0412DF ED 39 83    0098*  	out0 ($83),a
0412E2             0099*  ; enable timer,with interrupt and CONTINUOUS mode,clock divider 16
0412E2 3E 57       0100*      ld a,PRT_IRQ_0 | IRQ_EN_1 | PRT_MODE_1 | CLK_DIV_16 | RST_EN_1 | PRT_EN_1
0412E4 ED 39 83    0101*  	out0 ($83),a
0412E7 C9          0102*      ret
0412E8             0103*  
0412E8             0104*  ; ===============================================
0412E8             0105*  ; PRT Timer Interrupt Handling
0412E8             0106*  ; https://github.com/tomm/agon-cpu-emulator/blob/main/sdcard/regression_suite/timerirq.inc
0412E8             0107*  ; -----------------------------------------------
0412E8             0108*  prt_irq_init:
0412E8             0109*      ; set up interrupt vector table 2
0412E8 21 00 00 00 0110*  	ld hl,0
0412EC 3A 0C 01 00 0111*  	ld a,($10c)
0412F0 6F          0112*  	ld l,a
0412F1 3A 0D 01 00 0113*  	ld a,($10d)
0412F5 67          0114*  	ld h,a
0412F6             0115*  
0412F6             0116*  	; skip over CALL ($c3)
0412F6 23          0117*  	inc hl
0412F7             0118*  	; load address of jump into vector table 2 (in ram)
0412F7 ED 27       0119*  	ld hl,(hl)
0412F9             0120*  
0412F9             0121*  	; write CALL prt_irq_handler to vector table 2
0412F9 3E C3       0122*  	ld a,$c3
0412FB 77          0123*  	ld (hl),a
0412FC 23          0124*  	inc hl
0412FD 11 04 13 04 0125*  	ld de,prt_irq_handler
041301 ED 1F       0126*  	ld (hl),de
041303             0127*  
041303 C9          0128*      ret
041304             0129*  
041304             0130*  prt_irq_handler:
041304 F3          0131*  	di
041305 F5          0132*  	push af
041306 E5          0133*      push hl
041307 ED 38 83    0134*  	in0 a,($83)
04130A 2A 19 13 04 0135*  	ld hl,(prt_irq_counter)
04130E 23          0136*  	inc hl
04130F 22 19 13 04 0137*  	ld (prt_irq_counter),hl
041313 E1          0138*      pop hl
041314 F1          0139*  	pop af
041315 FB          0140*  	ei
041316 5B ED 4D    0141*  	reti.l
041319             0142*  
041319             0143*  prt_irq_counter:
041319 00 00 00    0144*  	.dl 0
04131C             0145*  prt_irq_counter_saved:
04131C 00 00 00    0146*      .dl 0
04131F             0147*  
04131F             0148*  prt_loop_reset:
04131F E5          0149*      push hl
041320 21 00 00 00 0150*  	ld hl,0
041324 22 19 13 04 0151*  	ld (prt_irq_counter),hl
041328 22 8A 13 04 0152*      ld (prt_loop_counter),hl
04132C 22 8D 13 04 0153*      ld (prt_loops),hl
041330 CD CB 12 04 0154*      call prt_set
041334 E1          0155*      pop hl
041335 C9          0156*      ret
041336             0157*  
041336             0158*  prt_loop_start:
041336 E5          0159*      push hl
041337 21 00 00 00 0160*  	ld hl,0
04133B 22 19 13 04 0161*  	ld (prt_irq_counter),hl
04133F E1          0162*      pop hl
041340 C9          0163*      ret
041341             0164*  
041341             0165*  prt_loop_stop:
041341 E5          0166*      push hl
041342 D5          0167*      push de
041343 2A 19 13 04 0168*      ld hl,(prt_irq_counter)
041347 ED 5B 8A 13 0169*      ld de,(prt_loop_counter)
       04          
04134C 19          0170*      add hl,de
04134D 22 8A 13 04 0171*      ld (prt_loop_counter),hl
041351 21 00 00 00 0172*      ld hl,0
041355 22 19 13 04 0173*      ld (prt_irq_counter),hl
041359 2A 8D 13 04 0174*      ld hl,(prt_loops)
04135D 23          0175*      inc hl
04135E 22 8D 13 04 0176*      ld (prt_loops),hl
041362 D1          0177*      pop de
041363 E1          0178*      pop hl
041364 C9          0179*      ret
041365             0180*  
041365             0181*  ; inputs: bc = y,x text coordinates to print
041365             0182*  prt_loop_print:
041365 F5          0183*      push af
041366 E5          0184*      push hl
041367 C5          0185*      push bc
041368 D5          0186*      push de
041369 DD E5       0187*      push ix
04136B FD E5       0188*      push iy
04136D CD 71 14 04 0189*      call vdu_move_cursor
041371             0190*  
041371 2A 8A 13 04 0191*      ld hl,(prt_loop_counter)
041375 CD 76 01 04 0192*      call printDec
041379             0193*  
041379 2A 8D 13 04 0194*      ld hl,(prt_loops)
04137D CD 76 01 04 0195*      call printDec
041381             0196*  
041381 FD E1       0197*      pop iy
041383 DD E1       0198*      pop ix
041385 D1          0199*      pop de
041386 C1          0200*      pop bc
041387 E1          0201*      pop hl
041388 F1          0202*      pop af
041389 C9          0203*      ret
04138A             0204*  
04138A             0205*  prt_loop_counter:
04138A 00 00 00    0206*      .dl 0
04138D             0207*  prt_loops:
04138D 00 00 00    0208*      .dl 0
041390             0209*  
041390             0210*  ; ===============================================
041390             0211*  ; Timer functions
041390             0212*  ; -----------------------------------------------
041390             0213*  ; set a countdown timer
041390             0214*  ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
041390             0215*  ; returns: hl = current time
041390             0216*  tmr_set:
041390 FD 2F 03    0217*      ld (iy+3),hl            ; set time remaining
041393             0218*      MOSCALL mos_sysvars     ; ix points to syvars table
041393 3E 08       0001*M 			LD	A, function
041395 5B CF       0002*M 			RST.LIL	08h
041397 DD 27 00    0219*      ld hl,(ix+sysvar_time)  ; get current time
04139A FD 2F 00    0220*      ld (iy+0),hl            ; set start time
04139D C9          0221*      ret
04139E             0222*  
04139E             0223*  ; gets time remaining on a countdown timer
04139E             0224*  ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
04139E             0225*  ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
04139E             0226*  ;          sign flags: pos = time not expired,zero or neg = time expired
04139E             0227*  tmr_get:
04139E             0228*      MOSCALL mos_sysvars     ; ix points to syvars table
04139E 3E 08       0001*M 			LD	A, function
0413A0 5B CF       0002*M 			RST.LIL	08h
0413A2 DD 17 00    0229*      ld de,(ix+sysvar_time)  ; get current time
0413A5 FD 27 00    0230*      ld hl,(iy+0)            ; get start time
0413A8 AF          0231*      xor a                   ; clear carry
0413A9 ED 52       0232*      sbc hl,de               ; hl = time elapsed (will always be zero or negative)
0413AB FD 17 03    0233*      ld de,(iy+3)            ; get timer set value
0413AE AF          0234*      xor a                   ; clear carry
0413AF ED 5A       0235*      adc hl,de               ; hl = time remaining
0413B1             0236*                              ; (we do adc because add hl,rr doesn't set sign or zero flags)
0413B1 C9          0237*      ret
0413B2             0238*  
0413B2             0239*  tmr_test: ds 6 ; example of a buffer to hold timer data
0413B8             0240*  
0413B8 00 00 00    0241*  timestamp_now: dl 0
0413BB 00 00 00    0242*  timestamp_old: dl 0
0413BE 00 00 00    0243*  timestamp_chg: dl 0
0413C1             0244*  
0413C1             0245*  ; update the global timestamp from the system clock
0413C1             0246*  ; inputs: none
0413C1             0247*  ; returns: hl = time elapsed in 1/120ths of a second
0413C1             0248*  ;          ix = pointer to syvars table
0413C1             0249*  ; destroys: af,hl,de,ix
0413C1             0250*  timestamp_tick:
0413C1 ED 5B B8 13 0251*      ld de,(timestamp_now)   ; get previous time
       04          
0413C6 ED 53 BB 13 0252*      ld (timestamp_old),de   ; save previous time
       04          
0413CB             0253*      MOSCALL mos_sysvars     ; ix points to syvars table
0413CB 3E 08       0001*M 			LD	A, function
0413CD 5B CF       0002*M 			RST.LIL	08h
0413CF DD 27 00    0254*      ld hl,(ix+sysvar_time)  ; get current time
0413D2 22 B8 13 04 0255*      ld (timestamp_now),hl   ; save current time
0413D6 AF          0256*      xor a                   ; clear carry
0413D7 ED 52       0257*      sbc hl,de               ; hl = time elapsed
0413D9 22 BE 13 04 0258*      ld (timestamp_chg),hl   ; save elapsed time
0413DD C9          0259*      ret
0413DE             0260*  
0413DE             0261*  ; set a countdown timer
0413DE             0262*  ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
0413DE             0263*  ; requires: timestamp_tick to be called at least once before this function
0413DE             0264*  ; returns: hl = current time
0413DE             0265*  ; destroys: hl
0413DE             0266*  timestamp_tmr_set:
0413DE FD 2F 03    0267*      ld (iy+3),hl            ; set time remaining
0413E1 2A B8 13 04 0268*      ld hl,(timestamp_now)   ; get current timestamp
0413E5 FD 2F 00    0269*      ld (iy+0),hl            ; set start time
0413E8 C9          0270*      ret
0413E9             0271*  
0413E9             0272*  ; gets time remaining on a countdown timer following the global timestamp
0413E9             0273*  ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
0413E9             0274*  ; requires: timestamp_tick to be called at least once before this function
0413E9             0275*  ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
0413E9             0276*  ;          sign flags: pos = time not expired,zero or neg = time expired
0413E9             0277*  ; destroys: af,hl,de
0413E9             0278*  timestamp_tmr_get:
0413E9 ED 5B B8 13 0279*      ld de,(timestamp_now)   ; get current timestamp
       04          
0413EE FD 27 00    0280*      ld hl,(iy+0)            ; get start time
0413F1 AF          0281*      xor a                   ; clear carry
0413F2 ED 52       0282*      sbc hl,de               ; hl = time elapsed (will always be zero or negative)
0413F4 FD 17 03    0283*      ld de,(iy+3)            ; get timer set value
0413F7 AF          0284*      xor a                   ; clear carry
0413F8 ED 5A       0285*      adc hl,de               ; hl = time remaining
0413FA             0286*                              ; (we do adc because add hl,rr doesn't set sign or zero flags)
0413FA C9          0287*      ret
0413FB             0288*  
0413FB             0289*  ; set a stopwatch
0413FB             0290*  ; returns: hl = start time
0413FB             0291*  ; destroys: hl,ix
0413FB             0292*  stopwatch_set:
0413FB             0293*      MOSCALL mos_sysvars     ; ix points to syvars table
0413FB 3E 08       0001*M 			LD	A, function
0413FD 5B CF       0002*M 			RST.LIL	08h
0413FF DD 27 00    0294*      ld hl,(ix+sysvar_time)  ; get current time
041402 22 17 14 04 0295*      ld (stopwatch_started),hl            ; set start time
041406 C9          0296*      ret
041407             0297*  
041407             0298*  ; gets time elapsed on a stopwatch
041407             0299*  ; returns: hl = time elapsed in 1/120ths of a second
041407             0300*  ; destroys: af,hl,de,ix
041407             0301*  stopwatch_get:
041407             0302*      MOSCALL mos_sysvars     ; ix points to syvars table
041407 3E 08       0001*M 			LD	A, function
041409 5B CF       0002*M 			RST.LIL	08h
04140B DD 27 00    0303*      ld hl,(ix+sysvar_time)  ; get current time
04140E ED 5B 17 14 0304*      ld de,(stopwatch_started)            ; get start time
       04          
041413 AF          0305*      xor a                   ; clear carry
041414 ED 52       0306*      sbc hl,de               ; hl = time elapsed (will always be zero or positive)
041416 C9          0307*      ret
041417             0308*  
041417             0309*  stopwatch_started: ds 3 ; buffer to hold stopwatch start time
04141A             0310*  
04141A             0311*  ; ------------------
04141A             0312*  ; delay routine
04141A             0313*  ; Author: Richard Turrnidge
04141A             0314*  ; https://github.com/richardturnnidge/lessons/blob/main/slowdown.inc
04141A             0315*  ; routine waits a fixed time,then returns
04141A             0316*  ; arrive with A =  the delay byte. One bit to be set only.
04141A             0317*  ; eg. ld A,00000100b
04141A             0318*  
04141A             0319*  multiPurposeDelay:
04141A F5          0320*      push af
04141B C5          0321*      push bc
04141C DD E5       0322*      push ix
04141E 47          0323*      ld b,a
04141F 3E 08       0324*      ld a,$08
041421 5B CF       0325*      RST.LIL	08h                 ; get IX pointer to sysvars
041423             0326*  
041423             0327*  waitLoop:
041423             0328*  
041423 DD 7E 00    0329*      ld a,(ix + 0)              ; ix+0h is lowest byte of clock timer
041426             0330*  
041426             0331*                                  ;   we check if bit set is same as last time we checked.
041426             0332*                                  ;   bit 0 - don't use
041426             0333*                                  ;   bit 1 - changes 64 times per second
041426             0334*                                  ;   bit 2 - changes 32 times per second
041426             0335*                                  ;   bit 3 - changes 16 times per second
041426             0336*  
041426             0337*                                  ;   bit 4 - changes 8 times per second
041426             0338*                                  ;   bit 5 - changes 4 times per second
041426             0339*                                  ;   bit 6 - changes 2 times per second
041426             0340*                                  ;   bit 7 - changes 1 times per second
041426 A0          0341*      and b
041427 4F          0342*      ld c,a
041428 3A 39 14 04 0343*      ld a,(oldTimeStamp)
04142C B9          0344*      cp c                        ; is A same as last value?
04142D 28 F4       0345*      jr z,waitLoop              ; loop here if it is
04142F 79          0346*      ld a,c
041430 32 39 14 04 0347*      ld (oldTimeStamp),a        ; set new value
041434             0348*  
041434 DD E1       0349*      pop ix
041436 C1          0350*      pop bc
041437 F1          0351*      pop af
041438 C9          0352*      ret
041439             0353*  
041439 00          0354*  oldTimeStamp:   .db 00h
04143A             0037       include "vdu.inc"
04143A             0001*  
04143A             0002*  ; VDU 30: Home cursor
04143A             0003*  vdu_home_cursor:
04143A 3E 1E       0004*      ld a,30
04143C 5B D7       0005*  	rst.lil $10
04143E C9          0006*  	ret
04143F             0007*  
04143F             0008*  vdu_cursor_on:
04143F 21 4A 14 04 0009*  	ld hl,@cmd
041443 01 03 00 00 0010*  	ld bc,@end-@cmd
041447 5B DF       0011*  	rst.lil $18
041449 C9          0012*  	ret
04144A             0013*  @cmd:
04144A 17 01 01    0014*  	db 23,1,1
04144D             0015*  @end:
04144D             0016*  
04144D             0017*  vdu_cursor_off:
04144D 21 58 14 04 0018*  	ld hl,@cmd
041451 01 03 00 00 0019*  	ld bc,@end-@cmd
041455 5B DF       0020*  	rst.lil $18
041457 C9          0021*  	ret
041458             0022*  @cmd:
041458 17 01 00    0023*  	db 23,1,0
04145B             0024*  @end:
04145B             0025*  
04145B             0026*  ; VDU 5: Write text at graphics cursor
04145B             0027*  ; inputs: a is the character to write to the screen
04145B             0028*  ; prerequisites: the graphics cursor at the intended position on screen
04145B             0029*  ; outputs: see the name of the function
04145B             0030*  ; destroys: a, hl, bc
04145B             0031*  vdu_char_to_gfx_cursor:
04145B 32 6B 14 04 0032*  	ld (@arg),a
04145F 21 6A 14 04 0033*  	ld hl,@cmd
041463 01 02 00 00 0034*  	ld bc,@end-@cmd
041467 5B DF       0035*  	rst.lil $18
041469 C9          0036*  	ret
04146A 05          0037*  @cmd: db 5
04146B 00          0038*  @arg: db 0
04146C             0039*  @end:
04146C             0040*  ; VDU 9: Move cursor forward one character
04146C             0041*  vdu_cursor_forward:
04146C 3E 09       0042*      ld a,9
04146E 5B D7       0043*  	rst.lil $10
041470 C9          0044*  	ret
041471             0045*  
041471             0046*  ; VDU 31, x, y: Move text cursor to x, y text position (TAB(x, y))
041471             0047*  ; inputs: c=x, b=y 8-bit unsigned integers
041471             0048*  vdu_move_cursor:
041471 ED 43 82 14 0049*      ld (@x0),bc
       04          
041476 21 81 14 04 0050*  	ld hl,@cmd
04147A 01 03 00 00 0051*  	ld bc,@end-@cmd
04147E 5B DF       0052*  	rst.lil $18
041480 C9          0053*  	ret
041481 1F          0054*  @cmd: 	db 31
041482 00          0055*  @x0:	db 0
041483 00          0056*  @y0: 	db 0
041484 00          0057*  @end: 	db 0 ; padding
041485             0058*  
041485             0059*  ; VDU 12: Clear text area (CLS)
041485             0060*  vdu_cls:
041485 3E 0C       0061*      ld a,12
041487 5B D7       0062*  	rst.lil $10
041489 C9          0063*  	ret
04148A             0064*  
04148A             0065*  vdu_flip:
04148A 21 95 14 04 0066*  	ld hl,@cmd
04148E 01 03 00 00 0067*  	ld bc,@end-@cmd
041492 5B DF       0068*  	rst.lil $18
041494 C9          0069*  	ret
041495 17 00 C3    0070*  @cmd: db 23,0,0xC3
041498             0071*  @end:
041498             0072*  
041498             0073*  ; VDU 16: Clear graphics area (CLG)
041498             0074*  vdu_clg:
041498 3E 10       0075*      ld a,16
04149A 5B D7       0076*  	rst.lil $10
04149C C9          0077*  	ret
04149D             0078*  
04149D             0079*  ; https://github.com/breakintoprogram/agon-docs/wiki/VDP
04149D             0080*  ; VDU 23, 7: Scrolling
04149D             0081*  ;     VDU 23, 7, extent, direction, speed: Scroll the screen
04149D             0082*  ; inputs: a, extent; l, direction; h; speed
04149D             0083*  vdu_scroll_down:
04149D 32 B2 14 04 0084*  	ld (@extent),a
0414A1 22 B3 14 04 0085*  	ld (@dir),hl ; implicitly populates @speed
0414A5 21 B0 14 04 0086*  	ld hl,@cmd
0414A9 01 05 00 00 0087*  	ld bc,@end-@cmd
0414AD 5B DF       0088*  	rst.lil $18     ;; Sending command to VDP
0414AF C9          0089*  	ret
0414B0 17 07       0090*  @cmd:       db 23,7
0414B2 00          0091*  @extent:    db 0x00 ; 0 current text window, 1 entire screen, 2 curr gfx viewport
0414B3 00          0092*  @dir:       db 0x00 ; 0 right, 1 left, 2 down, 3 up
0414B4 00          0093*  @speed:     db 0x00 ; pixels
0414B5 00          0094*  @end:		db 0x00 ; padding
0414B6             0095*  
0414B6             0096*  ; COLOUR MODES
0414B6             0097*  ; Mode	Effect
0414B6             0098*  ; 0	Set on-screen pixel to target colour value
0414B6             0099*  ; 1	OR value with the on-screen pixel
0414B6             0100*  ; 2	AND value with the on-screen pixel
0414B6             0101*  ; 3	XOR value with the on-screen pixel
0414B6             0102*  ; 4	Invert the on-screen pixel
0414B6             0103*  ; 5	No operation
0414B6             0104*  ; 6	AND the inverse of the specified colour with the on-screen pixel
0414B6             0105*  ; 7	OR the inverse of the specified colour with the on-screen pixel
0414B6             0106*  
0414B6             0107*  ; VDU 17, colour: Define text colour (COLOUR)
0414B6             0108*  vdu_colour_text:
0414B6 32 C6 14 04 0109*  	ld (@arg),a
0414BA 21 C5 14 04 0110*  	ld hl,@cmd
0414BE 01 02 00 00 0111*  	ld bc,@end-@cmd
0414C2 5B DF       0112*  	rst.lil $18
0414C4 C9          0113*  	ret
0414C5 11          0114*  @cmd: db 17
0414C6 00          0115*  @arg: db 0
0414C7             0116*  @end:
0414C7             0117*  
0414C7             0118*  ; VDU 18, mode, colour: Set graphics colour (GCOL mode, colour)
0414C7             0119*  ; inputs: a=mode, c=colour (add 128 to set background colour)
0414C7             0120*  vdu_gcol:
0414C7 32 DC 14 04 0121*  	ld (@mode),a
0414CB 79          0122*      ld a,c
0414CC 32 DD 14 04 0123*      ld (@col),a
0414D0 21 DB 14 04 0124*  	ld hl,@cmd
0414D4 01 03 00 00 0125*  	ld bc,@end-@cmd
0414D8 5B DF       0126*  	rst.lil $18
0414DA C9          0127*  	ret
0414DB 12          0128*  @cmd:  db 18
0414DC 00          0129*  @mode: db 0
0414DD 00          0130*  @col:  db 0
0414DE             0131*  @end:
0414DE             0132*  
0414DE             0133*  
0414DE             0134*  ; VDU 28, left, bottom, right, top: Set text viewport **
0414DE             0135*  ; MIND THE LITTLE-ENDIANESS
0414DE             0136*  ; inputs: c=left,b=bottom,e=right,d=top
0414DE             0137*  ; outputs; nothing
0414DE             0138*  ; destroys: a might make it out alive
0414DE             0139*  vdu_set_txt_viewport:
0414DE ED 43 F4 14 0140*      ld (@lb),bc
       04          
0414E3 ED 53 F6 14 0141*  	ld (@rt),de
       04          
0414E8 21 F3 14 04 0142*  	ld hl,@cmd
0414EC 01 05 00 00 0143*  	ld bc,@end-@cmd
0414F0 5B DF       0144*  	rst.lil $18
0414F2 C9          0145*  	ret
0414F3 1C          0146*  @cmd:   db 28 ; set text viewport command
0414F4 00 00       0147*  @lb: 	dw 0x0000 ; set by bc
0414F6 00 00       0148*  @rt: 	dw 0x0000 ; set by de
0414F8 00          0149*  @end:   db 0x00	  ; padding
0414F9             0150*  
0414F9             0151*  ; Wait for VBLANK interrupt
0414F9             0152*  vdu_vblank:
0414F9 DD E5       0153*      PUSH 	IX
0414FB             0154*  	MOSCALL	mos_sysvars
0414FB 3E 08       0001*M 			LD	A, function
0414FD 5B CF       0002*M 			RST.LIL	08h
0414FF DD 7E 00    0155*  	LD	A, (IX + sysvar_time + 0)
041502             0156*  @wait:
041502 DD BE 00    0157*      CP 	A, (IX + sysvar_time + 0)
041505 28 FB       0158*      JR	Z, @wait
041507 DD E1       0159*      POP	IX
041509 C9          0160*      RET
04150A             0161*  
04150A             0162*  ; VDU 29, x; y;: Set graphics origin
04150A             0163*  ; This command sets the graphics origin.
04150A             0164*  ; The origin is the point on the screen where the coordinates (0,0) are located.
04150A             0165*  ; inputs: bc=x0,de=y0
04150A             0166*  ; outputs; nothing
04150A             0167*  ; destroys: a might make it out alive
04150A             0168*  vdu_set_gfx_origin:
04150A ED 43 20 15 0169*      ld (@x0),bc
       04          
04150F ED 53 22 15 0170*      ld (@y0),de
       04          
041514 21 1F 15 04 0171*      ld hl,@cmd
041518 01 05 00 00 0172*      ld bc,@end-@cmd
04151C 5B DF       0173*      rst.lil $18
04151E C9          0174*      ret
04151F 1D          0175*  @cmd:   db 29 ; set graphics origin command
041520 00 00       0176*  @x0: 	dw 0x0000 ; set by bc
041522 00 00       0177*  @y0: 	dw 0x0000 ; set by de
041524 00          0178*  @end:   db 0x00	  ; padding
041525             0179*  
041525             0180*  ; VDU 24, left; bottom; right; top;: Set graphics viewport
041525             0181*  ; NOTE: the order of the y-coordinate parameters are inverted
041525             0182*  ; 	because we have turned off logical screen scaling
041525             0183*  ; inputs: bc=x0,de=y0,ix=x1,iy=y1
041525             0184*  ; outputs; nothing
041525             0185*  ; destroys: a might make it out alive
041525             0186*  vdu_set_gfx_viewport:
041525 ED 43 45 15 0187*      ld (@x0),bc
       04          
04152A FD 22 47 15 0188*      ld (@y1),iy
       04          
04152F DD 22 49 15 0189*  	ld (@x1),ix
       04          
041534 ED 53 4B 15 0190*  	ld (@y0),de
       04          
041539 21 44 15 04 0191*  	ld hl,@cmd
04153D 01 09 00 00 0192*  	ld bc,@end-@cmd
041541 5B DF       0193*  	rst.lil $18
041543 C9          0194*  	ret
041544 18          0195*  @cmd:   db 24 ; set graphics viewport command
041545 00 00       0196*  @x0: 	dw 0x0000 ; set by bc
041547 00 00       0197*  @y1: 	dw 0x0000 ; set by iy
041549 00 00       0198*  @x1: 	dw 0x0000 ; set by ix
04154B 00 00       0199*  @y0: 	dw 0x0000 ; set by de
04154D 00          0200*  @end:   db 0x00	  ; padding
04154E             0201*  
04154E             0202*  ; SCREEN MODES
04154E             0203*  ; ===============================
04154E             0204*  ; Mode  Horz  Vert  Cols  Refresh
04154E             0205*  ; ---   ----  ----  ----  -------
04154E             0206*  ; 11    320   240   2     60hz
04154E             0207*  ; 139   320   240   2     60hz
04154E             0208*  ; 23    512   384   2     60hz
04154E             0209*  ; 151   512   384   2     60hz
04154E             0210*  ; 6     640   240   2     60hz
04154E             0211*  ; 134   640   240   2     60hz
04154E             0212*  ; 2     640   480   2     60hz
04154E             0213*  ; 130   640   480   2     60hz
04154E             0214*  ; 17    800   600   2     60hz
04154E             0215*  ; 145   800   600   2     60hz
04154E             0216*  ; 18    1024  768   2     60hz
04154E             0217*  ; 146   1024  768   2     60hz
04154E             0218*  ; ---   ----  ----  ----  -------
04154E             0219*  ; 10    320   240   4     60hz
04154E             0220*  ; 138   320   240   4     60hz
04154E             0221*  ; 22    512   384   4     60hz
04154E             0222*  ; 150   512   384   4     60hz
04154E             0223*  ; 5     640   240   4     60hz
04154E             0224*  ; 133   640   240   4     60hz
04154E             0225*  ; 1     640   480   4     60hz
04154E             0226*  ; 129   640   480   4     60hz
04154E             0227*  ; 16    800   600   4     60hz
04154E             0228*  ; 19    1024  768   4     60hz
04154E             0229*  ; ---   ----  ----  ----  -------
04154E             0230*  ; 9     320   240   16    60hz
04154E             0231*  ; 137   320   240   16    60hz
04154E             0232*  ; 21    512   384   16    60hz
04154E             0233*  ; 149   512   384   16    60hz
04154E             0234*  ; 4     640   240   16    60hz
04154E             0235*  ; 132   640   240   16    60hz
04154E             0236*  ; 0     640   480   16    60hz
04154E             0237*  ; 7     n/a   n/a   16    60hz
04154E             0238*  ; ---   ----  ----  ----  -------
04154E             0239*  ; 8     320   240   64    60hz
04154E             0240*  ; 136   320   240   64    60hz
04154E             0241*  ; 20    512   384   64    60hz
04154E             0242*  ; 3     640   240   64    60hz
04154E             0243*  ; ---   ----  ----  ----  -------
04154E             0244*  vdu_set_screen_mode:
04154E 32 5E 15 04 0245*  	ld (@arg),a
041552 21 5D 15 04 0246*  	ld hl,@cmd
041556 01 02 00 00 0247*  	ld bc,@end-@cmd
04155A 5B DF       0248*  	rst.lil $18
04155C C9          0249*  	ret
04155D 16          0250*  @cmd: db 22 ; set screen mode
04155E 00          0251*  @arg: db 0  ; screen mode parameter
04155F             0252*  @end:
04155F             0253*  
04155F             0254*  ; VDU 23, 0, &C0, n: Turn logical screen scaling on and off *
04155F             0255*  ; inputs: a is scaling mode, 1=on, 0=off
04155F             0256*  ; note: default setting on boot is scaling ON
04155F             0257*  vdu_set_scaling:
04155F 32 71 15 04 0258*  	ld (@arg),a
041563 21 6E 15 04 0259*  	ld hl,@cmd
041567 01 04 00 00 0260*  	ld bc,@end-@cmd
04156B 5B DF       0261*  	rst.lil $18
04156D C9          0262*  	ret
04156E 17 00 C0    0263*  @cmd: db 23,0,0xC0
041571 00          0264*  @arg: db 0  ; scaling on/off
041572             0265*  @end:
041572             0266*  
041572             0267*  ; VDU 23, 27, &20, bufferId; : Select bitmap (using a buffer ID)
041572             0268*  ; inputs: hl=bufferId
041572             0269*  vdu_buff_select:
041572 22 84 15 04 0270*  	ld (@bufferId),hl
041576 21 81 15 04 0271*  	ld hl,@cmd
04157A 01 05 00 00 0272*  	ld bc,@end-@cmd
04157E 5B DF       0273*  	rst.lil $18
041580 C9          0274*  	ret
041581 17 1B 20    0275*  @cmd: db 23,27,0x20
041584 00 00       0276*  @bufferId: dw 0x0000
041586 00          0277*  @end: db 0x00 ; padding
041587             0278*  
041587             0279*  ; VDU 23, 27, &21, w; h; format: Create bitmap from selected buffer
041587             0280*  ; inputs: a=format; bc=width; de=height
041587             0281*  ; prerequisites: buffer selected by vdu_bmp_select or vdu_buff_select
041587             0282*  ; formats: https://agonconsole8.github.io/agon-docs/VDP---Bitmaps-API.html
041587             0283*  ; 0 	RGBA8888 (4-bytes per pixel)
041587             0284*  ; 1 	RGBA2222 (1-bytes per pixel)
041587             0285*  ; 2 	Mono/Mask (1-bit per pixel)
041587             0286*  ; 3 	Reserved for internal use by VDP (“native” format)
041587             0287*  vdu_bmp_create:
041587 ED 43 A3 15 0288*      ld (@width),bc
       04          
04158C ED 53 A5 15 0289*      ld (@height),de
       04          
041591 32 A7 15 04 0290*      ld (@fmt),a
041595 21 A0 15 04 0291*  	ld hl,@cmd
041599 01 08 00 00 0292*  	ld bc,@end-@cmd
04159D 5B DF       0293*  	rst.lil $18
04159F C9          0294*  	ret
0415A0 17 1B 21    0295*  @cmd:       db 23,27,0x21
0415A3 00 00       0296*  @width:     dw 0x0000
0415A5 00 00       0297*  @height:    dw 0x0000
0415A7 00          0298*  @fmt:       db 0x00
0415A8             0299*  @end:
0415A8             0300*  
0415A8             0301*  ; load an rgba2222 image file to a working buffer and make it an rgba8888 bitmap in a target buffer
0415A8             0302*  ; inputs: bc,de image width,height ; hl = targetBufferId ; ix = file size ; iy = pointer to filename
0415A8             0303*  vdu_load_img_rgba2_to_8:
0415A8             0304*  ; backup the target buffer id and image dimensions
0415A8 E5          0305*      push hl
0415A9 D5          0306*      push de
0415AA C5          0307*      push bc
0415AB             0308*  ; load the rgba2 image to working buffer 65534
0415AB 21 FE FF 00 0309*      ld hl,65534 ; temporary working buffer id
0415AF CD B2 16 04 0310*  	call vdu_load_buffer_from_file
0415B3             0311*  ; restore the image dimensions and target buffer id
0415B3 C1          0312*      pop bc
0415B4 D1          0313*      pop de
0415B5 E1          0314*      pop hl
0415B6             0315*  ; fall through to vdu_rgba2_to_8
0415B6             0316*  
0415B6             0317*  ; https://discord.com/channels/1158535358624039014/1158536711148675072/1257757461729771771
0415B6             0318*  ; ok, so the "expand bitmap" can be used, when coupled with a "reverse" - the expanded bitmap _doesn't_ come out "right" otherwise, cos of endian-ness
0415B6             0319*  ; the "expand bitmap" command is:
0415B6             0320*  ; VDU 23,0,&A0,targetBufferID%;&48,2,sourceBufferId%;0,&7F,&BF,&FF
0415B6             0321*  ; and then to reverse the byte order to fix endian-ness:
0415B6             0322*  ; VDU 23,0,&A0,targetBufferID%;24,4,4;
0415B6             0323*  ; finally you'd need to set that buffer to be an RGBA8888 format bitmap:
0415B6             0324*  ; VDU 23,27,&20,targetBufferID%;
0415B6             0325*  ; VDU 23,27,&21,width%;height%;0
0415B6             0326*  ; -------------------------------------------------------------------
0415B6             0327*  ; inputs: bc,de image width,height ; hl = targetBufferId
0415B6             0328*  ; prerequisites: rgba2 image data loaded into workingBufferId 65534
0415B6             0329*  vdu_rgba2_to_8:
0415B6             0330*  ; load the image dimensions and buffer id parameters
0415B6 ED 43 12 16 0331*      ld (@width),bc
       04          
0415BB ED 53 14 16 0332*      ld (@height),de
       04          
0415C0 22 F7 15 04 0333*      ld (@bufferId0),hl
0415C4 22 04 16 04 0334*      ld (@bufferId2),hl
0415C8 22 0D 16 04 0335*      ld (@bufferId1),hl
0415CC             0336*  ; clean up bytes that got stomped on by the ID loads
0415CC 3E 48       0337*      ld a,0x48
0415CE 32 F9 15 04 0338*      ld (@bufferId0+2),a
0415D2 3E 17       0339*      ld a,23
0415D4 32 0F 16 04 0340*      ld (@bufferId1+2),a
0415D8 3E 18       0341*      ld a,24
0415DA 32 06 16 04 0342*      ld (@bufferId2+2),a
0415DE AF          0343*      xor a
0415DF 32 16 16 04 0344*      ld (@height+2),a
0415E3             0345*  ; send the vdu command strings
0415E3 21 EE 15 04 0346*      ld hl,@beg
0415E7 01 29 00 00 0347*      ld bc,@end-@beg
0415EB 5B DF       0348*      rst.lil $18
0415ED C9          0349*      ret
0415EE             0350*  @beg:
0415EE             0351*  ; Command 14: Consolidate blocks in a buffer
0415EE             0352*  ; VDU 23, 0, &A0, bufferId; 14
0415EE 17 00 A0    0353*      db 23,0,0xA0
0415F1 FE FF       0354*      dw 65534 ; workingBufferId
0415F3 0E          0355*      db 14 ; consolidate blocks
0415F4             0356*  ; the "expand bitmap" command is:
0415F4             0357*  ; VDU 23,0,&A0,targetBufferID%;&48,2,sourceBufferId%;0,&7F,&BF,&FF
0415F4 17 00 A0    0358*      db 23,0,0xA0
0415F7 00 00       0359*  @bufferId0: dw 0x0000 ; targetBufferId
0415F9 48          0360*      db 0x48 ; given as decimal command 72 in the docs
0415FA 02          0361*      db 2 ; options mask: %00000011 is the number of bits per pixel in the source bitmap
0415FB FE FF       0362*      dw 65534 ; sourceBufferId
0415FD 00 7F BF FF 0363*      db 0x00,0x7F,0xBF,0xFF ; expanding to bytes by bit-shifting?
041601             0364*  ; reverse the byte order to fix endian-ness:
041601             0365*  ; Command 24: Reverse the order of data of blocks within a buffer
041601             0366*  ; VDU 23, 0, &A0, bufferId; 24, options, [valueSize;] [chunkSize;]
041601             0367*  ; VDU 23,0,&A0,targetBufferID%;24,4,4;
041601 17 00 A0    0368*      db 23,0,0xA0
041604 00 00       0369*  @bufferId2:    dw 0x0000 ; targetBufferId
041606 18          0370*      db 24 ; reverse byte order
041607 04          0371*      db 4 ; option: Reverse data of the value size within chunk of data of the specified size
041608 04 00       0372*      dw 4 ; size (4 bytes)
04160A             0373*  ; finally you'd need to set that buffer to be an RGBA8888 format bitmap:
04160A             0374*  ; VDU 23,27,&20,targetBufferID%;
04160A 17 1B 20    0375*      db 23,27,0x20 ; select bitmap
04160D 00 00       0376*  @bufferId1: dw 0x0000 ; targetBufferId
04160F             0377*  ; VDU 23,27,&21,width%;height%;0
04160F 17 1B 21    0378*      db 23,27,0x21 ; create bitmap from buffer
041612 00 00       0379*  @width: dw 0x0000
041614 00 00       0380*  @height: dw 0x0000
041616 00          0381*      db 0x00 ; rgba8888 format
041617             0382*  @end:
041617             0383*  
041617             0384*  ; scratch variables
041617 00 00 00    0385*  bufferId0: dl 0x000000
04161A 00 00 00    0386*  bufferId1: dl 0x000000
04161D             0387*  
04161D             0388*  ; load a vdu buffer from local memory
04161D             0389*  ; inputs: hl = bufferId ; bc = length ; de = pointer to data
04161D             0390*  vdu_load_buffer:
04161D ED 43 46 16 0391*      ld (@length),bc
       04          
041622 D5          0392*      push de ; save data pointer
041623             0393*  ; send the vdu command string
041623 7D          0394*      ld a,l
041624 32 43 16 04 0395*      ld (@bufferId),a
041628 7C          0396*      ld a,h
041629 32 44 16 04 0397*      ld (@bufferId+1),a
04162D 21 40 16 04 0398*      ld hl,@cmd
041631 01 08 00 00 0399*      ld bc,@end-@cmd
041635 5B DF       0400*      rst.lil $18
041637             0401*  ; send the buffer data
041637 E1          0402*      pop hl ; pointer to data
041638 ED 4B 46 16 0403*      ld bc,(@length)
       04          
04163D 5B DF       0404*      rst.lil $18 ; send it
04163F C9          0405*      ret
041640             0406*  ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
041640 17 00 A0    0407*  @cmd:       db 23,0,0xA0
041643 00 00       0408*  @bufferId:	dw 0x0000
041645 00          0409*  		    db 0 ; load buffer
041646 00 00       0410*  @length:	dw 0x0000
041648 00          0411*  @end: db 0 ; padding
041649             0412*  
041649             0413*  ; clear a buffer
041649             0414*  ; inputs: hl = bufferId
041649             0415*  vdu_clear_buffer:
041649 7D          0416*      ld a,l
04164A 32 61 16 04 0417*      ld (@bufferId),a
04164E 7C          0418*      ld a,h
04164F 32 62 16 04 0419*      ld (@bufferId+1),a
041653 21 5E 16 04 0420*      ld hl,@cmd
041657 01 06 00 00 0421*      ld bc,@end-@cmd
04165B 5B DF       0422*      rst.lil $18
04165D C9          0423*      ret
04165E 17 00 A0    0424*  @cmd:       db 23,0,0xA0
041661 00 00       0425*  @bufferId:	dw 0x0000
041663 02          0426*  		    db 2 ; clear buffer
041664             0427*  @end:
041664             0428*  
041664             0429*  vdu_clear_all_buffers:
041664             0430*  ; clear all buffers
041664 21 6F 16 04 0431*      ld hl,@beg
041668 01 06 00 00 0432*      ld bc,@end-@beg
04166C 5B DF       0433*      rst.lil $18
04166E C9          0434*      ret
04166F 17 00 A0    0435*  @beg: db 23,0,$A0
041672 FF FF       0436*        dw -1 ; clear all buffers
041674 02          0437*        db 2  ; command 2: clear a buffer
041675             0438*  @end:
041675             0439*  
041675             0440*  ; Command 14: Consolidate blocks in a buffer
041675             0441*  vdu_consolidate_buffer:
041675             0442*  ; set parameters for vdu call
041675 7D          0443*      ld a,l
041676 32 8D 16 04 0444*      ld (@bufferId),a
04167A 7C          0445*      ld a,h
04167B 32 8E 16 04 0446*      ld (@bufferId+1),a
04167F 21 8A 16 04 0447*      ld hl,@beg
041683 01 06 00 00 0448*      ld bc,@end-@beg
041687 5B DF       0449*      rst.lil $18
041689 C9          0450*      ret
04168A             0451*  ; VDU 23, 0, &A0, bufferId; 14
04168A 17 00 A0    0452*  @beg: db 23,0,0xA0
04168D 00 00       0453*  @bufferId: dw 0x0000
04168F 0E          0454*             db 14
041690             0455*  @end:
041690             0456*  
041690             0457*  ; load an image file to a buffer and make it a bitmap
041690             0458*  ; inputs: a = image type ; bc,de image width,height ; hl = bufferId ; ix = file size ; iy = pointer to filename
041690             0459*  vdu_load_img:
041690             0460*  ; back up image type and dimension parameters
041690 22 17 16 04 0461*      ld (bufferId0),hl
041694 F5          0462*      push af
041695 C5          0463*  	push bc
041696 D5          0464*  	push de
041697             0465*  ; load the image
041697 CD B2 16 04 0466*  	call vdu_load_buffer_from_file
04169B             0467*  ; now make it a bitmap
04169B 2A 17 16 04 0468*      ld hl,(bufferId0)
04169F CD 75 16 04 0469*      call vdu_consolidate_buffer
0416A3 2A 17 16 04 0470*      ld hl,(bufferId0)
0416A7 CD 72 15 04 0471*      call vdu_buff_select
0416AB D1          0472*  	pop de ; image height
0416AC C1          0473*  	pop bc ; image width
0416AD F1          0474*  	pop af ; image type
0416AE C3 87 15 04 0475*  	jp vdu_bmp_create ; will return to caller from there
0416B2             0476*  
0416B2             0477*  ; inputs: hl = bufferId; iy = pointer to filename
0416B2             0478*  vdu_load_buffer_from_file:
0416B2 22 17 16 04 0479*      ld (bufferId0),hl
0416B6             0480*  
0416B6             0481*  ; clear target buffer
0416B6 CD 49 16 04 0482*      call vdu_clear_buffer
0416BA             0483*  
0416BA             0484*  ; open the file in read mode
0416BA             0485*  ; Open a file
0416BA             0486*  ; HLU: Filename
0416BA             0487*  ;   C: Mode
0416BA             0488*  ; Returns:
0416BA             0489*  ;   A: Filehandle, or 0 if couldn't open
0416BA FD E5       0490*  	push iy ; pointer to filename
0416BC E1          0491*  	pop hl
0416BD 0E 01       0492*  	ld c,fa_read
0416BF             0493*      MOSCALL mos_fopen
0416BF 3E 0A       0001*M 			LD	A, function
0416C1 5B CF       0002*M 			RST.LIL	08h
0416C3 32 FE 16 04 0494*      ld (@filehandle),a
0416C7             0495*  
0416C7             0496*  @read_file:
0416C7             0497*  ; Read a block of data from a file
0416C7             0498*  ;   C: Filehandle
0416C7             0499*  ; HLU: Pointer to where to write the data to
0416C7             0500*  ; DEU: Number of bytes to read
0416C7             0501*  ; Returns:
0416C7             0502*  ; DEU: Number of bytes read
0416C7 3A FE 16 04 0503*      ld a,(@filehandle)
0416CB 4F          0504*      ld c,a
0416CC 21 00 E0 B7 0505*      ld hl,filedata
0416D0 11 00 20 00 0506*      ld de,8192 ; max we can read into onboard sram at one time
0416D4             0507*      MOSCALL mos_fread
0416D4 3E 1A       0001*M 			LD	A, function
0416D6 5B CF       0002*M 			RST.LIL	08h
0416D8             0508*  
0416D8             0509*  ; test de for zero bytes read
0416D8 21 00 00 00 0510*      ld hl,0
0416DC AF          0511*      xor a ; clear carry
0416DD ED 52       0512*      sbc hl,de
0416DF CA F5 16 04 0513*      jp z,@close_file
0416E3             0514*  
0416E3             0515*  ; load a vdu buffer from local memory
0416E3             0516*  ; inputs: hl = bufferId ; bc = length ; de = pointer to data
0416E3 2A 17 16 04 0517*      ld hl,(bufferId0)
0416E7 D5          0518*      push de ; chunksize
0416E8 C1          0519*      pop bc
0416E9 11 00 E0 B7 0520*      ld de,filedata
0416ED CD 1D 16 04 0521*      call vdu_load_buffer
0416F1             0522*  
0416F1             0523*  ; read the next block
0416F1 C3 C7 16 04 0524*      jp @read_file
0416F5             0525*  
0416F5             0526*  ; close the file
0416F5             0527*  @close_file:
0416F5 3A FE 16 04 0528*      ld a,(@filehandle)
0416F9             0529*      MOSCALL mos_fclose
0416F9 3E 0B       0001*M 			LD	A, function
0416FB 5B CF       0002*M 			RST.LIL	08h
0416FD C9          0530*      ret ; vdu_load_buffer_from_file
0416FE             0531*  
0416FE 00          0532*  @filehandle: db 0 ; file handle
0416FF 00 00 00    0533*  @fil: dl 0 ; pointer to FIL struct
041702             0534*  
041702 00 00 00    0535*  @chunkpointer: dl 0 ; pointer to current chunk
041705             0536*  
041705             0537*  ; File information structure (FILINFO)
041705             0538*  @filinfo:
041705 00 00 00 00 0539*  @filinfo_fsize:    blkb 4, 0   ; File size (4 bytes)
041709 00 00       0540*  @filinfo_fdate:    blkb 2, 0   ; Modified date (2 bytes)
04170B 00 00       0541*  @filinfo_ftime:    blkb 2, 0   ; Modified time (2 bytes)
04170D 00          0542*  @filinfo_fattrib:  blkb 1, 0   ; File attribute (1 byte)
04170E 00 00 00 00 0543*  @filinfo_altname:  blkb 13, 0  ; Alternative file name (13 bytes)
       00 00 00 00 
       00 00 00 00 
       00          
04171B 00 00 00 00 0544*  @filinfo_fname:    blkb 256, 0 ; Primary file name (256 bytes)
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
04181B             0038       include "vdu_fonts.inc"
04181B             0001*  ; select font
04181B             0002*  ; inputs: hl = bufferId, a = font flags
04181B             0003*  ; Flags:
04181B             0004*  ; Bit	Description
04181B             0005*  ; 0	Adjust cursor position to ensure text baseline is aligned
04181B             0006*  ;   0: Do not adjust cursor position (best for changing font on a new line)
04181B             0007*  ;   1: Adjust cursor position (best for changing font in the middle of a line)
04181B             0008*  ; 1-7	Reserved for future use
04181B             0009*  ; VDU 23, 0, &95, 0, bufferId; flags: Select font
04181B             0010*  vdu_font_select:
04181B 22 32 18 04 0011*      ld (@bufferId),hl
04181F 32 34 18 04 0012*      ld (@flags),a
041823 21 2E 18 04 0013*      ld hl,@cmd
041827 01 07 00 00 0014*      ld bc,@end-@cmd
04182B 5B DF       0015*      rst.lil $18
04182D C9          0016*      ret
04182E 17 00 95 00 0017*  @cmd: db 23, 0, 0x95, 0
041832 00 00       0018*  @bufferId: dw 0x0000
041834 00          0019*  @flags: db 0x00
041835             0020*  @end:
041835             0021*  
041835             0022*  ; create font from buffer
041835             0023*  ; inputs: hl = bufferId, e = width, d = height, d = ascent, a = flags
041835             0024*  ; VDU 23, 0, &95, 1, bufferId; width, height, ascent, flags: Create font from buffer
041835             0025*  vdu_font_create:
041835 22 5A 18 04 0026*      ld (@bufferId),hl
041839 ED 53 5C 18 0027*      ld (@width),de ; also loads height
       04          
04183E 32 5F 18 04 0028*      ld (@flags),a
041842 7A          0029*      ld a,d ; height
041843 32 5E 18 04 0030*      ld (@ascent),a ; ascent = height
041847             0031*  ; consolidate buffer
041847 CD 75 16 04 0032*      call vdu_consolidate_buffer
04184B             0033*  ; create font
04184B 21 56 18 04 0034*      ld hl,@cmd
04184F 01 0A 00 00 0035*      ld bc,@end-@cmd
041853 5B DF       0036*      rst.lil $18
041855 C9          0037*      ret
041856 17 00 95 01 0038*  @cmd: db 23, 0, 0x95, 1
04185A 00 00       0039*  @bufferId: dw 0x0000
04185C 00          0040*  @width: db 0x00
04185D 00          0041*  @height: db 0x00
04185E 00          0042*  @ascent: db 0x00
04185F 00          0043*  @flags: db 0x00
041860             0044*  @end:
041860             0045*  
041860             0046*  ; set or adjust font property
041860             0047*  ; inputs: hl = bufferId, a = field, de = value
041860             0048*  ; VDU 23, 0, &95, 2, bufferId; field, value;: Set or adjust font property
041860             0049*  vdu_font_property:
041860 22 7C 18 04 0050*      ld (@bufferId),hl
041864 32 7E 18 04 0051*      ld (@field),a
041868 ED 53 7F 18 0052*      ld (@value),de
       04          
04186D 21 78 18 04 0053*      ld hl,@cmd
041871 01 09 00 00 0054*      ld bc,@end-@cmd
041875 5B DF       0055*      rst.lil $18
041877 C9          0056*      ret
041878 17 00 95 02 0057*  @cmd: db 23, 0, 0x95, 2
04187C 00 00       0058*  @bufferId: dw 0x0000
04187E 00          0059*  @field: db 0x00
04187F 00 00       0060*  @value: dw 0x0000
041881 00          0061*  @end: db 0x00 ; padding
041882             0062*  
041882             0063*  ; VDU 23, 0, &95, 3, bufferId; [<args>]: Reserved
041882             0064*  
041882             0065*  ; Clear/Delete font
041882             0066*  ; inputs: hl = bufferId
041882             0067*  ; VDU 23, 0, &95, 4, bufferId;: Clear/Delete font
041882             0068*  vdu_font_clear:
041882 22 95 18 04 0069*      ld (@bufferId),hl
041886 21 91 18 04 0070*      ld hl,@cmd
04188A 01 06 00 00 0071*      ld bc,@end-@cmd
04188E 5B DF       0072*      rst.lil $18
041890 C9          0073*      ret
041891 17 00 95 04 0074*  @cmd: db 23, 0, 0x95, 4
041895 00 00       0075*  @bufferId: dw 0x0000
041897 00          0076*  @end: db 0x00 ; padding
041898             0077*  
041898             0078*  ; Copy system font to buffer
041898             0079*  ; inputs: hl = bufferId
041898             0080*  ; VDU 23, 0, &95, 5, bufferId;: Copy system font to buffer
041898             0081*  vdu_font_copy_system:
041898 22 AB 18 04 0082*      ld (@bufferId),hl
04189C 21 A7 18 04 0083*      ld hl,@cmd
0418A0 01 06 00 00 0084*      ld bc,@end-@cmd
0418A4 5B DF       0085*      rst.lil $18
0418A6 C9          0086*      ret
0418A7 17 00 95 05 0087*  @cmd: db 23, 0, 0x95, 5
0418AB 00 00       0088*  @bufferId: dw 0x0000
0418AD 00          0089*  @end: db 0x00 ; padding
0418AE             0039       include "vdu_plot.inc"
0418AE             0001*  ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
0418AE             0002*  ; PLOT code 	(Decimal) 	Effect
0418AE             0003*  ; &00-&07 	0-7 	Solid line, includes both ends
0418AE             0004*  plot_sl_both: equ 0x00
0418AE             0005*  
0418AE             0006*  ; &08-&0F 	8-15 	Solid line, final point omitted
0418AE             0007*  plot_sl_first: equ 0x08
0418AE             0008*  
0418AE             0009*  ; &10-&17 	16-23 	Not supported (Dot-dash line, includes both ends, pattern restarted)
0418AE             0010*  ; &18-&1F 	24-31 	Not supported (Dot-dash line, first point omitted, pattern restarted)
0418AE             0011*  
0418AE             0012*  ; &20-&27 	32-39 	Solid line, first point omitted
0418AE             0013*  plot_sl_last: equ 0x20
0418AE             0014*  
0418AE             0015*  ; &28-&2F 	40-47 	Solid line, both points omitted
0418AE             0016*  plot_sl_none: equ 0x28
0418AE             0017*  
0418AE             0018*  ; &30-&37 	48-55 	Not supported (Dot-dash line, first point omitted, pattern continued)
0418AE             0019*  ; &38-&3F 	56-63 	Not supported (Dot-dash line, both points omitted, pattern continued)
0418AE             0020*  
0418AE             0021*  ; &40-&47 	64-71 	Point plot
0418AE             0022*  plot_pt: equ 0x40
0418AE             0023*  
0418AE             0024*  ; &48-&4F 	72-79 	Line fill left and right to non-background §§
0418AE             0025*  plot_lf_lr_non_bg: equ 0x48
0418AE             0026*  
0418AE             0027*  ; &50-&57 	80-87 	Triangle fill
0418AE             0028*  plot_tf: equ 0x50
0418AE             0029*  
0418AE             0030*  ; &58-&5F 	88-95 	Line fill right to background §§
0418AE             0031*  plot_lf_r_bg: equ 0x58
0418AE             0032*  
0418AE             0033*  ; &60-&67 	96-103 	Rectangle fill
0418AE             0034*  plot_rf: equ 0x60
0418AE             0035*  
0418AE             0036*  ; &68-&6F 	104-111 	Line fill left and right to foreground §§
0418AE             0037*  plot_lf_lr_fg: equ 0x60
0418AE             0038*  
0418AE             0039*  ; &70-&77 	112-119 	Parallelogram fill
0418AE             0040*  plot_pf: equ 0x70
0418AE             0041*  
0418AE             0042*  ; &78-&7F 	120-127 	Line fill right to non-foreground §§
0418AE             0043*  plot_lf_r_non_fg: equ 0x78
0418AE             0044*  
0418AE             0045*  ; &80-&87 	128-135 	Not supported (Flood until non-background)
0418AE             0046*  ; &88-&8F 	136-143 	Not supported (Flood until foreground)
0418AE             0047*  
0418AE             0048*  ; &90-&97 	144-151 	Circle outline
0418AE             0049*  plot_co: equ 0x90
0418AE             0050*  
0418AE             0051*  ; &98-&9F 	152-159 	Circle fill
0418AE             0052*  plot_cf: equ 0x98
0418AE             0053*  
0418AE             0054*  ; &A0-&A7 	160-167 	Not supported (Circular arc)
0418AE             0055*  ; &A8-&AF 	168-175 	Not supported (Circular segment)
0418AE             0056*  ; &B0-&B7 	176-183 	Not supported (Circular sector)
0418AE             0057*  
0418AE             0058*  ; &B8-&BF 	184-191 	Rectangle copy/move
0418AE             0059*  plot_rcm: equ 0xB8
0418AE             0060*  
0418AE             0061*  ; &C0-&C7 	192-199 	Not supported (Ellipse outline)
0418AE             0062*  ; &C8-&CF 	200-207 	Not supported (Ellipse fill)
0418AE             0063*  ; &D0-&D7 	208-215 	Not defined
0418AE             0064*  ; &D8-&DF 	216-223 	Not defined
0418AE             0065*  ; &E0-&E7 	224-231 	Not defined
0418AE             0066*  
0418AE             0067*  ; &E8-&EF 	232-239 	Bitmap plot §
0418AE             0068*  plot_bmp: equ 0xE8
0418AE             0069*  
0418AE             0070*  ; &F0-&F7 	240-247 	Not defined
0418AE             0071*  ; &F8-&FF 	248-255 	Not defined
0418AE             0072*  
0418AE             0073*  ; § Support added in Agon Console8 VDP 2.1.0 §§ Support added in
0418AE             0074*  ; Agon Console8 VDP 2.2.0
0418AE             0075*  
0418AE             0076*  ; Within each group of eight plot codes, the effects are as follows:
0418AE             0077*  ; Plot code 	Effect
0418AE             0078*  ; 0 	Move relative
0418AE             0079*  mv_rel: equ 0
0418AE             0080*  
0418AE             0081*  ; 1 	Plot relative in current foreground colour
0418AE             0082*  dr_rel_fg: equ 1
0418AE             0083*  
0418AE             0084*  ; 2 	Not supported (Plot relative in logical inverse colour)
0418AE             0085*  ; 3 	Plot relative in current background colour
0418AE             0086*  dr_rel_bg: equ 3
0418AE             0087*  
0418AE             0088*  ; 4 	Move absolute
0418AE             0089*  mv_abs: equ 4
0418AE             0090*  
0418AE             0091*  ; 5 	Plot absolute in current foreground colour
0418AE             0092*  dr_abs_fg: equ 5
0418AE             0093*  
0418AE             0094*  ; 6 	Not supported (Plot absolute in logical inverse colour)
0418AE             0095*  ; 7 	Plot absolute in current background colour
0418AE             0096*  dr_abs_bg: equ 7
0418AE             0097*  
0418AE             0098*  ; Codes 0-3 use the position data provided as part of the command
0418AE             0099*  ; as a relative position, adding the position given to the current
0418AE             0100*  ; graphical cursor position. Codes 4-7 use the position data provided
0418AE             0101*  ; as part of the command as an absolute position, setting the current
0418AE             0102*  ; graphical cursor position to the position given.
0418AE             0103*  
0418AE             0104*  ; Codes 2 and 6 on Acorn systems plot using a logical inverse of the
0418AE             0105*  ; current pixel colour. These operations cannot currently be supported
0418AE             0106*  ; by the graphics system the Agon VDP uses, so these codes are not
0418AE             0107*  ; supported. Support for these codes may be added in a future version
0418AE             0108*  ; of the VDP firmware.
0418AE             0109*  
0418AE             0110*  ; 16 colour palette constants
0418AE             0111*  c_black: equ 0
0418AE             0112*  c_red_dk: equ 1
0418AE             0113*  c_green_dk: equ 2
0418AE             0114*  c_yellow_dk: equ 3
0418AE             0115*  c_blue_dk: equ 4
0418AE             0116*  c_magenta_dk: equ 5
0418AE             0117*  c_cyan_dk: equ 6
0418AE             0118*  c_grey: equ 7
0418AE             0119*  c_grey_dk: equ 8
0418AE             0120*  c_red: equ 9
0418AE             0121*  c_green: equ 10
0418AE             0122*  c_yellow: equ 11
0418AE             0123*  c_blue: equ 12
0418AE             0124*  c_magenta: equ 13
0418AE             0125*  c_cyan: equ 14
0418AE             0126*  c_white: equ 15
0418AE             0127*  
0418AE             0128*  ; VDU 25, mode, x; y;: PLOT command
0418AE             0129*  ; inputs: a=mode, bc=x0, de=y0
0418AE             0130*  vdu_plot:
0418AE 32 C8 18 04 0131*      ld (@mode),a
0418B2 ED 43 C9 18 0132*      ld (@x0),bc
       04          
0418B7 ED 53 CB 18 0133*      ld (@y0),de
       04          
0418BC 21 C7 18 04 0134*  	ld hl,@cmd
0418C0 01 06 00 00 0135*  	ld bc,@end-@cmd
0418C4 5B DF       0136*  	rst.lil $18
0418C6 C9          0137*  	ret
0418C7 19          0138*  @cmd:   db 25
0418C8 00          0139*  @mode:  db 0
0418C9 00 00       0140*  @x0: 	dw 0
0418CB 00 00       0141*  @y0: 	dw 0
0418CD 00          0142*  @end:   db 0 ; extra byte to soak up deu
0418CE             0143*  
0418CE             0144*  ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
0418CE             0145*  ; &E8-&EF 	232-239 	Bitmap plot §
0418CE             0146*  ; VDU 25, mode, x; y;: PLOT command
0418CE             0147*  ; inputs: bc=x0, de=y0
0418CE             0148*  ; prerequisites: vdu_buff_select
0418CE             0149*  vdu_plot_bmp:
0418CE ED 43 E5 18 0150*      ld (@x0),bc
       04          
0418D3 ED 53 E7 18 0151*      ld (@y0),de
       04          
0418D8 21 E3 18 04 0152*  	ld hl,@cmd
0418DC 01 06 00 00 0153*  	ld bc,@end-@cmd
0418E0 5B DF       0154*  	rst.lil $18
0418E2 C9          0155*  	ret
0418E3 19          0156*  @cmd:   db 25
0418E4 ED          0157*  @mode:  db plot_bmp+dr_abs_fg ; 0xED
0418E5 00 00       0158*  @x0: 	dw 0x0000
0418E7 00 00       0159*  @y0: 	dw 0x0000
0418E9 00          0160*  @end:   db 0x00 ; padding
0418EA             0161*  
0418EA             0162*  ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
0418EA             0163*  ; &E8-&EF 	232-239 	Bitmap plot §
0418EA             0164*  ; VDU 25, mode, x; y;: PLOT command
0418EA             0165*  ; inputs: bc=x0, de=y0
0418EA             0166*  ; USING 16.8 FIXED POINT COORDINATES
0418EA             0167*  ; inputs: ub.c is x coordinate, ud.e is y coordinate
0418EA             0168*  ;   the fractional portiion of the inputs are truncated
0418EA             0169*  ;   leaving only the 16-bit integer portion
0418EA             0170*  ; prerequisites: vdu_buff_select
0418EA             0171*  vdu_plot_bmp168:
0418EA             0172*  ; populate in the reverse of normal to keep the
0418EA             0173*  ; inputs from stomping on each other
0418EA ED 53 08 19 0174*      ld (@y0-1),de
       04          
0418EF ED 43 06 19 0175*      ld (@x0-1),bc
       04          
0418F4 3E ED       0176*      ld a,plot_bmp+dr_abs_fg ; 0xED
0418F6 32 06 19 04 0177*      ld (@mode),a ; restore the mode byte that got stomped on by bcu
0418FA 21 05 19 04 0178*  	ld hl,@cmd
0418FE 01 06 00 00 0179*  	ld bc,@end-@cmd
041902 5B DF       0180*  	rst.lil $18
041904 C9          0181*  	ret
041905 19          0182*  @cmd:   db 25
041906 ED          0183*  @mode:  db plot_bmp+dr_abs_fg ; 0xED
041907 00 00       0184*  @x0: 	dw 0x0000
041909 00 00       0185*  @y0: 	dw 0x0000
04190B             0186*  @end:  ; no padding required b/c we shifted de right
04190B             0187*  
04190B             0188*  ; draw a filled rectangle
04190B             0189*  vdu_plot_rf:
04190B ED 43 32 19 0190*      ld (@x0),bc
       04          
041910 ED 53 34 19 0191*      ld (@y0),de
       04          
041915 DD 22 38 19 0192*      ld (@x1),ix
       04          
04191A FD 22 3A 19 0193*      ld (@y1),iy
       04          
04191F 3E 19       0194*      ld a,25 ; we have to reload the 2nd plot command
041921 32 36 19 04 0195*      ld (@cmd1),a ; because the 24-bit y0 load stomped on it
041925 21 30 19 04 0196*  	ld hl,@cmd0
041929 01 0C 00 00 0197*  	ld bc,@end-@cmd0
04192D 5B DF       0198*  	rst.lil $18
04192F C9          0199*      ret
041930 19          0200*  @cmd0:  db 25 ; plot
041931 04          0201*  @arg0:  db plot_sl_both+mv_abs
041932 00 00       0202*  @x0:    dw 0x0000
041934 00 00       0203*  @y0:    dw 0x0000
041936 19          0204*  @cmd1:  db 25 ; plot
041937 65          0205*  @arg1:  db plot_rf+dr_abs_fg
041938 00 00       0206*  @x1:    dw 0x0000
04193A 00 00       0207*  @y1:    dw 0x0000
04193C 00          0208*  @end:   db 0x00 ; padding
04193D             0209*  
04193D             0210*  ; draw a filled circle
04193D             0211*  vdu_plot_cf:
04193D ED 43 64 19 0212*      ld (@x0),bc
       04          
041942 ED 53 66 19 0213*      ld (@y0),de
       04          
041947 DD 22 6A 19 0214*      ld (@x1),ix
       04          
04194C FD 22 6C 19 0215*      ld (@y1),iy
       04          
041951 3E 19       0216*      ld a,25 ; we have to reload the 2nd plot command
041953 32 68 19 04 0217*      ld (@cmd1),a ; because the 24-bit y0 load stomped on it
041957 21 62 19 04 0218*  	ld hl,@cmd0
04195B 01 0C 00 00 0219*  	ld bc,@end-@cmd0
04195F 5B DF       0220*  	rst.lil $18
041961 C9          0221*      ret
041962 19          0222*  @cmd0:  db 25 ; plot
041963 04          0223*  @arg0:  db plot_sl_both+mv_abs
041964 00 00       0224*  @x0:    dw 0x0000
041966 00 00       0225*  @y0:    dw 0x0000
041968 19          0226*  @cmd1:  db 25 ; plot
041969 9D          0227*  @arg1:  db plot_cf+dr_abs_fg
04196A 00 00       0228*  @x1:    dw 0x0000
04196C 00 00       0229*  @y1:    dw 0x0000
04196E 00          0230*  @end:   db 0x00 ; padding
04196F             0040       include "vdu_sprites.inc"
04196F             0001*  ; ; https://github.com/AgonConsole8/agon-docs/blob/main/VDP---Bitmaps-API.md
04196F             0002*  ; the VDP can support up to 256 sprites. They must be defined
04196F             0003*  ; contiguously, and so the first sprite is sprite 0.
04196F             0004*  ; (In contrast, bitmaps can have any ID from 0 to 65534.)
04196F             0005*  ; Once a selection of sprites have been defined, you can activate
04196F             0006*  ; them using the VDU 23, 27, 7, n command, where n is the number
04196F             0007*  ; of sprites to activate. This will activate the first n sprites,
04196F             0008*  ; starting with sprite 0. All sprites from 0 to n-1 must be defined.
04196F             0009*  
04196F             0010*  ; A single sprite can have multiple "frames", referring to
04196F             0011*  ; different bitmaps.
04196F             0012*  ; (These bitmaps do not need to be the same size.)
04196F             0013*  ; This allows a sprite to include an animation sequence,
04196F             0014*  ; which can be stepped through one frame at a time, or picked
04196F             0015*  ; in any order.
04196F             0016*  
04196F             0017*  ; Any format of bitmap can be used as a sprite frame. It should
04196F             0018*  ; be noted however that "native" format bitmaps are not
04196F             0019*  ; recommended for use as sprite frames, as they cannot get
04196F             0020*  ; erased from the screen. (As noted above, the "native" bitmap
04196F             0021*  ; format is not really intended for general use.) This is part
04196F             0022*  ; of why from Agon Console8 VDP 2.6.0 bitmaps captured from the
04196F             0023*  ; screen are now stored in RGBA2222 format.
04196F             0024*  
04196F             0025*  ; An "active" sprite can be hidden, so it will stop being drawn,
04196F             0026*  ; and then later shown again.
04196F             0027*  
04196F             0028*  ; Moving sprites around the screen is done by changing the
04196F             0029*  ; position of the sprite. This can be done either by setting
04196F             0030*  ; the absolute position of the sprite, or by moving the sprite
04196F             0031*  ; by a given number of pixels. (Sprites are positioned using
04196F             0032*  ; pixel coordinates, and not by the logical OS coordinate system.)
04196F             0033*  ; In the current sprite system, sprites will not update their
04196F             0034*  ; position on-screen until either another drawing operation is
04196F             0035*  ; performed or an explicit VDU 23, 27, 15 command is performed.
04196F             0036*  
04196F             0037*  ; VDU 23, 27, 4, n: Select sprite n
04196F             0038*  ; inputs: a is the 8-bit sprite id
04196F             0039*  vdu_sprite_select:
04196F 32 81 19 04 0040*      ld (@sprite),a
041973 21 7E 19 04 0041*      ld hl,@cmd
041977 01 04 00 00 0042*      ld bc,@end-@cmd
04197B 5B DF       0043*      rst.lil $18
04197D C9          0044*      ret
04197E 17 1B 04    0045*  @cmd:    db 23,27,4
041981 00          0046*  @sprite: db 0x00
041982             0047*  @end:
041982             0048*  
041982             0049*  ; VDU 23, 27, 5: Clear frames in current sprite
041982             0050*  ; inputs: none
041982             0051*  ; prerequisites: vdu_sprite_select
041982             0052*  vdu_sprite_clear_frames:
041982 21 8D 19 04 0053*      ld hl,@cmd
041986 01 03 00 00 0054*      ld bc,@end-@cmd
04198A 5B DF       0055*      rst.lil $18
04198C C9          0056*      ret
04198D 17 1B 05    0057*  @cmd: db 23,27,5
041990             0058*  @end:
041990             0059*  
041990             0060*  ; VDU 23, 27, 6, n: Add bitmap n as a frame to current sprite (where bitmap's buffer ID is 64000+n)
041990             0061*  ; inputs: a is the 8-bit bitmap number
041990             0062*  ; prerequisites: vdu_sprite_select
041990             0063*  vdu_sprite_add_bmp:
041990 32 A2 19 04 0064*      ld (@bmp),a
041994 21 9F 19 04 0065*      ld hl,@cmd
041998 01 04 00 00 0066*      ld bc,@end-@cmd
04199C 5B DF       0067*      rst.lil $18
04199E C9          0068*      ret
04199F 17 1B 06    0069*  @cmd: db 23,27,6
0419A2 00          0070*  @bmp: db 0x00
0419A3             0071*  @end:
0419A3             0072*  
0419A3             0073*  ; VDU 23, 27, 7, n: Activate n sprites
0419A3             0074*  ; inputs: a is the number of sprites to activate
0419A3             0075*  ; prerequisites: each sprite activated must have at least one frame attached to it
0419A3             0076*  vdu_sprite_activate:
0419A3 32 B5 19 04 0077*      ld (@num),a
0419A7 21 B2 19 04 0078*      ld hl,@cmd
0419AB 01 04 00 00 0079*      ld bc,@end-@cmd
0419AF 5B DF       0080*      rst.lil $18
0419B1 C9          0081*      ret
0419B2 17 1B 07    0082*  @cmd: db 23,27,7
0419B5 00          0083*  @num: db 0x00
0419B6             0084*  @end:
0419B6             0085*  
0419B6             0086*  ; VDU 23, 27, 8: Select next frame of current sprite
0419B6             0087*  ; inputs: none
0419B6             0088*  ; prerequisites: vdu_sprite_select
0419B6             0089*  vdu_sprite_next_frame:
0419B6 21 C1 19 04 0090*      ld hl,@cmd
0419BA 01 03 00 00 0091*      ld bc,@end-@cmd
0419BE 5B DF       0092*      rst.lil $18
0419C0 C9          0093*      ret
0419C1 17 1B 08    0094*  @cmd: db 23,27,8
0419C4             0095*  @end:
0419C4             0096*  
0419C4             0097*  ; VDU 23, 27, 9: Select previous frame of current sprite
0419C4             0098*  ; inputs: none
0419C4             0099*  ; prerequisites: vdu_sprite_select
0419C4             0100*  vdu_sprite_prev_frame:
0419C4 21 CF 19 04 0101*      ld hl,@cmd
0419C8 01 03 00 00 0102*      ld bc,@end-@cmd
0419CC 5B DF       0103*      rst.lil $18
0419CE C9          0104*      ret
0419CF 17 1B 09    0105*  @cmd: db 23,27,9
0419D2             0106*  @end:
0419D2             0107*  
0419D2             0108*  ; VDU 23, 27, 10, n: Select the nth frame of current sprite
0419D2             0109*  ; inputs: a is frame number to select
0419D2             0110*  ; prerequisites: vdu_sprite_select
0419D2             0111*  vdu_sprite_select_frame:
0419D2 32 E4 19 04 0112*      ld (@frame),a
0419D6 21 E1 19 04 0113*      ld hl,@cmd
0419DA 01 04 00 00 0114*      ld bc,@end-@cmd
0419DE 5B DF       0115*      rst.lil $18
0419E0 C9          0116*      ret
0419E1 17 1B 0A    0117*  @cmd:    db 23,27,10
0419E4 00          0118*  @frame:  db 0x00
0419E5             0119*  @end:
0419E5             0120*  
0419E5             0121*  ; VDU 23, 27, 11: Show current sprite
0419E5             0122*  ; inputs: none
0419E5             0123*  ; prerequisites: vdu_sprite_select
0419E5             0124*  vdu_sprite_show:
0419E5 21 F0 19 04 0125*      ld hl,@cmd
0419E9 01 03 00 00 0126*      ld bc,@end-@cmd
0419ED 5B DF       0127*      rst.lil $18
0419EF C9          0128*      ret
0419F0 17 1B 0B    0129*  @cmd: db 23,27,11
0419F3             0130*  @end:
0419F3             0131*  
0419F3             0132*  ; VDU 23, 27, 12: Hide current sprite
0419F3             0133*  ; inputs: none
0419F3             0134*  ; prerequisites: vdu_sprite_select
0419F3             0135*  vdu_sprite_hide:
0419F3 21 FE 19 04 0136*      ld hl,@cmd
0419F7 01 03 00 00 0137*      ld bc,@end-@cmd
0419FB 5B DF       0138*      rst.lil $18
0419FD C9          0139*      ret
0419FE 17 1B 0C    0140*  @cmd: db 23,27,12
041A01             0141*  @end:
041A01             0142*  
041A01             0143*  ; VDU 23, 27, 13, x; y;: Move current sprite to pixel position x, y
041A01             0144*  ; inputs: bc is x coordinate, de is y coordinate
041A01             0145*  ; prerequisites: vdu_sprite_select
041A01             0146*  vdu_sprite_move_abs:
041A01 ED 43 19 1A 0147*      ld (@xpos),bc
       04          
041A06 ED 53 1B 1A 0148*      ld (@ypos),de
       04          
041A0B 21 16 1A 04 0149*      ld hl,@cmd
041A0F 01 07 00 00 0150*      ld bc,@end-@cmd
041A13 5B DF       0151*      rst.lil $18
041A15 C9          0152*      ret
041A16 17 1B 0D    0153*  @cmd:  db 23,27,13
041A19 00 00       0154*  @xpos: dw 0x0000
041A1B 00 00       0155*  @ypos: dw 0x0000
041A1D 00          0156*  @end:  db 0x00 ; padding
041A1E             0157*  
041A1E             0158*  ; VDU 23, 27, 14, x; y;: Move current sprite by x, y pixels
041A1E             0159*  ; inputs: bc is x coordinate, de is y coordinate
041A1E             0160*  ; prerequisites: vdu_sprite_select
041A1E             0161*  vdu_sprite_move_rel:
041A1E ED 43 36 1A 0162*      ld (@dx),bc
       04          
041A23 ED 53 38 1A 0163*      ld (@dy),de
       04          
041A28 21 33 1A 04 0164*      ld hl,@cmd
041A2C 01 07 00 00 0165*      ld bc,@end-@cmd
041A30 5B DF       0166*      rst.lil $18
041A32 C9          0167*      ret
041A33 17 1B 0E    0168*  @cmd: db 23,27,14
041A36 00 00       0169*  @dx:  dw 0x0000
041A38 00 00       0170*  @dy:  dw 0x0000
041A3A 00          0171*  @end: db 0x00 ; padding
041A3B             0172*  
041A3B             0173*  ; VDU 23, 27, 13, x; y;: Move current sprite to pixel position x, y
041A3B             0174*  ; USING 16.8 FIXED POINT COORDINATES
041A3B             0175*  ; inputs: ub.c is x coordinate, ud.e is y coordinate
041A3B             0176*  ;   the fractional portiion of the inputs are truncated
041A3B             0177*  ;   leaving only the 16-bit integer portion
041A3B             0178*  ; prerequisites: vdu_sprite_select
041A3B             0179*  vdu_sprite_move_abs168:
041A3B             0180*  ; offset inputs by the gfx origin
041A3B             0181*  ; y coordinate
041A3B 21 00 00 00 0182*      ld hl,origin_top*256
041A3F 19          0183*      add hl,de
041A40 22 62 1A 04 0184*      ld (@ypos-1),hl
041A44             0185*  ; x coordinate
041A44 21 00 80 00 0186*      ld hl,origin_left*256
041A48 09          0187*      add hl,bc
041A49 22 60 1A 04 0188*      ld (@xpos-1),hl
041A4D             0189*  ; prepare vdu command
041A4D 3E 0D       0190*      ld a,13       ; restore the final byte of the command
041A4F 32 60 1A 04 0191*      ld (@cmd+2),a ; string that got stomped on by bcu
041A53 21 5E 1A 04 0192*      ld hl,@cmd
041A57 01 07 00 00 0193*      ld bc,@end-@cmd
041A5B 5B DF       0194*      rst.lil $18
041A5D C9          0195*      ret
041A5E 17 1B 0D    0196*  @cmd:  db 23,27,13
041A61 00 00       0197*  @xpos: dw 0x0000
041A63 00 00       0198*  @ypos: dw 0x0000
041A65             0199*  @end:  ; no padding required b/c we shifted de right
041A65             0200*  
041A65             0201*  ; VDU 23, 27, 14, x; y;: Move current sprite by x, y pixels
041A65             0202*  ; USING 16.8 FIXED POINT COORDINATES
041A65             0203*  ; inputs: ub.c is dx, ud.e is dy
041A65             0204*  ;   the fractional portiion of the inputs are truncated
041A65             0205*  ;   leaving only the 16-bit integer portion
041A65             0206*  ; prerequisites: vdu_sprite_select
041A65             0207*  vdu_sprite_move_rel168:
041A65             0208*  ; populate in the reverse of normal to keep the
041A65             0209*  ; inputs from stomping on each other
041A65 ED 53 84 1A 0210*      ld (@dy-1),de
       04          
041A6A ED 43 82 1A 0211*      ld (@dx-1),bc
       04          
041A6F 3E 0E       0212*      ld a,14       ; restore the final byte of the command
041A71 32 82 1A 04 0213*      ld (@cmd+2),a ; string that got stomped on by bcu
041A75 21 80 1A 04 0214*      ld hl,@cmd
041A79 01 07 00 00 0215*      ld bc,@end-@cmd
041A7D 5B DF       0216*      rst.lil $18
041A7F C9          0217*      ret
041A80 17 1B 0E    0218*  @cmd:  db 23,27,14
041A83 00 00       0219*  @dx: dw 0x0000
041A85 00 00       0220*  @dy: dw 0x0000
041A87             0221*  @end:  ; no padding required b/c we shifted de right
041A87             0222*  
041A87             0223*  ; VDU 23, 27, 15: Update the sprites in the GPU
041A87             0224*  ; inputs: none
041A87             0225*  vdu_sprite_update:
041A87 21 92 1A 04 0226*      ld hl,@cmd
041A8B 01 03 00 00 0227*      ld bc,@end-@cmd
041A8F 5B DF       0228*      rst.lil $18
041A91 C9          0229*      ret
041A92 17 1B 0F    0230*  @cmd: db 23,27,15
041A95             0231*  @end:
041A95             0232*  
041A95             0233*  ; VDU 23, 27, 16: Reset bitmaps and sprites and clear all data
041A95             0234*  ; inputs: none
041A95             0235*  vdu_sprite_bmp_reset:
041A95 21 A0 1A 04 0236*      ld hl,@cmd
041A99 01 03 00 00 0237*      ld bc,@end-@cmd
041A9D 5B DF       0238*      rst.lil $18
041A9F C9          0239*      ret
041AA0 17 1B 10    0240*  @cmd: db 23,27,16
041AA3             0241*  @end:
041AA3             0242*  
041AA3             0243*  ; VDU 23, 27, 17: Reset sprites (only) and clear all data
041AA3             0244*  ; inputs: none
041AA3             0245*  vdu_sprite_reset:
041AA3 21 AE 1A 04 0246*      ld hl,@cmd
041AA7 01 03 00 00 0247*      ld bc,@end-@cmd
041AAB 5B DF       0248*      rst.lil $18
041AAD C9          0249*      ret
041AAE 17 1B 11    0250*  @cmd: db 23,27,17
041AB1             0251*  @end:
041AB1             0252*  
041AB1             0253*  ; VDU 23, 27, 18, n: Set the current sprite GCOL paint mode to n **
041AB1             0254*  ; inputs: a is the GCOL paint mode
041AB1             0255*  ; prerequisites: vdu_sprite_select
041AB1             0256*  vdu_sprite_set_gcol:
041AB1 32 C3 1A 04 0257*      ld (@mode),a
041AB5 21 C0 1A 04 0258*      ld hl,@cmd
041AB9 01 04 00 00 0259*      ld bc,@end-@cmd
041ABD 5B DF       0260*      rst.lil $18
041ABF C9          0261*      ret
041AC0 17 1B 12    0262*  @cmd:  db 23,27,18
041AC3 00          0263*  @mode: db 0x00
041AC4             0264*  @end:
041AC4             0265*  
041AC4             0266*  ; VDU 23, 27, &26, n;: Add bitmap n as a frame to current sprite using a 16-bit buffer ID
041AC4             0267*  ; inputs: hl=bufferId
041AC4             0268*  ; prerequisites: vdu_sprite_select
041AC4             0269*  vdu_sprite_add_buff:
041AC4 22 D6 1A 04 0270*      ld (@bufferId),hl
041AC8 21 D3 1A 04 0271*      ld hl,@cmd
041ACC 01 05 00 00 0272*      ld bc,@end-@cmd
041AD0 5B DF       0273*      rst.lil $18
041AD2 C9          0274*      ret
041AD3 17 1B 26    0275*  @cmd:      db 23,27,0x26
041AD6 00 00       0276*  @bufferId: dw 0x0000
041AD8 00          0277*  @end:      db 0x00 ; padding
041AD9             0041   
041AD9             0042   ; APPLICATION INCLUDES
041AD9             0043       include "collisions.inc"
041AD9             0001*  ; ====== COLLISION DETECTION ======
041AD9             0002*  ; --- constants ---
041AD9             0003*  ; sprite_collisions flags
041AD9             0004*  collides_with_player: equ 0
041AD9             0005*  collides_with_laser: equ 1
041AD9             0006*  sprite_alive: equ 6 ; set when sprite is alive
041AD9             0007*  sprite_just_died: equ 7 ; set when sprite just died
041AD9             0008*  
041AD9             0009*  ; TODO: make these bit numbers instead of masks
041AD9             0010*  collide_top: equ %00001000
041AD9             0011*  collide_bottom: equ %00000100
041AD9             0012*  collide_left: equ %00000010
041AD9             0013*  collide_right: equ %00000001
041AD9             0014*  ; END TODO
041AD9             0015*  
041AD9             0016*  ; this routine detects collisions between two collidable objects,
041AD9             0017*  ; which can include sprites, active tiles, or any screen coordinate
041AD9             0018*  ; which has been set up with a sprite table structure that includes dim_x
041AD9             0019*  ; representing the radius of the collidable object
041AD9             0020*  ; inputs: ix and iy point to the colliding objects' sprite table records
041AD9             0021*  ; outputs: uh.l = distance - sum of radii
041AD9             0022*  ;          zero flag set or sign flag negative if collision detected
041AD9             0023*  ;          dx168 and dy168 are also populated with the signed displacements
041AD9             0024*  ; destroys: everything except indexes
041AD9             0025*  check_collision:
041AD9             0026*  ; compute dx = x1-x0
041AD9 DD 27 0B    0027*      ld hl,(ix+sprite_x)
041ADC FD 17 0B    0028*      ld de,(iy+sprite_x)
041ADF AF          0029*      xor a ; clear carry
041AE0 ED 52       0030*      sbc hl,de
041AE2 22 52 0A 04 0031*      ld (dx168),hl ; dx to scratch
041AE6             0032*  ; compute dy = y1-y0
041AE6 DD 27 0E    0033*      ld hl,(ix+sprite_y)
041AE9 FD 17 0E    0034*      ld de,(iy+sprite_y)
041AEC AF          0035*      xor a ; clear carry
041AED ED 52       0036*      sbc hl,de ; hl = dy
041AEF 22 58 0A 04 0037*      ld (dy168),hl ; dy to scratch
041AF3             0038*  ; compute euclidean distance between centers
041AF3 CD 5E 0A 04 0039*      call distance168 ; uh.l = distance
041AF7             0040*  ; check for overlap by summing half the radii
041AF7 DD 7E 09    0041*      ld a,(ix+sprite_dim_x)
041AFA CB 3F       0042*      srl a ; divide by 2
041AFC FD 5E 09    0043*      ld e,(iy+sprite_dim_x)
041AFF CB 3B       0044*      srl e ; divide by 2
041B01 83          0045*      add a,e
041B02 11 00 00 00 0046*      ld de,0 ; clear deu and e
041B06 57          0047*      ld d,a ; ud.e = sum of radii
041B07 B7          0048*      or a ; clear carry
041B08 ED 52       0049*      sbc hl,de ; uh.l = distance - sum of radii
041B0A C9          0050*      ret
041B0B             0051*  ; end check_collision
041B0B             0044       include "enemies.inc"
041B0B 04          0001*  max_enemy_sprites: db 4
041B0C             0002*  
041B0C             0003*  ; sprite_type
041B0C             0004*  enemy_dead: equ 0
041B0C             0005*  enemy_seeker: equ 1
041B0C             0006*  enemy_medium: equ 2
041B0C             0007*  enemy_large: equ 3
041B0C             0008*  landing_pad: equ 4
041B0C             0009*  laser_turret: equ 5
041B0C             0010*  fireballs: equ 6
041B0C             0011*  explosion: equ 7
041B0C             0012*  
041B0C             0013*  move_enemies:
041B0C             0014*  ; are there any active enemies or explosions?
041B0C 3A 94 40 04 0015*      ld a,(table_active_sprites)
041B10 A7          0016*      and a ; will be zero if no alive enemies or explosions
041B11 C2 1E 1B 04 0017*      jp nz,@they_live
041B15 21 B6 42 04 0018*      ld hl,enemies_dead
041B19 22 B3 42 04 0019*      ld (enemies_state),hl
041B1D C9          0020*      ret
041B1E             0021*  @they_live:
041B1E             0022*  ; initialize pointers and loop counter
041B1E FD 21 31 3E 0023*      ld iy,table_base ; set iy to first record in table
       04          
041B23 06 10       0024*      ld b,table_max_records ; loop counter
041B25             0025*  @move_loop:
041B25 FD 22 91 40 0026*      ld (table_pointer),iy ; update table pointer
       04          
041B2A C5          0027*      push bc ; backup loop counter
041B2B             0028*  ; check sprite_type to see if sprite is active
041B2B FD 7E 01    0029*      ld a,(iy+sprite_type)
041B2E A7          0030*      and a ; if zero, sprite is dead
041B2F CA 62 1B 04 0031*      jp z,@next_record ; ... and we skip to next record
041B33             0032*  ; otherwise we prepare to move the sprite
041B33 FD 7E 00    0033*      ld a,(iy+sprite_id) ; get spriteId
041B36 CD 6F 19 04 0034*      call vdu_sprite_select ; select sprite
041B3A FD 27 05    0035*      ld hl,(iy+sprite_move_program) ; load the behavior subroutine address
041B3D             0036*      callHL
041B3D 01 43 1B 04 0001*M     ld bc,@F ; Address of first instruction after the jump
041B41 C5          0002*M     push bc ; which constitutes the return address
041B42 E9          0003*M     jp (hl) ; Jump to the address in HL
041B43             0004*M @@:
041B43             0037*  ; move_enemies_loop_return: return from behavior subroutines
041B43 FD 2A 91 40 0038*      ld iy,(table_pointer) ; get back table pointer
       04          
041B48             0039*  ; now we check results of all the moves
041B48 FD CB 08 7E 0040*      bit sprite_just_died,(iy+sprite_collisions)
041B4C CA 58 1B 04 0041*      jp z,@draw_sprite ; if not dead, draw sprite
041B50 CD DD 40 04 0042*      call table_deactivate_sprite
041B54 C3 62 1B 04 0043*      jp @next_record ; and to the next record
041B58             0044*  @draw_sprite:
041B58 FD 07 0B    0045*      ld bc,(iy+sprite_x)
041B5B FD 17 0E    0046*      ld de,(iy+sprite_y)
041B5E CD 3B 1A 04 0047*      call vdu_sprite_move_abs168
041B62             0048*  ; fall through to @next_record
041B62             0049*  @next_record:
041B62 ED 33 26    0050*      lea iy,iy+table_bytes_per_record
041B65 AF          0051*      xor a ; clears carry flag
041B66 32 95 40 04 0052*      ld (sprite_screen_edge),a ; clear screen edge collision flag
041B6A C1          0053*      pop bc ; get back our loop counter
041B6B 10 B8       0054*      djnz @move_loop ; loop until we've checked all the records
041B6D C9          0055*      ret ; and we're out
041B6E             0056*  
041B6E             0057*  ; ; ######### SPRITE BEHAVIOR ROUTINES #########
041B6E             0058*  ; ; each sprite in the table must have one of these defined
041B6E             0059*  ; ; but they need not be unique to a particular sprite
041B6E             0060*  ; ; these are jumped to from move_enemies_do_program,but could come from other places
041B6E             0061*  ; ; and have the option but not obligation to go back to move_enemies_loop_return
041B6E             0062*  ; ; but they can call anything they want between those two endpoints
041B6E             0063*  ; move_programs: ; bookmark in case we want to know the first address of the first subroutine
041B6E             0064*  
041B6E             0065*  check_enemy_player_collisions:
041B6E             0066*  ; check for collisions with player
041B6E DD 21 AE 3C 0067*      ld ix,player_start_variables
       04          
041B73 DD CB 08 76 0068*      bit sprite_alive,(ix+sprite_collisions)
041B77 C8          0069*      ret z ; player dead, no collision
041B78 CD D9 1A 04 0070*      call check_collision
041B7C F0          0071*      ret p ; no collision
041B7D C3 A8 1B 04 0072*      jp enemy_kill
041B81             0073*  ; end move_enemy_seeker
041B81             0074*  orientation_to_player:
041B81 FD 2A 91 40 0075*      ld iy,(table_pointer) ; TODO: see if we can get IY to land here with the proper value
       04          
041B86 FD 07 0B    0076*      ld bc,(iy+sprite_x)
041B89 FD 17 0E    0077*      ld de,(iy+sprite_y)
041B8C DD 2A B9 3C 0078*      ld ix,(player_x)
       04          
041B91 FD 2A BC 3C 0079*      ld iy,(player_y)
       04          
041B96 CD 37 0A 04 0080*      call dxy168
041B9A C5          0081*      push bc
041B9B D5          0082*      push de
041B9C CD 93 0A 04 0083*      call atan2_168fast
041BA0 D1          0084*      pop de
041BA1 C1          0085*      pop bc
041BA2 FD 2A 91 40 0086*      ld iy,(table_pointer) ; TODO: see if we can get IY to land here with the proper value
       04          
041BA7 C9          0087*      ret
041BA8             0088*  
041BA8             0089*  ; this routine vanquishes the enemy sprite
041BA8             0090*  ; inputs: table_pointer set to sprite record
041BA8             0091*  ; destroys: everything except index registers
041BA8             0092*  ; returns: an incandescent ball of debris and gas
041BA8             0093*  enemy_kill:
041BA8 FD 2A 91 40 0094*      ld iy,(table_pointer); TODO: see if we can get IY to land here with the proper value
       04          
041BAD             0095*  ; tally up points
041BAD 2A AA 3C 04 0096*      ld hl,(player_score)
041BB1 01 00 00 00 0097*      ld bc,0 ; clear bcu
041BB5 FD 4E 24    0098*      ld c,(iy+sprite_points)
041BB8 09          0099*      add hl,bc
041BB9 22 AA 3C 04 0100*      ld (player_score),hl
041BBD FD CB 08 FE 0101*      set sprite_just_died,(iy+sprite_collisions)
041BC1 C9          0102*      ret
041BC2             0103*  ; end enemy_kill
041BC2             0045       include "images_sprites.inc"
041BC2             0001*  ; Generated by beegee747/build/scripts/build_99_asm_img_load.py
041BC2             0002*  
041BC2             0003*  sprites_num_images: equ 113
041BC2             0004*  
041BC2             0005*  ; buffer_ids:
041BC2             0006*  BUF_BLINKY_0: equ 256
041BC2             0007*  BUF_BLINKY_1: equ 257
041BC2             0008*  BUF_BLINKY_2: equ 258
041BC2             0009*  BUF_BLINKY_3: equ 259
041BC2             0010*  BUF_BLINKY_4: equ 260
041BC2             0011*  BUF_BLINKY_5: equ 261
041BC2             0012*  BUF_BLINKY_6: equ 262
041BC2             0013*  BUF_BLINKY_7: equ 263
041BC2             0014*  BUF_CLYDE_0: equ 264
041BC2             0015*  BUF_CLYDE_1: equ 265
041BC2             0016*  BUF_CLYDE_2: equ 266
041BC2             0017*  BUF_CLYDE_3: equ 267
041BC2             0018*  BUF_CLYDE_4: equ 268
041BC2             0019*  BUF_CLYDE_5: equ 269
041BC2             0020*  BUF_CLYDE_6: equ 270
041BC2             0021*  BUF_CLYDE_7: equ 271
041BC2             0022*  BUF_FRUIT_0: equ 272
041BC2             0023*  BUF_FRUIT_1: equ 273
041BC2             0024*  BUF_FRUIT_2: equ 274
041BC2             0025*  BUF_FRUIT_3: equ 275
041BC2             0026*  BUF_FRUIT_4: equ 276
041BC2             0027*  BUF_FRUIT_5: equ 277
041BC2             0028*  BUF_FRUIT_6: equ 278
041BC2             0029*  BUF_FRUIT_7: equ 279
041BC2             0030*  BUF_INKY_0: equ 280
041BC2             0031*  BUF_INKY_1: equ 281
041BC2             0032*  BUF_INKY_2: equ 282
041BC2             0033*  BUF_INKY_3: equ 283
041BC2             0034*  BUF_INKY_4: equ 284
041BC2             0035*  BUF_INKY_5: equ 285
041BC2             0036*  BUF_INKY_6: equ 286
041BC2             0037*  BUF_INKY_7: equ 287
041BC2             0038*  BUF_MAZE_PELLETS_00: equ 288
041BC2             0039*  BUF_MAZE_PELLETS_01: equ 289
041BC2             0040*  BUF_MAZE_PELLETS_02: equ 290
041BC2             0041*  BUF_PAC_BIG_00_00: equ 291
041BC2             0042*  BUF_PAC_BIG_00_01: equ 292
041BC2             0043*  BUF_PAC_BIG_00_02: equ 293
041BC2             0044*  BUF_PAC_DED_00_00: equ 294
041BC2             0045*  BUF_PAC_DED_00_01: equ 295
041BC2             0046*  BUF_PAC_DED_00_02: equ 296
041BC2             0047*  BUF_PAC_DED_00_03: equ 297
041BC2             0048*  BUF_PAC_DED_00_04: equ 298
041BC2             0049*  BUF_PAC_DED_00_05: equ 299
041BC2             0050*  BUF_PAC_DED_00_06: equ 300
041BC2             0051*  BUF_PAC_DED_00_07: equ 301
041BC2             0052*  BUF_PAC_DED_00_08: equ 302
041BC2             0053*  BUF_PAC_DED_00_09: equ 303
041BC2             0054*  BUF_PAC_DED_00_10: equ 304
041BC2             0055*  BUF_PAC_LIV_00_00: equ 305
041BC2             0056*  BUF_PAC_MAN_00_00: equ 306
041BC2             0057*  BUF_PAC_MAN_00_01: equ 307
041BC2             0058*  BUF_PAC_MAN_00_02: equ 308
041BC2             0059*  BUF_PAC_MAN_01_00: equ 309
041BC2             0060*  BUF_PAC_MAN_01_01: equ 310
041BC2             0061*  BUF_PAC_MAN_01_02: equ 311
041BC2             0062*  BUF_PAC_MAN_02_00: equ 312
041BC2             0063*  BUF_PAC_MAN_02_01: equ 313
041BC2             0064*  BUF_PAC_MAN_02_02: equ 314
041BC2             0065*  BUF_PAC_MAN_03_00: equ 315
041BC2             0066*  BUF_PAC_MAN_03_01: equ 316
041BC2             0067*  BUF_PAC_MAN_03_02: equ 317
041BC2             0068*  BUF_PINKY_0: equ 318
041BC2             0069*  BUF_PINKY_1: equ 319
041BC2             0070*  BUF_PINKY_2: equ 320
041BC2             0071*  BUF_PINKY_3: equ 321
041BC2             0072*  BUF_PINKY_4: equ 322
041BC2             0073*  BUF_PINKY_5: equ 323
041BC2             0074*  BUF_PINKY_6: equ 324
041BC2             0075*  BUF_PINKY_7: equ 325
041BC2             0076*  BUF_REVERSE_0: equ 326
041BC2             0077*  BUF_REVERSE_1: equ 327
041BC2             0078*  BUF_REVERSE_2: equ 328
041BC2             0079*  BUF_REVERSE_3: equ 329
041BC2             0080*  BUF_REVERSE_4: equ 330
041BC2             0081*  BUF_REVERSE_5: equ 331
041BC2             0082*  BUF_REVERSE_6: equ 332
041BC2             0083*  BUF_REVERSE_7: equ 333
041BC2             0084*  BUF_TILE_00: equ 334
041BC2             0085*  BUF_TILE_01: equ 335
041BC2             0086*  BUF_TILE_02: equ 336
041BC2             0087*  BUF_TILE_03: equ 337
041BC2             0088*  BUF_TILE_04: equ 338
041BC2             0089*  BUF_TILE_05: equ 339
041BC2             0090*  BUF_TILE_06: equ 340
041BC2             0091*  BUF_TILE_07: equ 341
041BC2             0092*  BUF_TILE_08: equ 342
041BC2             0093*  BUF_TILE_09: equ 343
041BC2             0094*  BUF_TILE_10: equ 344
041BC2             0095*  BUF_TILE_11: equ 345
041BC2             0096*  BUF_TILE_12: equ 346
041BC2             0097*  BUF_TILE_13: equ 347
041BC2             0098*  BUF_TILE_14: equ 348
041BC2             0099*  BUF_TILE_15: equ 349
041BC2             0100*  BUF_TILE_16: equ 350
041BC2             0101*  BUF_TILE_17: equ 351
041BC2             0102*  BUF_TILE_18: equ 352
041BC2             0103*  BUF_TILE_19: equ 353
041BC2             0104*  BUF_TILE_20: equ 354
041BC2             0105*  BUF_TILE_21: equ 355
041BC2             0106*  BUF_TILE_22: equ 356
041BC2             0107*  BUF_TILE_23: equ 357
041BC2             0108*  BUF_TILE_24: equ 358
041BC2             0109*  BUF_TILE_25: equ 359
041BC2             0110*  BUF_TILE_26: equ 360
041BC2             0111*  BUF_TILE_27: equ 361
041BC2             0112*  BUF_TILE_28: equ 362
041BC2             0113*  BUF_TILE_29: equ 363
041BC2             0114*  BUF_TILE_30: equ 364
041BC2             0115*  BUF_TILE_31: equ 365
041BC2             0116*  BUF_TILE_32: equ 366
041BC2             0117*  BUF_TILE_33: equ 367
041BC2             0118*  BUF_TILE_34: equ 368
041BC2             0119*  
041BC2             0120*  sprites_image_list: ; type; width; height; filename; bufferId:
041BC2 01 00 00 10 0121*  	dl 1, 16, 16, 256, fn_blinky_0, 256
       00 00 10 00 
       00 00 01 00 
       B4 23 04 00 
       01 00       
041BD4 01 00 00 10 0122*  	dl 1, 16, 16, 256, fn_blinky_1, 257
       00 00 10 00 
       00 00 01 00 
       CB 23 04 01 
       01 00       
041BE6 01 00 00 10 0123*  	dl 1, 16, 16, 256, fn_blinky_2, 258
       00 00 10 00 
       00 00 01 00 
       E2 23 04 02 
       01 00       
041BF8 01 00 00 10 0124*  	dl 1, 16, 16, 256, fn_blinky_3, 259
       00 00 10 00 
       00 00 01 00 
       F9 23 04 03 
       01 00       
041C0A 01 00 00 10 0125*  	dl 1, 16, 16, 256, fn_blinky_4, 260
       00 00 10 00 
       00 00 01 00 
       10 24 04 04 
       01 00       
041C1C 01 00 00 10 0126*  	dl 1, 16, 16, 256, fn_blinky_5, 261
       00 00 10 00 
       00 00 01 00 
       27 24 04 05 
       01 00       
041C2E 01 00 00 10 0127*  	dl 1, 16, 16, 256, fn_blinky_6, 262
       00 00 10 00 
       00 00 01 00 
       3E 24 04 06 
       01 00       
041C40 01 00 00 10 0128*  	dl 1, 16, 16, 256, fn_blinky_7, 263
       00 00 10 00 
       00 00 01 00 
       55 24 04 07 
       01 00       
041C52 01 00 00 10 0129*  	dl 1, 16, 16, 256, fn_clyde_0, 264
       00 00 10 00 
       00 00 01 00 
       6C 24 04 08 
       01 00       
041C64 01 00 00 10 0130*  	dl 1, 16, 16, 256, fn_clyde_1, 265
       00 00 10 00 
       00 00 01 00 
       82 24 04 09 
       01 00       
041C76 01 00 00 10 0131*  	dl 1, 16, 16, 256, fn_clyde_2, 266
       00 00 10 00 
       00 00 01 00 
       98 24 04 0A 
       01 00       
041C88 01 00 00 10 0132*  	dl 1, 16, 16, 256, fn_clyde_3, 267
       00 00 10 00 
       00 00 01 00 
       AE 24 04 0B 
       01 00       
041C9A 01 00 00 10 0133*  	dl 1, 16, 16, 256, fn_clyde_4, 268
       00 00 10 00 
       00 00 01 00 
       C4 24 04 0C 
       01 00       
041CAC 01 00 00 10 0134*  	dl 1, 16, 16, 256, fn_clyde_5, 269
       00 00 10 00 
       00 00 01 00 
       DA 24 04 0D 
       01 00       
041CBE 01 00 00 10 0135*  	dl 1, 16, 16, 256, fn_clyde_6, 270
       00 00 10 00 
       00 00 01 00 
       F0 24 04 0E 
       01 00       
041CD0 01 00 00 10 0136*  	dl 1, 16, 16, 256, fn_clyde_7, 271
       00 00 10 00 
       00 00 01 00 
       06 25 04 0F 
       01 00       
041CE2 01 00 00 10 0137*  	dl 1, 16, 16, 256, fn_fruit_0, 272
       00 00 10 00 
       00 00 01 00 
       1C 25 04 10 
       01 00       
041CF4 01 00 00 10 0138*  	dl 1, 16, 16, 256, fn_fruit_1, 273
       00 00 10 00 
       00 00 01 00 
       32 25 04 11 
       01 00       
041D06 01 00 00 10 0139*  	dl 1, 16, 16, 256, fn_fruit_2, 274
       00 00 10 00 
       00 00 01 00 
       48 25 04 12 
       01 00       
041D18 01 00 00 10 0140*  	dl 1, 16, 16, 256, fn_fruit_3, 275
       00 00 10 00 
       00 00 01 00 
       5E 25 04 13 
       01 00       
041D2A 01 00 00 10 0141*  	dl 1, 16, 16, 256, fn_fruit_4, 276
       00 00 10 00 
       00 00 01 00 
       74 25 04 14 
       01 00       
041D3C 01 00 00 10 0142*  	dl 1, 16, 16, 256, fn_fruit_5, 277
       00 00 10 00 
       00 00 01 00 
       8A 25 04 15 
       01 00       
041D4E 01 00 00 10 0143*  	dl 1, 16, 16, 256, fn_fruit_6, 278
       00 00 10 00 
       00 00 01 00 
       A0 25 04 16 
       01 00       
041D60 01 00 00 10 0144*  	dl 1, 16, 16, 256, fn_fruit_7, 279
       00 00 10 00 
       00 00 01 00 
       B6 25 04 17 
       01 00       
041D72 01 00 00 10 0145*  	dl 1, 16, 16, 256, fn_inky_0, 280
       00 00 10 00 
       00 00 01 00 
       CC 25 04 18 
       01 00       
041D84 01 00 00 10 0146*  	dl 1, 16, 16, 256, fn_inky_1, 281
       00 00 10 00 
       00 00 01 00 
       E1 25 04 19 
       01 00       
041D96 01 00 00 10 0147*  	dl 1, 16, 16, 256, fn_inky_2, 282
       00 00 10 00 
       00 00 01 00 
       F6 25 04 1A 
       01 00       
041DA8 01 00 00 10 0148*  	dl 1, 16, 16, 256, fn_inky_3, 283
       00 00 10 00 
       00 00 01 00 
       0B 26 04 1B 
       01 00       
041DBA 01 00 00 10 0149*  	dl 1, 16, 16, 256, fn_inky_4, 284
       00 00 10 00 
       00 00 01 00 
       20 26 04 1C 
       01 00       
041DCC 01 00 00 10 0150*  	dl 1, 16, 16, 256, fn_inky_5, 285
       00 00 10 00 
       00 00 01 00 
       35 26 04 1D 
       01 00       
041DDE 01 00 00 10 0151*  	dl 1, 16, 16, 256, fn_inky_6, 286
       00 00 10 00 
       00 00 01 00 
       4A 26 04 1E 
       01 00       
041DF0 01 00 00 10 0152*  	dl 1, 16, 16, 256, fn_inky_7, 287
       00 00 10 00 
       00 00 01 00 
       5F 26 04 1F 
       01 00       
041E02 01 00 00 08 0153*  	dl 1, 8, 8, 64, fn_maze_pellets_00, 288
       00 00 08 00 
       00 40 00 00 
       74 26 04 20 
       01 00       
041E14 01 00 00 08 0154*  	dl 1, 8, 8, 64, fn_maze_pellets_01, 289
       00 00 08 00 
       00 40 00 00 
       92 26 04 21 
       01 00       
041E26 01 00 00 08 0155*  	dl 1, 8, 8, 64, fn_maze_pellets_02, 290
       00 00 08 00 
       00 40 00 00 
       B0 26 04 22 
       01 00       
041E38 01 00 00 20 0156*  	dl 1, 32, 32, 1024, fn_pac_big_00_00, 291
       00 00 20 00 
       00 00 04 00 
       CE 26 04 23 
       01 00       
041E4A 01 00 00 20 0157*  	dl 1, 32, 32, 1024, fn_pac_big_00_01, 292
       00 00 20 00 
       00 00 04 00 
       EA 26 04 24 
       01 00       
041E5C 01 00 00 20 0158*  	dl 1, 32, 32, 1024, fn_pac_big_00_02, 293
       00 00 20 00 
       00 00 04 00 
       06 27 04 25 
       01 00       
041E6E 01 00 00 10 0159*  	dl 1, 16, 16, 256, fn_pac_ded_00_00, 294
       00 00 10 00 
       00 00 01 00 
       22 27 04 26 
       01 00       
041E80 01 00 00 10 0160*  	dl 1, 16, 16, 256, fn_pac_ded_00_01, 295
       00 00 10 00 
       00 00 01 00 
       3E 27 04 27 
       01 00       
041E92 01 00 00 10 0161*  	dl 1, 16, 16, 256, fn_pac_ded_00_02, 296
       00 00 10 00 
       00 00 01 00 
       5A 27 04 28 
       01 00       
041EA4 01 00 00 10 0162*  	dl 1, 16, 16, 256, fn_pac_ded_00_03, 297
       00 00 10 00 
       00 00 01 00 
       76 27 04 29 
       01 00       
041EB6 01 00 00 10 0163*  	dl 1, 16, 16, 256, fn_pac_ded_00_04, 298
       00 00 10 00 
       00 00 01 00 
       92 27 04 2A 
       01 00       
041EC8 01 00 00 10 0164*  	dl 1, 16, 16, 256, fn_pac_ded_00_05, 299
       00 00 10 00 
       00 00 01 00 
       AE 27 04 2B 
       01 00       
041EDA 01 00 00 10 0165*  	dl 1, 16, 16, 256, fn_pac_ded_00_06, 300
       00 00 10 00 
       00 00 01 00 
       CA 27 04 2C 
       01 00       
041EEC 01 00 00 10 0166*  	dl 1, 16, 16, 256, fn_pac_ded_00_07, 301
       00 00 10 00 
       00 00 01 00 
       E6 27 04 2D 
       01 00       
041EFE 01 00 00 10 0167*  	dl 1, 16, 16, 256, fn_pac_ded_00_08, 302
       00 00 10 00 
       00 00 01 00 
       02 28 04 2E 
       01 00       
041F10 01 00 00 10 0168*  	dl 1, 16, 16, 256, fn_pac_ded_00_09, 303
       00 00 10 00 
       00 00 01 00 
       1E 28 04 2F 
       01 00       
041F22 01 00 00 10 0169*  	dl 1, 16, 16, 256, fn_pac_ded_00_10, 304
       00 00 10 00 
       00 00 01 00 
       3A 28 04 30 
       01 00       
041F34 01 00 00 10 0170*  	dl 1, 16, 16, 256, fn_pac_liv_00_00, 305
       00 00 10 00 
       00 00 01 00 
       56 28 04 31 
       01 00       
041F46 01 00 00 10 0171*  	dl 1, 16, 16, 256, fn_pac_man_00_00, 306
       00 00 10 00 
       00 00 01 00 
       72 28 04 32 
       01 00       
041F58 01 00 00 10 0172*  	dl 1, 16, 16, 256, fn_pac_man_00_01, 307
       00 00 10 00 
       00 00 01 00 
       8E 28 04 33 
       01 00       
041F6A 01 00 00 10 0173*  	dl 1, 16, 16, 256, fn_pac_man_00_02, 308
       00 00 10 00 
       00 00 01 00 
       AA 28 04 34 
       01 00       
041F7C 01 00 00 10 0174*  	dl 1, 16, 16, 256, fn_pac_man_01_00, 309
       00 00 10 00 
       00 00 01 00 
       C6 28 04 35 
       01 00       
041F8E 01 00 00 10 0175*  	dl 1, 16, 16, 256, fn_pac_man_01_01, 310
       00 00 10 00 
       00 00 01 00 
       E2 28 04 36 
       01 00       
041FA0 01 00 00 10 0176*  	dl 1, 16, 16, 256, fn_pac_man_01_02, 311
       00 00 10 00 
       00 00 01 00 
       FE 28 04 37 
       01 00       
041FB2 01 00 00 10 0177*  	dl 1, 16, 16, 256, fn_pac_man_02_00, 312
       00 00 10 00 
       00 00 01 00 
       1A 29 04 38 
       01 00       
041FC4 01 00 00 10 0178*  	dl 1, 16, 16, 256, fn_pac_man_02_01, 313
       00 00 10 00 
       00 00 01 00 
       36 29 04 39 
       01 00       
041FD6 01 00 00 10 0179*  	dl 1, 16, 16, 256, fn_pac_man_02_02, 314
       00 00 10 00 
       00 00 01 00 
       52 29 04 3A 
       01 00       
041FE8 01 00 00 10 0180*  	dl 1, 16, 16, 256, fn_pac_man_03_00, 315
       00 00 10 00 
       00 00 01 00 
       6E 29 04 3B 
       01 00       
041FFA 01 00 00 10 0181*  	dl 1, 16, 16, 256, fn_pac_man_03_01, 316
       00 00 10 00 
       00 00 01 00 
       8A 29 04 3C 
       01 00       
04200C 01 00 00 10 0182*  	dl 1, 16, 16, 256, fn_pac_man_03_02, 317
       00 00 10 00 
       00 00 01 00 
       A6 29 04 3D 
       01 00       
04201E 01 00 00 10 0183*  	dl 1, 16, 16, 256, fn_pinky_0, 318
       00 00 10 00 
       00 00 01 00 
       C2 29 04 3E 
       01 00       
042030 01 00 00 10 0184*  	dl 1, 16, 16, 256, fn_pinky_1, 319
       00 00 10 00 
       00 00 01 00 
       D8 29 04 3F 
       01 00       
042042 01 00 00 10 0185*  	dl 1, 16, 16, 256, fn_pinky_2, 320
       00 00 10 00 
       00 00 01 00 
       EE 29 04 40 
       01 00       
042054 01 00 00 10 0186*  	dl 1, 16, 16, 256, fn_pinky_3, 321
       00 00 10 00 
       00 00 01 00 
       04 2A 04 41 
       01 00       
042066 01 00 00 10 0187*  	dl 1, 16, 16, 256, fn_pinky_4, 322
       00 00 10 00 
       00 00 01 00 
       1A 2A 04 42 
       01 00       
042078 01 00 00 10 0188*  	dl 1, 16, 16, 256, fn_pinky_5, 323
       00 00 10 00 
       00 00 01 00 
       30 2A 04 43 
       01 00       
04208A 01 00 00 10 0189*  	dl 1, 16, 16, 256, fn_pinky_6, 324
       00 00 10 00 
       00 00 01 00 
       46 2A 04 44 
       01 00       
04209C 01 00 00 10 0190*  	dl 1, 16, 16, 256, fn_pinky_7, 325
       00 00 10 00 
       00 00 01 00 
       5C 2A 04 45 
       01 00       
0420AE 01 00 00 10 0191*  	dl 1, 16, 16, 256, fn_reverse_0, 326
       00 00 10 00 
       00 00 01 00 
       72 2A 04 46 
       01 00       
0420C0 01 00 00 10 0192*  	dl 1, 16, 16, 256, fn_reverse_1, 327
       00 00 10 00 
       00 00 01 00 
       8A 2A 04 47 
       01 00       
0420D2 01 00 00 10 0193*  	dl 1, 16, 16, 256, fn_reverse_2, 328
       00 00 10 00 
       00 00 01 00 
       A2 2A 04 48 
       01 00       
0420E4 01 00 00 10 0194*  	dl 1, 16, 16, 256, fn_reverse_3, 329
       00 00 10 00 
       00 00 01 00 
       BA 2A 04 49 
       01 00       
0420F6 01 00 00 10 0195*  	dl 1, 16, 16, 256, fn_reverse_4, 330
       00 00 10 00 
       00 00 01 00 
       D2 2A 04 4A 
       01 00       
042108 01 00 00 10 0196*  	dl 1, 16, 16, 256, fn_reverse_5, 331
       00 00 10 00 
       00 00 01 00 
       EA 2A 04 4B 
       01 00       
04211A 01 00 00 10 0197*  	dl 1, 16, 16, 256, fn_reverse_6, 332
       00 00 10 00 
       00 00 01 00 
       02 2B 04 4C 
       01 00       
04212C 01 00 00 10 0198*  	dl 1, 16, 16, 256, fn_reverse_7, 333
       00 00 10 00 
       00 00 01 00 
       1A 2B 04 4D 
       01 00       
04213E 01 00 00 08 0199*  	dl 1, 8, 8, 64, fn_tile_00, 334
       00 00 08 00 
       00 40 00 00 
       32 2B 04 4E 
       01 00       
042150 01 00 00 08 0200*  	dl 1, 8, 8, 64, fn_tile_01, 335
       00 00 08 00 
       00 40 00 00 
       48 2B 04 4F 
       01 00       
042162 01 00 00 08 0201*  	dl 1, 8, 8, 64, fn_tile_02, 336
       00 00 08 00 
       00 40 00 00 
       5E 2B 04 50 
       01 00       
042174 01 00 00 08 0202*  	dl 1, 8, 8, 64, fn_tile_03, 337
       00 00 08 00 
       00 40 00 00 
       74 2B 04 51 
       01 00       
042186 01 00 00 08 0203*  	dl 1, 8, 8, 64, fn_tile_04, 338
       00 00 08 00 
       00 40 00 00 
       8A 2B 04 52 
       01 00       
042198 01 00 00 08 0204*  	dl 1, 8, 8, 64, fn_tile_05, 339
       00 00 08 00 
       00 40 00 00 
       A0 2B 04 53 
       01 00       
0421AA 01 00 00 08 0205*  	dl 1, 8, 8, 64, fn_tile_06, 340
       00 00 08 00 
       00 40 00 00 
       B6 2B 04 54 
       01 00       
0421BC 01 00 00 08 0206*  	dl 1, 8, 8, 64, fn_tile_07, 341
       00 00 08 00 
       00 40 00 00 
       CC 2B 04 55 
       01 00       
0421CE 01 00 00 08 0207*  	dl 1, 8, 8, 64, fn_tile_08, 342
       00 00 08 00 
       00 40 00 00 
       E2 2B 04 56 
       01 00       
0421E0 01 00 00 08 0208*  	dl 1, 8, 8, 64, fn_tile_09, 343
       00 00 08 00 
       00 40 00 00 
       F8 2B 04 57 
       01 00       
0421F2 01 00 00 08 0209*  	dl 1, 8, 8, 64, fn_tile_10, 344
       00 00 08 00 
       00 40 00 00 
       0E 2C 04 58 
       01 00       
042204 01 00 00 08 0210*  	dl 1, 8, 8, 64, fn_tile_11, 345
       00 00 08 00 
       00 40 00 00 
       24 2C 04 59 
       01 00       
042216 01 00 00 08 0211*  	dl 1, 8, 8, 64, fn_tile_12, 346
       00 00 08 00 
       00 40 00 00 
       3A 2C 04 5A 
       01 00       
042228 01 00 00 08 0212*  	dl 1, 8, 8, 64, fn_tile_13, 347
       00 00 08 00 
       00 40 00 00 
       50 2C 04 5B 
       01 00       
04223A 01 00 00 08 0213*  	dl 1, 8, 8, 64, fn_tile_14, 348
       00 00 08 00 
       00 40 00 00 
       66 2C 04 5C 
       01 00       
04224C 01 00 00 08 0214*  	dl 1, 8, 8, 64, fn_tile_15, 349
       00 00 08 00 
       00 40 00 00 
       7C 2C 04 5D 
       01 00       
04225E 01 00 00 08 0215*  	dl 1, 8, 8, 64, fn_tile_16, 350
       00 00 08 00 
       00 40 00 00 
       92 2C 04 5E 
       01 00       
042270 01 00 00 08 0216*  	dl 1, 8, 8, 64, fn_tile_17, 351
       00 00 08 00 
       00 40 00 00 
       A8 2C 04 5F 
       01 00       
042282 01 00 00 08 0217*  	dl 1, 8, 8, 64, fn_tile_18, 352
       00 00 08 00 
       00 40 00 00 
       BE 2C 04 60 
       01 00       
042294 01 00 00 08 0218*  	dl 1, 8, 8, 64, fn_tile_19, 353
       00 00 08 00 
       00 40 00 00 
       D4 2C 04 61 
       01 00       
0422A6 01 00 00 08 0219*  	dl 1, 8, 8, 64, fn_tile_20, 354
       00 00 08 00 
       00 40 00 00 
       EA 2C 04 62 
       01 00       
0422B8 01 00 00 08 0220*  	dl 1, 8, 8, 64, fn_tile_21, 355
       00 00 08 00 
       00 40 00 00 
       00 2D 04 63 
       01 00       
0422CA 01 00 00 08 0221*  	dl 1, 8, 8, 64, fn_tile_22, 356
       00 00 08 00 
       00 40 00 00 
       16 2D 04 64 
       01 00       
0422DC 01 00 00 08 0222*  	dl 1, 8, 8, 64, fn_tile_23, 357
       00 00 08 00 
       00 40 00 00 
       2C 2D 04 65 
       01 00       
0422EE 01 00 00 08 0223*  	dl 1, 8, 8, 64, fn_tile_24, 358
       00 00 08 00 
       00 40 00 00 
       42 2D 04 66 
       01 00       
042300 01 00 00 08 0224*  	dl 1, 8, 8, 64, fn_tile_25, 359
       00 00 08 00 
       00 40 00 00 
       58 2D 04 67 
       01 00       
042312 01 00 00 08 0225*  	dl 1, 8, 8, 64, fn_tile_26, 360
       00 00 08 00 
       00 40 00 00 
       6E 2D 04 68 
       01 00       
042324 01 00 00 08 0226*  	dl 1, 8, 8, 64, fn_tile_27, 361
       00 00 08 00 
       00 40 00 00 
       84 2D 04 69 
       01 00       
042336 01 00 00 08 0227*  	dl 1, 8, 8, 64, fn_tile_28, 362
       00 00 08 00 
       00 40 00 00 
       9A 2D 04 6A 
       01 00       
042348 01 00 00 08 0228*  	dl 1, 8, 8, 64, fn_tile_29, 363
       00 00 08 00 
       00 40 00 00 
       B0 2D 04 6B 
       01 00       
04235A 01 00 00 08 0229*  	dl 1, 8, 8, 64, fn_tile_30, 364
       00 00 08 00 
       00 40 00 00 
       C6 2D 04 6C 
       01 00       
04236C 01 00 00 08 0230*  	dl 1, 8, 8, 64, fn_tile_31, 365
       00 00 08 00 
       00 40 00 00 
       DC 2D 04 6D 
       01 00       
04237E 01 00 00 08 0231*  	dl 1, 8, 8, 64, fn_tile_32, 366
       00 00 08 00 
       00 40 00 00 
       F2 2D 04 6E 
       01 00       
042390 01 00 00 08 0232*  	dl 1, 8, 8, 64, fn_tile_33, 367
       00 00 08 00 
       00 40 00 00 
       08 2E 04 6F 
       01 00       
0423A2 01 00 00 08 0233*  	dl 1, 8, 8, 64, fn_tile_34, 368
       00 00 08 00 
       00 40 00 00 
       1E 2E 04 70 
       01 00       
0423B4             0234*  
0423B4             0235*  ; files_list: ; filename:
0423B4 73 70 72 69 0236*  fn_blinky_0: db "sprites/blinky_0.rgba2",0
       74 65 73 2F 
       62 6C 69 6E 
       6B 79 5F 30 
       2E 72 67 62 
       61 32 00    
0423CB 73 70 72 69 0237*  fn_blinky_1: db "sprites/blinky_1.rgba2",0
       74 65 73 2F 
       62 6C 69 6E 
       6B 79 5F 31 
       2E 72 67 62 
       61 32 00    
0423E2 73 70 72 69 0238*  fn_blinky_2: db "sprites/blinky_2.rgba2",0
       74 65 73 2F 
       62 6C 69 6E 
       6B 79 5F 32 
       2E 72 67 62 
       61 32 00    
0423F9 73 70 72 69 0239*  fn_blinky_3: db "sprites/blinky_3.rgba2",0
       74 65 73 2F 
       62 6C 69 6E 
       6B 79 5F 33 
       2E 72 67 62 
       61 32 00    
042410 73 70 72 69 0240*  fn_blinky_4: db "sprites/blinky_4.rgba2",0
       74 65 73 2F 
       62 6C 69 6E 
       6B 79 5F 34 
       2E 72 67 62 
       61 32 00    
042427 73 70 72 69 0241*  fn_blinky_5: db "sprites/blinky_5.rgba2",0
       74 65 73 2F 
       62 6C 69 6E 
       6B 79 5F 35 
       2E 72 67 62 
       61 32 00    
04243E 73 70 72 69 0242*  fn_blinky_6: db "sprites/blinky_6.rgba2",0
       74 65 73 2F 
       62 6C 69 6E 
       6B 79 5F 36 
       2E 72 67 62 
       61 32 00    
042455 73 70 72 69 0243*  fn_blinky_7: db "sprites/blinky_7.rgba2",0
       74 65 73 2F 
       62 6C 69 6E 
       6B 79 5F 37 
       2E 72 67 62 
       61 32 00    
04246C 73 70 72 69 0244*  fn_clyde_0: db "sprites/clyde_0.rgba2",0
       74 65 73 2F 
       63 6C 79 64 
       65 5F 30 2E 
       72 67 62 61 
       32 00       
042482 73 70 72 69 0245*  fn_clyde_1: db "sprites/clyde_1.rgba2",0
       74 65 73 2F 
       63 6C 79 64 
       65 5F 31 2E 
       72 67 62 61 
       32 00       
042498 73 70 72 69 0246*  fn_clyde_2: db "sprites/clyde_2.rgba2",0
       74 65 73 2F 
       63 6C 79 64 
       65 5F 32 2E 
       72 67 62 61 
       32 00       
0424AE 73 70 72 69 0247*  fn_clyde_3: db "sprites/clyde_3.rgba2",0
       74 65 73 2F 
       63 6C 79 64 
       65 5F 33 2E 
       72 67 62 61 
       32 00       
0424C4 73 70 72 69 0248*  fn_clyde_4: db "sprites/clyde_4.rgba2",0
       74 65 73 2F 
       63 6C 79 64 
       65 5F 34 2E 
       72 67 62 61 
       32 00       
0424DA 73 70 72 69 0249*  fn_clyde_5: db "sprites/clyde_5.rgba2",0
       74 65 73 2F 
       63 6C 79 64 
       65 5F 35 2E 
       72 67 62 61 
       32 00       
0424F0 73 70 72 69 0250*  fn_clyde_6: db "sprites/clyde_6.rgba2",0
       74 65 73 2F 
       63 6C 79 64 
       65 5F 36 2E 
       72 67 62 61 
       32 00       
042506 73 70 72 69 0251*  fn_clyde_7: db "sprites/clyde_7.rgba2",0
       74 65 73 2F 
       63 6C 79 64 
       65 5F 37 2E 
       72 67 62 61 
       32 00       
04251C 73 70 72 69 0252*  fn_fruit_0: db "sprites/fruit_0.rgba2",0
       74 65 73 2F 
       66 72 75 69 
       74 5F 30 2E 
       72 67 62 61 
       32 00       
042532 73 70 72 69 0253*  fn_fruit_1: db "sprites/fruit_1.rgba2",0
       74 65 73 2F 
       66 72 75 69 
       74 5F 31 2E 
       72 67 62 61 
       32 00       
042548 73 70 72 69 0254*  fn_fruit_2: db "sprites/fruit_2.rgba2",0
       74 65 73 2F 
       66 72 75 69 
       74 5F 32 2E 
       72 67 62 61 
       32 00       
04255E 73 70 72 69 0255*  fn_fruit_3: db "sprites/fruit_3.rgba2",0
       74 65 73 2F 
       66 72 75 69 
       74 5F 33 2E 
       72 67 62 61 
       32 00       
042574 73 70 72 69 0256*  fn_fruit_4: db "sprites/fruit_4.rgba2",0
       74 65 73 2F 
       66 72 75 69 
       74 5F 34 2E 
       72 67 62 61 
       32 00       
04258A 73 70 72 69 0257*  fn_fruit_5: db "sprites/fruit_5.rgba2",0
       74 65 73 2F 
       66 72 75 69 
       74 5F 35 2E 
       72 67 62 61 
       32 00       
0425A0 73 70 72 69 0258*  fn_fruit_6: db "sprites/fruit_6.rgba2",0
       74 65 73 2F 
       66 72 75 69 
       74 5F 36 2E 
       72 67 62 61 
       32 00       
0425B6 73 70 72 69 0259*  fn_fruit_7: db "sprites/fruit_7.rgba2",0
       74 65 73 2F 
       66 72 75 69 
       74 5F 37 2E 
       72 67 62 61 
       32 00       
0425CC 73 70 72 69 0260*  fn_inky_0: db "sprites/inky_0.rgba2",0
       74 65 73 2F 
       69 6E 6B 79 
       5F 30 2E 72 
       67 62 61 32 
       00          
0425E1 73 70 72 69 0261*  fn_inky_1: db "sprites/inky_1.rgba2",0
       74 65 73 2F 
       69 6E 6B 79 
       5F 31 2E 72 
       67 62 61 32 
       00          
0425F6 73 70 72 69 0262*  fn_inky_2: db "sprites/inky_2.rgba2",0
       74 65 73 2F 
       69 6E 6B 79 
       5F 32 2E 72 
       67 62 61 32 
       00          
04260B 73 70 72 69 0263*  fn_inky_3: db "sprites/inky_3.rgba2",0
       74 65 73 2F 
       69 6E 6B 79 
       5F 33 2E 72 
       67 62 61 32 
       00          
042620 73 70 72 69 0264*  fn_inky_4: db "sprites/inky_4.rgba2",0
       74 65 73 2F 
       69 6E 6B 79 
       5F 34 2E 72 
       67 62 61 32 
       00          
042635 73 70 72 69 0265*  fn_inky_5: db "sprites/inky_5.rgba2",0
       74 65 73 2F 
       69 6E 6B 79 
       5F 35 2E 72 
       67 62 61 32 
       00          
04264A 73 70 72 69 0266*  fn_inky_6: db "sprites/inky_6.rgba2",0
       74 65 73 2F 
       69 6E 6B 79 
       5F 36 2E 72 
       67 62 61 32 
       00          
04265F 73 70 72 69 0267*  fn_inky_7: db "sprites/inky_7.rgba2",0
       74 65 73 2F 
       69 6E 6B 79 
       5F 37 2E 72 
       67 62 61 32 
       00          
042674 73 70 72 69 0268*  fn_maze_pellets_00: db "sprites/maze_pellets_00.rgba2",0
       74 65 73 2F 
       6D 61 7A 65 
       5F 70 65 6C 
       6C 65 74 73 
       5F 30 30 2E 
       72 67 62 61 
       32 00       
042692 73 70 72 69 0269*  fn_maze_pellets_01: db "sprites/maze_pellets_01.rgba2",0
       74 65 73 2F 
       6D 61 7A 65 
       5F 70 65 6C 
       6C 65 74 73 
       5F 30 31 2E 
       72 67 62 61 
       32 00       
0426B0 73 70 72 69 0270*  fn_maze_pellets_02: db "sprites/maze_pellets_02.rgba2",0
       74 65 73 2F 
       6D 61 7A 65 
       5F 70 65 6C 
       6C 65 74 73 
       5F 30 32 2E 
       72 67 62 61 
       32 00       
0426CE 73 70 72 69 0271*  fn_pac_big_00_00: db "sprites/pac_big_00_00.rgba2",0
       74 65 73 2F 
       70 61 63 5F 
       62 69 67 5F 
       30 30 5F 30 
       30 2E 72 67 
       62 61 32 00 
0426EA 73 70 72 69 0272*  fn_pac_big_00_01: db "sprites/pac_big_00_01.rgba2",0
       74 65 73 2F 
       70 61 63 5F 
       62 69 67 5F 
       30 30 5F 30 
       31 2E 72 67 
       62 61 32 00 
042706 73 70 72 69 0273*  fn_pac_big_00_02: db "sprites/pac_big_00_02.rgba2",0
       74 65 73 2F 
       70 61 63 5F 
       62 69 67 5F 
       30 30 5F 30 
       32 2E 72 67 
       62 61 32 00 
042722 73 70 72 69 0274*  fn_pac_ded_00_00: db "sprites/pac_ded_00_00.rgba2",0
       74 65 73 2F 
       70 61 63 5F 
       64 65 64 5F 
       30 30 5F 30 
       30 2E 72 67 
       62 61 32 00 
04273E 73 70 72 69 0275*  fn_pac_ded_00_01: db "sprites/pac_ded_00_01.rgba2",0
       74 65 73 2F 
       70 61 63 5F 
       64 65 64 5F 
       30 30 5F 30 
       31 2E 72 67 
       62 61 32 00 
04275A 73 70 72 69 0276*  fn_pac_ded_00_02: db "sprites/pac_ded_00_02.rgba2",0
       74 65 73 2F 
       70 61 63 5F 
       64 65 64 5F 
       30 30 5F 30 
       32 2E 72 67 
       62 61 32 00 
042776 73 70 72 69 0277*  fn_pac_ded_00_03: db "sprites/pac_ded_00_03.rgba2",0
       74 65 73 2F 
       70 61 63 5F 
       64 65 64 5F 
       30 30 5F 30 
       33 2E 72 67 
       62 61 32 00 
042792 73 70 72 69 0278*  fn_pac_ded_00_04: db "sprites/pac_ded_00_04.rgba2",0
       74 65 73 2F 
       70 61 63 5F 
       64 65 64 5F 
       30 30 5F 30 
       34 2E 72 67 
       62 61 32 00 
0427AE 73 70 72 69 0279*  fn_pac_ded_00_05: db "sprites/pac_ded_00_05.rgba2",0
       74 65 73 2F 
       70 61 63 5F 
       64 65 64 5F 
       30 30 5F 30 
       35 2E 72 67 
       62 61 32 00 
0427CA 73 70 72 69 0280*  fn_pac_ded_00_06: db "sprites/pac_ded_00_06.rgba2",0
       74 65 73 2F 
       70 61 63 5F 
       64 65 64 5F 
       30 30 5F 30 
       36 2E 72 67 
       62 61 32 00 
0427E6 73 70 72 69 0281*  fn_pac_ded_00_07: db "sprites/pac_ded_00_07.rgba2",0
       74 65 73 2F 
       70 61 63 5F 
       64 65 64 5F 
       30 30 5F 30 
       37 2E 72 67 
       62 61 32 00 
042802 73 70 72 69 0282*  fn_pac_ded_00_08: db "sprites/pac_ded_00_08.rgba2",0
       74 65 73 2F 
       70 61 63 5F 
       64 65 64 5F 
       30 30 5F 30 
       38 2E 72 67 
       62 61 32 00 
04281E 73 70 72 69 0283*  fn_pac_ded_00_09: db "sprites/pac_ded_00_09.rgba2",0
       74 65 73 2F 
       70 61 63 5F 
       64 65 64 5F 
       30 30 5F 30 
       39 2E 72 67 
       62 61 32 00 
04283A 73 70 72 69 0284*  fn_pac_ded_00_10: db "sprites/pac_ded_00_10.rgba2",0
       74 65 73 2F 
       70 61 63 5F 
       64 65 64 5F 
       30 30 5F 31 
       30 2E 72 67 
       62 61 32 00 
042856 73 70 72 69 0285*  fn_pac_liv_00_00: db "sprites/pac_liv_00_00.rgba2",0
       74 65 73 2F 
       70 61 63 5F 
       6C 69 76 5F 
       30 30 5F 30 
       30 2E 72 67 
       62 61 32 00 
042872 73 70 72 69 0286*  fn_pac_man_00_00: db "sprites/pac_man_00_00.rgba2",0
       74 65 73 2F 
       70 61 63 5F 
       6D 61 6E 5F 
       30 30 5F 30 
       30 2E 72 67 
       62 61 32 00 
04288E 73 70 72 69 0287*  fn_pac_man_00_01: db "sprites/pac_man_00_01.rgba2",0
       74 65 73 2F 
       70 61 63 5F 
       6D 61 6E 5F 
       30 30 5F 30 
       31 2E 72 67 
       62 61 32 00 
0428AA 73 70 72 69 0288*  fn_pac_man_00_02: db "sprites/pac_man_00_02.rgba2",0
       74 65 73 2F 
       70 61 63 5F 
       6D 61 6E 5F 
       30 30 5F 30 
       32 2E 72 67 
       62 61 32 00 
0428C6 73 70 72 69 0289*  fn_pac_man_01_00: db "sprites/pac_man_01_00.rgba2",0
       74 65 73 2F 
       70 61 63 5F 
       6D 61 6E 5F 
       30 31 5F 30 
       30 2E 72 67 
       62 61 32 00 
0428E2 73 70 72 69 0290*  fn_pac_man_01_01: db "sprites/pac_man_01_01.rgba2",0
       74 65 73 2F 
       70 61 63 5F 
       6D 61 6E 5F 
       30 31 5F 30 
       31 2E 72 67 
       62 61 32 00 
0428FE 73 70 72 69 0291*  fn_pac_man_01_02: db "sprites/pac_man_01_02.rgba2",0
       74 65 73 2F 
       70 61 63 5F 
       6D 61 6E 5F 
       30 31 5F 30 
       32 2E 72 67 
       62 61 32 00 
04291A 73 70 72 69 0292*  fn_pac_man_02_00: db "sprites/pac_man_02_00.rgba2",0
       74 65 73 2F 
       70 61 63 5F 
       6D 61 6E 5F 
       30 32 5F 30 
       30 2E 72 67 
       62 61 32 00 
042936 73 70 72 69 0293*  fn_pac_man_02_01: db "sprites/pac_man_02_01.rgba2",0
       74 65 73 2F 
       70 61 63 5F 
       6D 61 6E 5F 
       30 32 5F 30 
       31 2E 72 67 
       62 61 32 00 
042952 73 70 72 69 0294*  fn_pac_man_02_02: db "sprites/pac_man_02_02.rgba2",0
       74 65 73 2F 
       70 61 63 5F 
       6D 61 6E 5F 
       30 32 5F 30 
       32 2E 72 67 
       62 61 32 00 
04296E 73 70 72 69 0295*  fn_pac_man_03_00: db "sprites/pac_man_03_00.rgba2",0
       74 65 73 2F 
       70 61 63 5F 
       6D 61 6E 5F 
       30 33 5F 30 
       30 2E 72 67 
       62 61 32 00 
04298A 73 70 72 69 0296*  fn_pac_man_03_01: db "sprites/pac_man_03_01.rgba2",0
       74 65 73 2F 
       70 61 63 5F 
       6D 61 6E 5F 
       30 33 5F 30 
       31 2E 72 67 
       62 61 32 00 
0429A6 73 70 72 69 0297*  fn_pac_man_03_02: db "sprites/pac_man_03_02.rgba2",0
       74 65 73 2F 
       70 61 63 5F 
       6D 61 6E 5F 
       30 33 5F 30 
       32 2E 72 67 
       62 61 32 00 
0429C2 73 70 72 69 0298*  fn_pinky_0: db "sprites/pinky_0.rgba2",0
       74 65 73 2F 
       70 69 6E 6B 
       79 5F 30 2E 
       72 67 62 61 
       32 00       
0429D8 73 70 72 69 0299*  fn_pinky_1: db "sprites/pinky_1.rgba2",0
       74 65 73 2F 
       70 69 6E 6B 
       79 5F 31 2E 
       72 67 62 61 
       32 00       
0429EE 73 70 72 69 0300*  fn_pinky_2: db "sprites/pinky_2.rgba2",0
       74 65 73 2F 
       70 69 6E 6B 
       79 5F 32 2E 
       72 67 62 61 
       32 00       
042A04 73 70 72 69 0301*  fn_pinky_3: db "sprites/pinky_3.rgba2",0
       74 65 73 2F 
       70 69 6E 6B 
       79 5F 33 2E 
       72 67 62 61 
       32 00       
042A1A 73 70 72 69 0302*  fn_pinky_4: db "sprites/pinky_4.rgba2",0
       74 65 73 2F 
       70 69 6E 6B 
       79 5F 34 2E 
       72 67 62 61 
       32 00       
042A30 73 70 72 69 0303*  fn_pinky_5: db "sprites/pinky_5.rgba2",0
       74 65 73 2F 
       70 69 6E 6B 
       79 5F 35 2E 
       72 67 62 61 
       32 00       
042A46 73 70 72 69 0304*  fn_pinky_6: db "sprites/pinky_6.rgba2",0
       74 65 73 2F 
       70 69 6E 6B 
       79 5F 36 2E 
       72 67 62 61 
       32 00       
042A5C 73 70 72 69 0305*  fn_pinky_7: db "sprites/pinky_7.rgba2",0
       74 65 73 2F 
       70 69 6E 6B 
       79 5F 37 2E 
       72 67 62 61 
       32 00       
042A72 73 70 72 69 0306*  fn_reverse_0: db "sprites/reverse_0.rgba2",0
       74 65 73 2F 
       72 65 76 65 
       72 73 65 5F 
       30 2E 72 67 
       62 61 32 00 
042A8A 73 70 72 69 0307*  fn_reverse_1: db "sprites/reverse_1.rgba2",0
       74 65 73 2F 
       72 65 76 65 
       72 73 65 5F 
       31 2E 72 67 
       62 61 32 00 
042AA2 73 70 72 69 0308*  fn_reverse_2: db "sprites/reverse_2.rgba2",0
       74 65 73 2F 
       72 65 76 65 
       72 73 65 5F 
       32 2E 72 67 
       62 61 32 00 
042ABA 73 70 72 69 0309*  fn_reverse_3: db "sprites/reverse_3.rgba2",0
       74 65 73 2F 
       72 65 76 65 
       72 73 65 5F 
       33 2E 72 67 
       62 61 32 00 
042AD2 73 70 72 69 0310*  fn_reverse_4: db "sprites/reverse_4.rgba2",0
       74 65 73 2F 
       72 65 76 65 
       72 73 65 5F 
       34 2E 72 67 
       62 61 32 00 
042AEA 73 70 72 69 0311*  fn_reverse_5: db "sprites/reverse_5.rgba2",0
       74 65 73 2F 
       72 65 76 65 
       72 73 65 5F 
       35 2E 72 67 
       62 61 32 00 
042B02 73 70 72 69 0312*  fn_reverse_6: db "sprites/reverse_6.rgba2",0
       74 65 73 2F 
       72 65 76 65 
       72 73 65 5F 
       36 2E 72 67 
       62 61 32 00 
042B1A 73 70 72 69 0313*  fn_reverse_7: db "sprites/reverse_7.rgba2",0
       74 65 73 2F 
       72 65 76 65 
       72 73 65 5F 
       37 2E 72 67 
       62 61 32 00 
042B32 73 70 72 69 0314*  fn_tile_00: db "sprites/tile_00.rgba2",0
       74 65 73 2F 
       74 69 6C 65 
       5F 30 30 2E 
       72 67 62 61 
       32 00       
042B48 73 70 72 69 0315*  fn_tile_01: db "sprites/tile_01.rgba2",0
       74 65 73 2F 
       74 69 6C 65 
       5F 30 31 2E 
       72 67 62 61 
       32 00       
042B5E 73 70 72 69 0316*  fn_tile_02: db "sprites/tile_02.rgba2",0
       74 65 73 2F 
       74 69 6C 65 
       5F 30 32 2E 
       72 67 62 61 
       32 00       
042B74 73 70 72 69 0317*  fn_tile_03: db "sprites/tile_03.rgba2",0
       74 65 73 2F 
       74 69 6C 65 
       5F 30 33 2E 
       72 67 62 61 
       32 00       
042B8A 73 70 72 69 0318*  fn_tile_04: db "sprites/tile_04.rgba2",0
       74 65 73 2F 
       74 69 6C 65 
       5F 30 34 2E 
       72 67 62 61 
       32 00       
042BA0 73 70 72 69 0319*  fn_tile_05: db "sprites/tile_05.rgba2",0
       74 65 73 2F 
       74 69 6C 65 
       5F 30 35 2E 
       72 67 62 61 
       32 00       
042BB6 73 70 72 69 0320*  fn_tile_06: db "sprites/tile_06.rgba2",0
       74 65 73 2F 
       74 69 6C 65 
       5F 30 36 2E 
       72 67 62 61 
       32 00       
042BCC 73 70 72 69 0321*  fn_tile_07: db "sprites/tile_07.rgba2",0
       74 65 73 2F 
       74 69 6C 65 
       5F 30 37 2E 
       72 67 62 61 
       32 00       
042BE2 73 70 72 69 0322*  fn_tile_08: db "sprites/tile_08.rgba2",0
       74 65 73 2F 
       74 69 6C 65 
       5F 30 38 2E 
       72 67 62 61 
       32 00       
042BF8 73 70 72 69 0323*  fn_tile_09: db "sprites/tile_09.rgba2",0
       74 65 73 2F 
       74 69 6C 65 
       5F 30 39 2E 
       72 67 62 61 
       32 00       
042C0E 73 70 72 69 0324*  fn_tile_10: db "sprites/tile_10.rgba2",0
       74 65 73 2F 
       74 69 6C 65 
       5F 31 30 2E 
       72 67 62 61 
       32 00       
042C24 73 70 72 69 0325*  fn_tile_11: db "sprites/tile_11.rgba2",0
       74 65 73 2F 
       74 69 6C 65 
       5F 31 31 2E 
       72 67 62 61 
       32 00       
042C3A 73 70 72 69 0326*  fn_tile_12: db "sprites/tile_12.rgba2",0
       74 65 73 2F 
       74 69 6C 65 
       5F 31 32 2E 
       72 67 62 61 
       32 00       
042C50 73 70 72 69 0327*  fn_tile_13: db "sprites/tile_13.rgba2",0
       74 65 73 2F 
       74 69 6C 65 
       5F 31 33 2E 
       72 67 62 61 
       32 00       
042C66 73 70 72 69 0328*  fn_tile_14: db "sprites/tile_14.rgba2",0
       74 65 73 2F 
       74 69 6C 65 
       5F 31 34 2E 
       72 67 62 61 
       32 00       
042C7C 73 70 72 69 0329*  fn_tile_15: db "sprites/tile_15.rgba2",0
       74 65 73 2F 
       74 69 6C 65 
       5F 31 35 2E 
       72 67 62 61 
       32 00       
042C92 73 70 72 69 0330*  fn_tile_16: db "sprites/tile_16.rgba2",0
       74 65 73 2F 
       74 69 6C 65 
       5F 31 36 2E 
       72 67 62 61 
       32 00       
042CA8 73 70 72 69 0331*  fn_tile_17: db "sprites/tile_17.rgba2",0
       74 65 73 2F 
       74 69 6C 65 
       5F 31 37 2E 
       72 67 62 61 
       32 00       
042CBE 73 70 72 69 0332*  fn_tile_18: db "sprites/tile_18.rgba2",0
       74 65 73 2F 
       74 69 6C 65 
       5F 31 38 2E 
       72 67 62 61 
       32 00       
042CD4 73 70 72 69 0333*  fn_tile_19: db "sprites/tile_19.rgba2",0
       74 65 73 2F 
       74 69 6C 65 
       5F 31 39 2E 
       72 67 62 61 
       32 00       
042CEA 73 70 72 69 0334*  fn_tile_20: db "sprites/tile_20.rgba2",0
       74 65 73 2F 
       74 69 6C 65 
       5F 32 30 2E 
       72 67 62 61 
       32 00       
042D00 73 70 72 69 0335*  fn_tile_21: db "sprites/tile_21.rgba2",0
       74 65 73 2F 
       74 69 6C 65 
       5F 32 31 2E 
       72 67 62 61 
       32 00       
042D16 73 70 72 69 0336*  fn_tile_22: db "sprites/tile_22.rgba2",0
       74 65 73 2F 
       74 69 6C 65 
       5F 32 32 2E 
       72 67 62 61 
       32 00       
042D2C 73 70 72 69 0337*  fn_tile_23: db "sprites/tile_23.rgba2",0
       74 65 73 2F 
       74 69 6C 65 
       5F 32 33 2E 
       72 67 62 61 
       32 00       
042D42 73 70 72 69 0338*  fn_tile_24: db "sprites/tile_24.rgba2",0
       74 65 73 2F 
       74 69 6C 65 
       5F 32 34 2E 
       72 67 62 61 
       32 00       
042D58 73 70 72 69 0339*  fn_tile_25: db "sprites/tile_25.rgba2",0
       74 65 73 2F 
       74 69 6C 65 
       5F 32 35 2E 
       72 67 62 61 
       32 00       
042D6E 73 70 72 69 0340*  fn_tile_26: db "sprites/tile_26.rgba2",0
       74 65 73 2F 
       74 69 6C 65 
       5F 32 36 2E 
       72 67 62 61 
       32 00       
042D84 73 70 72 69 0341*  fn_tile_27: db "sprites/tile_27.rgba2",0
       74 65 73 2F 
       74 69 6C 65 
       5F 32 37 2E 
       72 67 62 61 
       32 00       
042D9A 73 70 72 69 0342*  fn_tile_28: db "sprites/tile_28.rgba2",0
       74 65 73 2F 
       74 69 6C 65 
       5F 32 38 2E 
       72 67 62 61 
       32 00       
042DB0 73 70 72 69 0343*  fn_tile_29: db "sprites/tile_29.rgba2",0
       74 65 73 2F 
       74 69 6C 65 
       5F 32 39 2E 
       72 67 62 61 
       32 00       
042DC6 73 70 72 69 0344*  fn_tile_30: db "sprites/tile_30.rgba2",0
       74 65 73 2F 
       74 69 6C 65 
       5F 33 30 2E 
       72 67 62 61 
       32 00       
042DDC 73 70 72 69 0345*  fn_tile_31: db "sprites/tile_31.rgba2",0
       74 65 73 2F 
       74 69 6C 65 
       5F 33 31 2E 
       72 67 62 61 
       32 00       
042DF2 73 70 72 69 0346*  fn_tile_32: db "sprites/tile_32.rgba2",0
       74 65 73 2F 
       74 69 6C 65 
       5F 33 32 2E 
       72 67 62 61 
       32 00       
042E08 73 70 72 69 0347*  fn_tile_33: db "sprites/tile_33.rgba2",0
       74 65 73 2F 
       74 69 6C 65 
       5F 33 33 2E 
       72 67 62 61 
       32 00       
042E1E 73 70 72 69 0348*  fn_tile_34: db "sprites/tile_34.rgba2",0
       74 65 73 2F 
       74 69 6C 65 
       5F 33 34 2E 
       72 67 62 61 
       32 00       
042E34             0046       include "maze.inc"
042E34             0001*  maze_cols: equ 0
042E34             0002*  maze_rows: equ 3
042E34             0003*  maze_tile_size: equ 6
042E34             0004*  maze_null_tile: equ 9
042E34             0005*  maze_x: equ 12
042E34             0006*  maze_y: equ 15
042E34             0007*  maze_base_bufferId: equ 18
042E34             0008*  
042E34             0009*  ; draw a maze based on a maze definition table
042E34             0010*  ; inputs: ix = pointer to maze definition table
042E34             0011*  ; outputs: pretty pixels
042E34             0012*  ; destroys: all the things
042E34             0013*  ; TODO: this could be significantly simplified if the null tile number
042E34             0014*  ;       and low byte of the base bufferId are both 0
042E34             0015*  draw_maze:
042E34             0016*  ; initialize variables
042E34 DD E5       0017*      push ix
042E36 FD E1       0018*      pop iy
042E38 ED 32 15    0019*      lea ix,ix+maze_base_bufferId+3 ; point to the first cell of the maze data
042E3B 21 00 00 00 0020*      ld hl,0
042E3F FD 2F 0C    0021*      ld (iy+maze_x),hl
042E42 FD 2F 0F    0022*      ld (iy+maze_y),hl
042E45 FD 6E 00    0023*      ld l,(iy+maze_cols)
042E48 FD 66 03    0024*      ld h,(iy+maze_rows)
042E4B             0025*  @loop:
042E4B E5          0026*      push hl ; row/col loop counter
042E4C DD 7E 00    0027*      ld a,(ix) ; tile number
042E4F FD BE 09    0028*      cp (iy+maze_null_tile) ; is it the null tile?
042E52 28 19       0029*      jr z,@next_tile ; yes, so don't draw anything
042E54 FD 27 12    0030*      ld hl,(iy+maze_base_bufferId) ; base bufferId
042E57 11 00 00 00 0031*      ld de,0 ; clear deu and d
042E5B DD 5E 00    0032*      ld e,(ix) ; tile number
042E5E 19          0033*      add hl,de ; hl = tile bufferId
042E5F CD 72 15 04 0034*      call vdu_buff_select
042E63 FD 07 0C    0035*      ld bc,(iy+maze_x) ; x-coordinate
042E66 FD 17 0F    0036*      ld de,(iy+maze_y) ; y-coordinate
042E69 CD CE 18 04 0037*      call vdu_plot_bmp
042E6D             0038*  @next_tile:
042E6D FD 27 0C    0039*      ld hl,(iy+maze_x) ; x-coordinate
042E70 FD 17 06    0040*      ld de,(iy+maze_tile_size) ; tile size
042E73 19          0041*      add hl,de ; x-coordinate + tile size
042E74 FD 2F 0C    0042*      ld (iy+maze_x),hl ; x-coordinate = x-coordinate + tile size
042E77 DD 23       0043*      inc ix ; bump pointer to next tile
042E79 E1          0044*      pop hl ; row/col loop counter
042E7A 2D          0045*      dec l
042E7B C2 4B 2E 04 0046*      jp nz,@loop
042E7F 25          0047*      dec h
042E80 C8          0048*      ret z ; done
042E81 FD 6E 00    0049*      ld l,(iy+maze_cols) ; number of columns
042E84 E5          0050*      push hl
042E85 FD 27 0F    0051*      ld hl,(iy+maze_y) ; y-coordinate
042E88 FD 17 06    0052*      ld de,(iy+maze_tile_size) ; tile size
042E8B 19          0053*      add hl,de ; y-coordinate + tile size
042E8C FD 2F 0F    0054*      ld (iy+maze_y),hl ; y-coordinate = y-coordinate + tile size
042E8F 21 00 00 00 0055*      ld hl,0 ; x-coordinate
042E93 FD 2F 0C    0056*      ld (iy+maze_x),hl ; x-coordinate = 0
042E96 E1          0057*      pop hl
042E97 C3 4B 2E 04 0058*      jp @loop
042E9B             0059*  
042E9B             0060*  ; converts screen coordinates to map cell coordinates
042E9B             0061*  ; inputs: ix = pointer to map defintion, ub.c = x-coordinate, ud.e = y-coordinate in 16.8 fixed point format
042E9B             0062*  ; outputs: bc,de = row,col, hl = cell index, ix = pointer to cell data
042E9B             0063*  ; destroys: a, hl, ix
042E9B             0064*  ; notes: map and screen coordinates assume inverted y-axis with origin at top left
042E9B             0065*  ;        tile size must be a power of two
042E9B             0066*  ;        screen coordinates are treated as unsigned with no checks to the contrary
042E9B             0067*  screen_to_cell:
042E9B             0068*  ; get the x-coordinate
042E9B C5          0069*      push bc
042E9C E1          0070*      pop hl
042E9D CD CF 07 04 0071*      call hlu_udiv256 ; hl = int(x)
042EA1 DD 7E 06    0072*      ld a,(ix+maze_tile_size)
042EA4 CD 4C 07 04 0073*      call shr_hlu_log2a ; hl = int(int(x) / tile size) = col
042EA8 EB          0074*      ex de,hl ; uh.l = y-coordinate, de = col
042EA9             0075*  ; get the y-coordinate
042EA9 CD CF 07 04 0076*      call hlu_udiv256 ; hl = int(y)
042EAD DD 7E 06    0077*      ld a,(ix+maze_tile_size)
042EB0 CD 4C 07 04 0078*      call shr_hlu_log2a ; hl = int(int(y) / tile size) = row
042EB4 E5          0079*      push hl ; save row
042EB5             0080*  ; compute cell index = row * cols + col
042EB5             0081*  ; at this point hl = row, de = col
042EB5 DD 66 00    0082*      ld h,(ix+maze_cols)
042EB8 ED 6C       0083*      mlt hl ; hl = row * cols
042EBA 19          0084*      add hl,de ; hl = row * cols + col = cell index
042EBB EB          0085*      ex de,hl ; de = cell index, hl = col
042EBC             0086*  ; point to cell data
042EBC ED 32 15    0087*      lea ix,ix+maze_base_bufferId+3
042EBF DD 19       0088*      add ix,de
042EC1             0089*  ; return results
042EC1 EB          0090*      ex de,hl ; de = col, hl = cell index
042EC2 D5          0091*      push de
042EC3 C1          0092*      pop bc ; bc = col
042EC4 D1          0093*      pop de ; de = row
042EC5             0094*  
042EC5 C9          0095*      ret
042EC6             0047       include "maze_index.inc" ; DEBUG
042EC6             0001*  ; for easy verification that screen_to_cell and other maze lookup functions work correctly
042EC6             0002*  
042EC6             0003*  maze_index:
042EC6 1C 00 00    0004*  maze_index_num_cols: dl 28
042EC9 1F 00 00    0005*  maze_index_num_rows: dl 31
042ECC 08 00 00    0006*  maze_index_tile_size: dl 8
042ECF 00 00 00    0007*  maze_index_null_tile: dl 0 ; not used for maze index definitions.
042ED2 00 00 00    0008*  maze_index_x: dl 0
042ED5 00 00 00    0009*  maze_index_y: dl 0
042ED8 00 00 00    0010*  maze_index_base_bufferId: dl 0 ; not used for maze index definitions.
042EDB             0011*  
042EDB             0012*  maze_index_map:
042EDB 00 01 02 03 0013*      db 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27
       04 05 06 07 
       08 09 0A 0B 
       0C 0D 0E 0F 
       10 11 12 13 
       14 15 16 17 
       18 19 1A 1B 
042EF7 1C 1D 1E 1F 0014*      db 28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55
       20 21 22 23 
       24 25 26 27 
       28 29 2A 2B 
       2C 2D 2E 2F 
       30 31 32 33 
       34 35 36 37 
042F13 38 39 3A 3B 0015*      db 56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83
       3C 3D 3E 3F 
       40 41 42 43 
       44 45 46 47 
       48 49 4A 4B 
       4C 4D 4E 4F 
       50 51 52 53 
042F2F 54 55 56 57 0016*      db 84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111
       58 59 5A 5B 
       5C 5D 5E 5F 
       60 61 62 63 
       64 65 66 67 
       68 69 6A 6B 
       6C 6D 6E 6F 
042F4B 70 71 72 73 0017*      db 112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139
       74 75 76 77 
       78 79 7A 7B 
       7C 7D 7E 7F 
       80 81 82 83 
       84 85 86 87 
       88 89 8A 8B 
042F67 8C 8D 8E 8F 0018*      db 140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167
       90 91 92 93 
       94 95 96 97 
       98 99 9A 9B 
       9C 9D 9E 9F 
       A0 A1 A2 A3 
       A4 A5 A6 A7 
042F83 A8 A9 AA AB 0019*      db 168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195
       AC AD AE AF 
       B0 B1 B2 B3 
       B4 B5 B6 B7 
       B8 B9 BA BB 
       BC BD BE BF 
       C0 C1 C2 C3 
042F9F C4 C5 C6 C7 0020*      db 196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223
       C8 C9 CA CB 
       CC CD CE CF 
       D0 D1 D2 D3 
       D4 D5 D6 D7 
       D8 D9 DA DB 
       DC DD DE DF 
042FBB E0 E1 E2 E3 0021*      db 224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251
       E4 E5 E6 E7 
       E8 E9 EA EB 
       EC ED EE EF 
       F0 F1 F2 F3 
       F4 F5 F6 F7 
       F8 F9 FA FB 
042FD7 FC FD FE FF 0022*      db 252,253,254,255,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23
       00 01 02 03 
       04 05 06 07 
       08 09 0A 0B 
       0C 0D 0E 0F 
       10 11 12 13 
       14 15 16 17 
042FF3 18 19 1A 1B 0023*      db 24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51
       1C 1D 1E 1F 
       20 21 22 23 
       24 25 26 27 
       28 29 2A 2B 
       2C 2D 2E 2F 
       30 31 32 33 
04300F 34 35 36 37 0024*      db 52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79
       38 39 3A 3B 
       3C 3D 3E 3F 
       40 41 42 43 
       44 45 46 47 
       48 49 4A 4B 
       4C 4D 4E 4F 
04302B 50 51 52 53 0025*      db 80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107
       54 55 56 57 
       58 59 5A 5B 
       5C 5D 5E 5F 
       60 61 62 63 
       64 65 66 67 
       68 69 6A 6B 
043047 6C 6D 6E 6F 0026*      db 108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135
       70 71 72 73 
       74 75 76 77 
       78 79 7A 7B 
       7C 7D 7E 7F 
       80 81 82 83 
       84 85 86 87 
043063 88 89 8A 8B 0027*      db 136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163
       8C 8D 8E 8F 
       90 91 92 93 
       94 95 96 97 
       98 99 9A 9B 
       9C 9D 9E 9F 
       A0 A1 A2 A3 
04307F A4 A5 A6 A7 0028*      db 164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191
       A8 A9 AA AB 
       AC AD AE AF 
       B0 B1 B2 B3 
       B4 B5 B6 B7 
       B8 B9 BA BB 
       BC BD BE BF 
04309B C0 C1 C2 C3 0029*      db 192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219
       C4 C5 C6 C7 
       C8 C9 CA CB 
       CC CD CE CF 
       D0 D1 D2 D3 
       D4 D5 D6 D7 
       D8 D9 DA DB 
0430B7 DC DD DE DF 0030*      db 220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247
       E0 E1 E2 E3 
       E4 E5 E6 E7 
       E8 E9 EA EB 
       EC ED EE EF 
       F0 F1 F2 F3 
       F4 F5 F6 F7 
0430D3 F8 F9 FA FB 0031*      db 248,249,250,251,252,253,254,255,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19
       FC FD FE FF 
       00 01 02 03 
       04 05 06 07 
       08 09 0A 0B 
       0C 0D 0E 0F 
       10 11 12 13 
0430EF 14 15 16 17 0032*      db 20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47
       18 19 1A 1B 
       1C 1D 1E 1F 
       20 21 22 23 
       24 25 26 27 
       28 29 2A 2B 
       2C 2D 2E 2F 
04310B 30 31 32 33 0033*      db 48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75
       34 35 36 37 
       38 39 3A 3B 
       3C 3D 3E 3F 
       40 41 42 43 
       44 45 46 47 
       48 49 4A 4B 
043127 4C 4D 4E 4F 0034*      db 76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103
       50 51 52 53 
       54 55 56 57 
       58 59 5A 5B 
       5C 5D 5E 5F 
       60 61 62 63 
       64 65 66 67 
043143 68 69 6A 6B 0035*      db 104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131
       6C 6D 6E 6F 
       70 71 72 73 
       74 75 76 77 
       78 79 7A 7B 
       7C 7D 7E 7F 
       80 81 82 83 
04315F 84 85 86 87 0036*      db 132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159
       88 89 8A 8B 
       8C 8D 8E 8F 
       90 91 92 93 
       94 95 96 97 
       98 99 9A 9B 
       9C 9D 9E 9F 
04317B A0 A1 A2 A3 0037*      db 160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187
       A4 A5 A6 A7 
       A8 A9 AA AB 
       AC AD AE AF 
       B0 B1 B2 B3 
       B4 B5 B6 B7 
       B8 B9 BA BB 
043197 BC BD BE BF 0038*      db 188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215
       C0 C1 C2 C3 
       C4 C5 C6 C7 
       C8 C9 CA CB 
       CC CD CE CF 
       D0 D1 D2 D3 
       D4 D5 D6 D7 
0431B3 D8 D9 DA DB 0039*      db 216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243
       DC DD DE DF 
       E0 E1 E2 E3 
       E4 E5 E6 E7 
       E8 E9 EA EB 
       EC ED EE EF 
       F0 F1 F2 F3 
0431CF F4 F5 F6 F7 0040*      db 244,245,246,247,248,249,250,251,252,253,254,255,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
       F8 F9 FA FB 
       FC FD FE FF 
       00 01 02 03 
       04 05 06 07 
       08 09 0A 0B 
       0C 0D 0E 0F 
0431EB 10 11 12 13 0041*      db 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43
       14 15 16 17 
       18 19 1A 1B 
       1C 1D 1E 1F 
       20 21 22 23 
       24 25 26 27 
       28 29 2A 2B 
043207 2C 2D 2E 2F 0042*      db 44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71
       30 31 32 33 
       34 35 36 37 
       38 39 3A 3B 
       3C 3D 3E 3F 
       40 41 42 43 
       44 45 46 47 
043223 48 49 4A 4B 0043*      db 72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99
       4C 4D 4E 4F 
       50 51 52 53 
       54 55 56 57 
       58 59 5A 5B 
       5C 5D 5E 5F 
       60 61 62 63 
04323F             0048       include "maze_walls.inc"
04323F             0001*  ; Generated by beegee747/build/scripts/build_99_asm_maze_walls.py
04323F             0002*  
04323F             0003*  maze_walls:
04323F 1C 00 00    0004*  maze_walls_num_cols: dl 28
043242 1F 00 00    0005*  maze_walls_num_rows: dl 31
043245 08 00 00    0006*  maze_walls_tile_size: dl 8
043248 06 00 00    0007*  maze_walls_null_tile: dl 6
04324B 00 00 00    0008*  maze_walls_x: dl 0
04324E 00 00 00    0009*  maze_walls_y: dl 0
043251 4E 01 00    0010*  maze_walls_base_bufferId: dl BUF_TILE_00
043254             0011*  
043254             0012*  maze_walls_map:
043254 00 01 01 01 0013*      db 00,01,01,01,01,01,01,01,01,01,01,01,01,02,03,01,01,01,01,01,01,01,01,01,01,01,01,04
       01 01 01 01 
       01 01 01 01 
       01 02 03 01 
       01 01 01 01 
       01 01 01 01 
       01 01 01 04 
043270 05 06 06 06 0014*      db 05,06,06,06,06,06,06,06,06,06,06,06,06,07,08,06,06,06,06,06,06,06,06,06,06,06,06,09
       06 06 06 06 
       06 06 06 06 
       06 07 08 06 
       06 06 06 06 
       06 06 06 06 
       06 06 06 09 
04328C 05 06 0A 0B 0015*      db 05,06,10,11,11,12,06,10,11,11,11,12,06,07,08,06,10,11,11,11,12,06,10,11,11,12,06,09
       0B 0C 06 0A 
       0B 0B 0B 0C 
       06 07 08 06 
       0A 0B 0B 0B 
       0C 06 0A 0B 
       0B 0C 06 09 
0432A8 05 06 07 06 0016*      db 05,06,07,06,06,08,06,07,06,06,06,08,06,07,08,06,07,06,06,06,08,06,07,06,06,08,06,09
       06 08 06 07 
       06 06 06 08 
       06 07 08 06 
       07 06 06 06 
       08 06 07 06 
       06 08 06 09 
0432C4 05 06 0D 0E 0017*      db 05,06,13,14,14,15,06,13,14,14,14,15,06,13,15,06,13,14,14,14,15,06,13,14,14,15,06,09
       0E 0F 06 0D 
       0E 0E 0E 0F 
       06 0D 0F 06 
       0D 0E 0E 0E 
       0F 06 0D 0E 
       0E 0F 06 09 
0432E0 05 06 06 06 0018*      db 05,06,06,06,06,06,06,06,06,06,06,06,06,06,06,06,06,06,06,06,06,06,06,06,06,06,06,09
       06 06 06 06 
       06 06 06 06 
       06 06 06 06 
       06 06 06 06 
       06 06 06 06 
       06 06 06 09 
0432FC 05 06 0A 0B 0019*      db 05,06,10,11,11,12,06,10,12,06,10,11,11,11,11,11,11,12,06,10,12,06,10,11,11,12,06,09
       0B 0C 06 0A 
       0C 06 0A 0B 
       0B 0B 0B 0B 
       0B 0C 06 0A 
       0C 06 0A 0B 
       0B 0C 06 09 
043318 05 06 0D 0E 0020*      db 05,06,13,14,14,15,06,07,08,06,13,14,14,16,17,14,14,15,06,07,08,06,13,14,14,15,06,09
       0E 0F 06 07 
       08 06 0D 0E 
       0E 10 11 0E 
       0E 0F 06 07 
       08 06 0D 0E 
       0E 0F 06 09 
043334 05 06 06 06 0021*      db 05,06,06,06,06,06,06,07,08,06,06,06,06,07,08,06,06,06,06,07,08,06,06,06,06,06,06,09
       06 06 06 07 
       08 06 06 06 
       06 07 08 06 
       06 06 06 07 
       08 06 06 06 
       06 06 06 09 
043350 12 13 13 13 0022*      db 18,19,19,19,19,12,06,07,20,11,11,12,06,07,08,06,10,11,11,21,08,06,10,19,19,19,19,22
       13 0C 06 07 
       14 0B 0B 0C 
       06 07 08 06 
       0A 0B 0B 15 
       08 06 0A 13 
       13 13 13 16 
04336C 06 06 06 06 0023*      db 06,06,06,06,06,05,06,07,17,14,14,15,06,13,15,06,13,14,14,16,08,06,09,06,06,06,06,06
       06 05 06 07 
       11 0E 0E 0F 
       06 0D 0F 06 
       0D 0E 0E 10 
       08 06 09 06 
       06 06 06 06 
043388 06 06 06 06 0024*      db 06,06,06,06,06,05,06,07,08,06,06,06,06,06,06,06,06,06,06,07,08,06,09,06,06,06,06,06
       06 05 06 07 
       08 06 06 06 
       06 06 06 06 
       06 06 06 07 
       08 06 09 06 
       06 06 06 06 
0433A4 06 06 06 06 0025*      db 06,06,06,06,06,05,06,07,08,06,23,19,24,06,06,25,19,26,06,07,08,06,09,06,06,06,06,06
       06 05 06 07 
       08 06 17 13 
       18 06 06 19 
       13 1A 06 07 
       08 06 09 06 
       06 06 06 06 
0433C0 01 01 01 01 0026*      db 01,01,01,01,01,15,06,13,15,06,09,06,06,06,06,06,06,05,06,13,15,06,13,01,01,01,01,01
       01 0F 06 0D 
       0F 06 09 06 
       06 06 06 06 
       06 05 06 0D 
       0F 06 0D 01 
       01 01 01 01 
0433DC 06 06 06 06 0027*      db 06,06,06,06,06,06,06,06,06,06,09,06,06,06,06,06,06,05,06,06,06,06,06,06,06,06,06,06
       06 06 06 06 
       06 06 09 06 
       06 06 06 06 
       06 05 06 06 
       06 06 06 06 
       06 06 06 06 
0433F8 13 13 13 13 0028*      db 19,19,19,19,19,12,06,10,12,06,09,06,06,06,06,06,06,05,06,10,12,06,10,19,19,19,19,19
       13 0C 06 0A 
       0C 06 09 06 
       06 06 06 06 
       06 05 06 0A 
       0C 06 0A 13 
       13 13 13 13 
043414 06 06 06 06 0029*      db 06,06,06,06,06,05,06,07,08,06,27,01,01,01,01,01,01,28,06,07,08,06,09,06,06,06,06,06
       06 05 06 07 
       08 06 1B 01 
       01 01 01 01 
       01 1C 06 07 
       08 06 09 06 
       06 06 06 06 
043430 06 06 06 06 0030*      db 06,06,06,06,06,05,06,07,08,06,06,06,06,06,06,06,06,06,06,07,08,06,09,06,06,06,06,06
       06 05 06 07 
       08 06 06 06 
       06 06 06 06 
       06 06 06 07 
       08 06 09 06 
       06 06 06 06 
04344C 06 06 06 06 0031*      db 06,06,06,06,06,05,06,07,08,06,10,11,11,11,11,11,11,12,06,07,08,06,09,06,06,06,06,06
       06 05 06 07 
       08 06 0A 0B 
       0B 0B 0B 0B 
       0B 0C 06 07 
       08 06 09 06 
       06 06 06 06 
043468 00 01 01 01 0032*      db 00,01,01,01,01,15,06,13,15,06,13,14,14,16,17,14,14,15,06,13,15,06,13,01,01,01,01,29
       01 0F 06 0D 
       0F 06 0D 0E 
       0E 10 11 0E 
       0E 0F 06 0D 
       0F 06 0D 01 
       01 01 01 1D 
043484 05 06 06 06 0033*      db 05,06,06,06,06,06,06,06,06,06,06,06,06,07,08,06,06,06,06,06,06,06,06,06,06,06,06,09
       06 06 06 06 
       06 06 06 06 
       06 07 08 06 
       06 06 06 06 
       06 06 06 06 
       06 06 06 09 
0434A0 05 06 0A 0B 0034*      db 05,06,10,11,11,12,06,10,11,11,11,12,06,07,08,06,10,11,11,11,12,06,10,11,11,12,06,09
       0B 0C 06 0A 
       0B 0B 0B 0C 
       06 07 08 06 
       0A 0B 0B 0B 
       0C 06 0A 0B 
       0B 0C 06 09 
0434BC 05 06 0D 0E 0035*      db 05,06,13,14,16,08,06,13,14,14,14,15,06,13,15,06,13,14,14,14,15,06,07,17,14,15,06,09
       10 08 06 0D 
       0E 0E 0E 0F 
       06 0D 0F 06 
       0D 0E 0E 0E 
       0F 06 07 11 
       0E 0F 06 09 
0434D8 05 06 06 06 0036*      db 05,06,06,06,07,08,06,06,06,06,06,06,06,06,06,06,06,06,06,06,06,06,07,08,06,06,06,09
       07 08 06 06 
       06 06 06 06 
       06 06 06 06 
       06 06 06 06 
       06 06 07 08 
       06 06 06 09 
0434F4 1E 0B 0C 06 0037*      db 30,11,12,06,07,08,06,10,12,06,10,11,11,11,11,11,11,12,06,10,12,06,07,08,06,10,11,31
       07 08 06 0A 
       0C 06 0A 0B 
       0B 0B 0B 0B 
       0B 0C 06 0A 
       0C 06 07 08 
       06 0A 0B 1F 
043510 20 0E 0F 06 0038*      db 32,14,15,06,13,15,06,07,08,06,13,14,14,16,17,14,14,15,06,07,08,06,13,15,06,13,14,33
       0D 0F 06 07 
       08 06 0D 0E 
       0E 10 11 0E 
       0E 0F 06 07 
       08 06 0D 0F 
       06 0D 0E 21 
04352C 05 06 06 06 0039*      db 05,06,06,06,06,06,06,07,08,06,06,06,06,07,08,06,06,06,06,07,08,06,06,06,06,06,06,09
       06 06 06 07 
       08 06 06 06 
       06 07 08 06 
       06 06 06 07 
       08 06 06 06 
       06 06 06 09 
043548 05 06 0A 0B 0040*      db 05,06,10,11,11,11,11,21,20,11,11,12,06,07,08,06,10,11,11,21,20,11,11,11,11,12,06,09
       0B 0B 0B 15 
       14 0B 0B 0C 
       06 07 08 06 
       0A 0B 0B 15 
       14 0B 0B 0B 
       0B 0C 06 09 
043564 05 06 0D 0E 0041*      db 05,06,13,14,14,14,14,14,14,14,14,15,06,13,15,06,13,14,14,14,14,14,14,14,14,15,06,09
       0E 0E 0E 0E 
       0E 0E 0E 0F 
       06 0D 0F 06 
       0D 0E 0E 0E 
       0E 0E 0E 0E 
       0E 0F 06 09 
043580 05 06 06 06 0042*      db 05,06,06,06,06,06,06,06,06,06,06,06,06,06,06,06,06,06,06,06,06,06,06,06,06,06,06,09
       06 06 06 06 
       06 06 06 06 
       06 06 06 06 
       06 06 06 06 
       06 06 06 06 
       06 06 06 09 
04359C 12 13 13 13 0043*      db 18,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,34
       13 13 13 13 
       13 13 13 13 
       13 13 13 13 
       13 13 13 13 
       13 13 13 13 
       13 13 13 22 
0435B8             0049       include "maze_path.inc"
0435B8             0001*  ; Generated by beegee747/build/scripts/build_99_asm_maze_walls.py
0435B8             0002*  ; Source file: beegee747/src/assets/design/sprites/maze_path/maze_path.csv
0435B8             0003*  
0435B8             0004*  maze_path:
0435B8 1C 00 00    0005*  maze_path_num_cols: dl 28
0435BB 1F 00 00    0006*  maze_path_num_rows: dl 31
0435BE 08 00 00    0007*  maze_path_tile_size: dl 8
0435C1 00 00 00    0008*  maze_path_null_tile: dl 0 ; not used for maze path definitions.
0435C4 00 00 00    0009*  maze_path_x: dl 0
0435C7 00 00 00    0010*  maze_path_y: dl 0
0435CA 00 00 00    0011*  maze_path_base_bufferId: dl 0 ; now used for maze path definitions.
0435CD             0012*  
0435CD             0013*  maze_path_map:
0435CD 00 01 02 03 0014*      db 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27
       04 05 06 07 
       08 09 0A 0B 
       0C 0D 0E 0F 
       10 11 12 13 
       14 15 16 17 
       18 19 1A 1B 
0435E9 1C 1D 1E 1F 0015*      db 28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55
       20 21 22 23 
       24 25 26 27 
       28 29 2A 2B 
       2C 2D 2E 2F 
       30 31 32 33 
       34 35 36 37 
043605 38 39 3A 3B 0016*      db 56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83
       3C 3D 3E 3F 
       40 41 42 43 
       44 45 46 47 
       48 49 4A 4B 
       4C 4D 4E 4F 
       50 51 52 53 
043621 54 55 56 57 0017*      db 84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111
       58 59 5A 5B 
       5C 5D 5E 5F 
       60 61 62 63 
       64 65 66 67 
       68 69 6A 6B 
       6C 6D 6E 6F 
04363D 70 71 72 73 0018*      db 112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139
       74 75 76 77 
       78 79 7A 7B 
       7C 7D 7E 7F 
       80 81 82 83 
       84 85 86 87 
       88 89 8A 8B 
043659 8C 8D 8E 8F 0019*      db 140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167
       90 91 92 93 
       94 95 96 97 
       98 99 9A 9B 
       9C 9D 9E 9F 
       A0 A1 A2 A3 
       A4 A5 A6 A7 
043675 A8 A9 AA AB 0020*      db 168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195
       AC AD AE AF 
       B0 B1 B2 B3 
       B4 B5 B6 B7 
       B8 B9 BA BB 
       BC BD BE BF 
       C0 C1 C2 C3 
043691 C4 C5 C6 C7 0021*      db 196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223
       C8 C9 CA CB 
       CC CD CE CF 
       D0 D1 D2 D3 
       D4 D5 D6 D7 
       D8 D9 DA DB 
       DC DD DE DF 
0436AD E0 E1 E2 E3 0022*      db 224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251
       E4 E5 E6 E7 
       E8 E9 EA EB 
       EC ED EE EF 
       F0 F1 F2 F3 
       F4 F5 F6 F7 
       F8 F9 FA FB 
0436C9 FC FD FE FF 0023*      db 252,253,254,255,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23
       00 01 02 03 
       04 05 06 07 
       08 09 0A 0B 
       0C 0D 0E 0F 
       10 11 12 13 
       14 15 16 17 
0436E5 18 19 1A 1B 0024*      db 24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51
       1C 1D 1E 1F 
       20 21 22 23 
       24 25 26 27 
       28 29 2A 2B 
       2C 2D 2E 2F 
       30 31 32 33 
043701 34 35 36 37 0025*      db 52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79
       38 39 3A 3B 
       3C 3D 3E 3F 
       40 41 42 43 
       44 45 46 47 
       48 49 4A 4B 
       4C 4D 4E 4F 
04371D 50 51 52 53 0026*      db 80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107
       54 55 56 57 
       58 59 5A 5B 
       5C 5D 5E 5F 
       60 61 62 63 
       64 65 66 67 
       68 69 6A 6B 
043739 6C 6D 6E 6F 0027*      db 108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135
       70 71 72 73 
       74 75 76 77 
       78 79 7A 7B 
       7C 7D 7E 7F 
       80 81 82 83 
       84 85 86 87 
043755 88 89 8A 8B 0028*      db 136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163
       8C 8D 8E 8F 
       90 91 92 93 
       94 95 96 97 
       98 99 9A 9B 
       9C 9D 9E 9F 
       A0 A1 A2 A3 
043771 A4 A5 A6 A7 0029*      db 164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191
       A8 A9 AA AB 
       AC AD AE AF 
       B0 B1 B2 B3 
       B4 B5 B6 B7 
       B8 B9 BA BB 
       BC BD BE BF 
04378D C0 C1 C2 C3 0030*      db 192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219
       C4 C5 C6 C7 
       C8 C9 CA CB 
       CC CD CE CF 
       D0 D1 D2 D3 
       D4 D5 D6 D7 
       D8 D9 DA DB 
0437A9 DC DD DE DF 0031*      db 220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247
       E0 E1 E2 E3 
       E4 E5 E6 E7 
       E8 E9 EA EB 
       EC ED EE EF 
       F0 F1 F2 F3 
       F4 F5 F6 F7 
0437C5 F8 F9 FA FB 0032*      db 248,249,250,251,252,253,254,255,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19
       FC FD FE FF 
       00 01 02 03 
       04 05 06 07 
       08 09 0A 0B 
       0C 0D 0E 0F 
       10 11 12 13 
0437E1 14 15 16 17 0033*      db 20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47
       18 19 1A 1B 
       1C 1D 1E 1F 
       20 21 22 23 
       24 25 26 27 
       28 29 2A 2B 
       2C 2D 2E 2F 
0437FD 30 31 32 33 0034*      db 48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75
       34 35 36 37 
       38 39 3A 3B 
       3C 3D 3E 3F 
       40 41 42 43 
       44 45 46 47 
       48 49 4A 4B 
043819 4C 4D 4E 4F 0035*      db 76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103
       50 51 52 53 
       54 55 56 57 
       58 59 5A 5B 
       5C 5D 5E 5F 
       60 61 62 63 
       64 65 66 67 
043835 68 69 6A 6B 0036*      db 104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131
       6C 6D 6E 6F 
       70 71 72 73 
       74 75 76 77 
       78 79 7A 7B 
       7C 7D 7E 7F 
       80 81 82 83 
043851 84 85 86 87 0037*      db 132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159
       88 89 8A 8B 
       8C 8D 8E 8F 
       90 91 92 93 
       94 95 96 97 
       98 99 9A 9B 
       9C 9D 9E 9F 
04386D A0 A1 A2 A3 0038*      db 160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187
       A4 A5 A6 A7 
       A8 A9 AA AB 
       AC AD AE AF 
       B0 B1 B2 B3 
       B4 B5 B6 B7 
       B8 B9 BA BB 
043889 BC BD BE BF 0039*      db 188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215
       C0 C1 C2 C3 
       C4 C5 C6 C7 
       C8 C9 CA CB 
       CC CD CE CF 
       D0 D1 D2 D3 
       D4 D5 D6 D7 
0438A5 D8 D9 DA DB 0040*      db 216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243
       DC DD DE DF 
       E0 E1 E2 E3 
       E4 E5 E6 E7 
       E8 E9 EA EB 
       EC ED EE EF 
       F0 F1 F2 F3 
0438C1 F4 F5 F6 F7 0041*      db 244,245,246,247,248,249,250,251,252,253,254,255,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
       F8 F9 FA FB 
       FC FD FE FF 
       00 01 02 03 
       04 05 06 07 
       08 09 0A 0B 
       0C 0D 0E 0F 
0438DD 10 11 12 13 0042*      db 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43
       14 15 16 17 
       18 19 1A 1B 
       1C 1D 1E 1F 
       20 21 22 23 
       24 25 26 27 
       28 29 2A 2B 
0438F9 2C 2D 2E 2F 0043*      db 44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71
       30 31 32 33 
       34 35 36 37 
       38 39 3A 3B 
       3C 3D 3E 3F 
       40 41 42 43 
       44 45 46 47 
043915 48 49 4A 4B 0044*      db 72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99
       4C 4D 4E 4F 
       50 51 52 53 
       54 55 56 57 
       58 59 5A 5B 
       5C 5D 5E 5F 
       60 61 62 63 
043931             0045*      ; db 00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00
043931             0046*      ; db 00,09,03,03,03,03,11,03,03,03,03,03,10,00,00,09,03,03,03,03,03,11,03,03,03,03,10,00
043931             0047*      ; db 00,12,00,00,00,00,12,00,00,00,00,00,12,00,00,12,00,00,00,00,00,12,00,00,00,00,12,00
043931             0048*      ; db 00,12,00,00,00,00,12,00,00,00,00,00,12,00,00,12,00,00,00,00,00,12,00,00,00,00,12,00
043931             0049*      ; db 00,12,00,00,00,00,12,00,00,00,00,00,12,00,00,12,00,00,00,00,00,12,00,00,00,00,12,00
043931             0050*      ; db 00,13,03,03,03,03,15,03,03,11,03,03,07,03,03,07,03,03,11,03,03,15,03,03,03,03,14,00
043931             0051*      ; db 00,12,00,00,00,00,12,00,00,12,00,00,00,00,00,00,00,00,12,00,00,12,00,00,00,00,12,00
043931             0052*      ; db 00,12,00,00,00,00,12,00,00,12,00,00,00,00,00,00,00,00,12,00,00,12,00,00,00,00,12,00
043931             0053*      ; db 00,05,03,03,03,03,14,00,00,05,03,03,10,00,00,09,03,03,06,00,00,13,03,03,03,03,06,00
043931             0054*      ; db 00,00,00,00,00,00,12,00,00,00,00,00,12,00,00,12,00,00,00,00,00,12,00,00,00,00,00,00
043931             0055*      ; db 00,00,00,00,00,00,12,00,00,00,00,00,12,00,00,12,00,00,00,00,00,12,00,00,00,00,00,00
043931             0056*      ; db 00,00,00,00,00,00,12,00,00,09,03,03,07,03,03,07,03,03,10,00,00,12,00,00,00,00,00,00
043931             0057*      ; db 00,00,00,00,00,00,12,00,00,12,00,00,00,00,00,00,00,00,12,00,00,12,00,00,00,00,00,00
043931             0058*      ; db 00,00,00,00,00,00,12,00,00,12,00,00,00,00,00,00,00,00,12,00,00,12,00,00,00,00,00,00
043931             0059*      ; db 03,03,03,03,03,03,15,03,03,14,00,00,00,00,00,00,00,00,13,03,03,15,03,03,03,03,03,03
043931             0060*      ; db 00,00,00,00,00,00,12,00,00,12,00,00,00,00,00,00,00,00,12,00,00,12,00,00,00,00,00,00
043931             0061*      ; db 00,00,00,00,00,00,12,00,00,12,00,00,00,00,00,00,00,00,12,00,00,12,00,00,00,00,00,00
043931             0062*      ; db 00,00,00,00,00,00,12,00,00,13,03,03,03,03,03,03,03,03,14,00,00,12,00,00,00,00,00,00
043931             0063*      ; db 00,00,00,00,00,00,12,00,00,12,00,00,00,00,00,00,00,00,12,00,00,12,00,00,00,00,00,00
043931             0064*      ; db 00,00,00,00,00,00,12,00,00,12,00,00,00,00,00,00,00,00,12,00,00,12,00,00,00,00,00,00
043931             0065*      ; db 00,09,03,03,03,03,15,03,03,07,03,03,10,00,00,09,03,03,07,03,03,15,03,03,03,03,10,00
043931             0066*      ; db 00,12,00,00,00,00,12,00,00,00,00,00,12,00,00,12,00,00,00,00,00,12,00,00,00,00,12,00
043931             0067*      ; db 00,12,00,00,00,00,12,00,00,00,00,00,12,00,00,12,00,00,00,00,00,12,00,00,00,00,12,00
043931             0068*      ; db 00,05,03,10,00,00,13,03,03,11,03,03,07,03,03,07,03,03,11,03,03,14,00,00,09,03,06,00
043931             0069*      ; db 00,00,00,12,00,00,12,00,00,12,00,00,00,00,00,00,00,00,12,00,00,12,00,00,12,00,00,00
043931             0070*      ; db 00,00,00,12,00,00,12,00,00,12,00,00,00,00,00,00,00,00,12,00,00,12,00,00,12,00,00,00
043931             0071*      ; db 00,09,03,07,03,03,06,00,00,05,03,03,10,00,00,09,03,03,06,00,00,05,03,03,07,03,10,00
043931             0072*      ; db 00,12,00,00,00,00,00,00,00,00,00,00,12,00,00,12,00,00,00,00,00,00,00,00,00,00,12,00
043931             0073*      ; db 00,12,00,00,00,00,00,00,00,00,00,00,12,00,00,12,00,00,00,00,00,00,00,00,00,00,12,00
043931             0074*      ; db 00,05,03,03,03,03,03,03,03,03,03,03,07,03,03,07,03,03,03,03,03,03,03,03,03,03,06,00
043931             0075*      ; db 00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00
043931             0050       include "maze_pellets.inc"
043931             0001*  ; Generated by beegee747/build/scripts/build_99_asm_maze_walls.py
043931             0002*  
043931             0003*  maze_pellets:
043931 1C 00 00    0004*  maze_pellets_num_cols: dl 28
043934 1F 00 00    0005*  maze_pellets_num_rows: dl 31
043937 08 00 00    0006*  maze_pellets_tile_size: dl 8
04393A 00 00 00    0007*  maze_pellets_null_tile: dl 0
04393D 00 00 00    0008*  maze_pellets_x: dl 0
043940 00 00 00    0009*  maze_pellets_y: dl 0
043943 20 01 00    0010*  maze_pellets_base_bufferId: dl BUF_MAZE_PELLETS_00
043946             0011*  
043946             0012*  maze_pellets_map:
043946 00 00 00 00 0013*      db 00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
043962 00 01 01 01 0014*      db 00,01,01,01,01,01,01,01,01,01,01,01,01,00,00,01,01,01,01,01,01,01,01,01,01,01,01,00
       01 01 01 01 
       01 01 01 01 
       01 00 00 01 
       01 01 01 01 
       01 01 01 01 
       01 01 01 00 
04397E 00 01 00 00 0015*      db 00,01,00,00,00,00,01,00,00,00,00,00,01,00,00,01,00,00,00,00,00,01,00,00,00,00,01,00
       00 00 01 00 
       00 00 00 00 
       01 00 00 01 
       00 00 00 00 
       00 01 00 00 
       00 00 01 00 
04399A 00 02 00 00 0016*      db 00,02,00,00,00,00,01,00,00,00,00,00,01,00,00,01,00,00,00,00,00,01,00,00,00,00,02,00
       00 00 01 00 
       00 00 00 00 
       01 00 00 01 
       00 00 00 00 
       00 01 00 00 
       00 00 02 00 
0439B6 00 01 00 00 0017*      db 00,01,00,00,00,00,01,00,00,00,00,00,01,00,00,01,00,00,00,00,00,01,00,00,00,00,01,00
       00 00 01 00 
       00 00 00 00 
       01 00 00 01 
       00 00 00 00 
       00 01 00 00 
       00 00 01 00 
0439D2 00 01 01 01 0018*      db 00,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,00
       01 01 01 01 
       01 01 01 01 
       01 01 01 01 
       01 01 01 01 
       01 01 01 01 
       01 01 01 00 
0439EE 00 01 00 00 0019*      db 00,01,00,00,00,00,01,00,00,01,00,00,00,00,00,00,00,00,01,00,00,01,00,00,00,00,01,00
       00 00 01 00 
       00 01 00 00 
       00 00 00 00 
       00 00 01 00 
       00 01 00 00 
       00 00 01 00 
043A0A 00 01 00 00 0020*      db 00,01,00,00,00,00,01,00,00,01,00,00,00,00,00,00,00,00,01,00,00,01,00,00,00,00,01,00
       00 00 01 00 
       00 01 00 00 
       00 00 00 00 
       00 00 01 00 
       00 01 00 00 
       00 00 01 00 
043A26 00 01 01 01 0021*      db 00,01,01,01,01,01,01,00,00,01,01,01,01,00,00,01,01,01,01,00,00,01,01,01,01,01,01,00
       01 01 01 00 
       00 01 01 01 
       01 00 00 01 
       01 01 01 00 
       00 01 01 01 
       01 01 01 00 
043A42 00 00 00 00 0022*      db 00,00,00,00,00,00,01,00,00,00,00,00,01,00,00,01,00,00,00,00,00,01,00,00,00,00,00,00
       00 00 01 00 
       00 00 00 00 
       01 00 00 01 
       00 00 00 00 
       00 01 00 00 
       00 00 00 00 
043A5E 00 00 00 00 0023*      db 00,00,00,00,00,00,01,00,00,00,00,00,01,00,00,01,00,00,00,00,00,01,00,00,00,00,00,00
       00 00 01 00 
       00 00 00 00 
       01 00 00 01 
       00 00 00 00 
       00 01 00 00 
       00 00 00 00 
043A7A 00 00 00 00 0024*      db 00,00,00,00,00,00,01,00,00,01,01,01,01,01,01,01,01,01,01,00,00,01,00,00,00,00,00,00
       00 00 01 00 
       00 01 01 01 
       01 01 01 01 
       01 01 01 00 
       00 01 00 00 
       00 00 00 00 
043A96 00 00 00 00 0025*      db 00,00,00,00,00,00,01,00,00,01,00,00,00,00,00,00,00,00,01,00,00,01,00,00,00,00,00,00
       00 00 01 00 
       00 01 00 00 
       00 00 00 00 
       00 00 01 00 
       00 01 00 00 
       00 00 00 00 
043AB2 00 00 00 00 0026*      db 00,00,00,00,00,00,01,00,00,01,00,00,00,00,00,00,00,00,01,00,00,01,00,00,00,00,00,00
       00 00 01 00 
       00 01 00 00 
       00 00 00 00 
       00 00 01 00 
       00 01 00 00 
       00 00 00 00 
043ACE 01 01 01 01 0027*      db 01,01,01,01,01,01,01,01,01,01,00,00,00,00,00,00,00,00,01,01,01,01,01,01,01,01,01,01
       01 01 01 01 
       01 01 00 00 
       00 00 00 00 
       00 00 01 01 
       01 01 01 01 
       01 01 01 01 
043AEA 00 00 00 00 0028*      db 00,00,00,00,00,00,01,00,00,01,00,00,00,00,00,00,00,00,01,00,00,01,00,00,00,00,00,00
       00 00 01 00 
       00 01 00 00 
       00 00 00 00 
       00 00 01 00 
       00 01 00 00 
       00 00 00 00 
043B06 00 00 00 00 0029*      db 00,00,00,00,00,00,01,00,00,01,00,00,00,00,00,00,00,00,01,00,00,01,00,00,00,00,00,00
       00 00 01 00 
       00 01 00 00 
       00 00 00 00 
       00 00 01 00 
       00 01 00 00 
       00 00 00 00 
043B22 00 00 00 00 0030*      db 00,00,00,00,00,00,01,00,00,01,01,01,01,01,01,01,01,01,01,00,00,01,00,00,00,00,00,00
       00 00 01 00 
       00 01 01 01 
       01 01 01 01 
       01 01 01 00 
       00 01 00 00 
       00 00 00 00 
043B3E 00 00 00 00 0031*      db 00,00,00,00,00,00,01,00,00,01,00,00,00,00,00,00,00,00,01,00,00,01,00,00,00,00,00,00
       00 00 01 00 
       00 01 00 00 
       00 00 00 00 
       00 00 01 00 
       00 01 00 00 
       00 00 00 00 
043B5A 00 00 00 00 0032*      db 00,00,00,00,00,00,01,00,00,01,00,00,00,00,00,00,00,00,01,00,00,01,00,00,00,00,00,00
       00 00 01 00 
       00 01 00 00 
       00 00 00 00 
       00 00 01 00 
       00 01 00 00 
       00 00 00 00 
043B76 00 01 01 01 0033*      db 00,01,01,01,01,01,01,01,01,01,01,01,01,00,00,01,01,01,01,01,01,01,01,01,01,01,01,00
       01 01 01 01 
       01 01 01 01 
       01 00 00 01 
       01 01 01 01 
       01 01 01 01 
       01 01 01 00 
043B92 00 01 00 00 0034*      db 00,01,00,00,00,00,01,00,00,00,00,00,01,00,00,01,00,00,00,00,00,01,00,00,00,00,01,00
       00 00 01 00 
       00 00 00 00 
       01 00 00 01 
       00 00 00 00 
       00 01 00 00 
       00 00 01 00 
043BAE 00 01 00 00 0035*      db 00,01,00,00,00,00,01,00,00,00,00,00,01,00,00,01,00,00,00,00,00,01,00,00,00,00,01,00
       00 00 01 00 
       00 00 00 00 
       01 00 00 01 
       00 00 00 00 
       00 01 00 00 
       00 00 01 00 
043BCA 00 02 01 01 0036*      db 00,02,01,01,00,00,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,00,00,01,01,02,00
       00 00 01 01 
       01 01 01 01 
       01 01 01 01 
       01 01 01 01 
       01 01 00 00 
       01 01 02 00 
043BE6 00 00 00 01 0037*      db 00,00,00,01,00,00,01,00,00,01,00,00,00,00,00,00,00,00,01,00,00,01,00,00,01,00,00,00
       00 00 01 00 
       00 01 00 00 
       00 00 00 00 
       00 00 01 00 
       00 01 00 00 
       01 00 00 00 
043C02 00 00 00 01 0038*      db 00,00,00,01,00,00,01,00,00,01,00,00,00,00,00,00,00,00,01,00,00,01,00,00,01,00,00,00
       00 00 01 00 
       00 01 00 00 
       00 00 00 00 
       00 00 01 00 
       00 01 00 00 
       01 00 00 00 
043C1E 00 01 01 01 0039*      db 00,01,01,01,01,01,01,00,00,01,01,01,01,00,00,01,01,01,01,00,00,01,01,01,01,01,01,00
       01 01 01 00 
       00 01 01 01 
       01 00 00 01 
       01 01 01 00 
       00 01 01 01 
       01 01 01 00 
043C3A 00 01 00 00 0040*      db 00,01,00,00,00,00,00,00,00,00,00,00,01,00,00,01,00,00,00,00,00,00,00,00,00,00,01,00
       00 00 00 00 
       00 00 00 00 
       01 00 00 01 
       00 00 00 00 
       00 00 00 00 
       00 00 01 00 
043C56 00 01 00 00 0041*      db 00,01,00,00,00,00,00,00,00,00,00,00,01,00,00,01,00,00,00,00,00,00,00,00,00,00,01,00
       00 00 00 00 
       00 00 00 00 
       01 00 00 01 
       00 00 00 00 
       00 00 00 00 
       00 00 01 00 
043C72 00 01 01 01 0042*      db 00,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,00
       01 01 01 01 
       01 01 01 01 
       01 01 01 01 
       01 01 01 01 
       01 01 01 01 
       01 01 01 00 
043C8E 00 00 00 00 0043*      db 00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
043CAA             0051       include "player.inc"
043CAA             0001*  ; ######## GAME STATE VARIABLES #######
043CAA 00 00 00    0002*  player_score: dl 0 ; integer
043CAD 03          0003*  player_lives: db 3 ; integer
043CAE             0004*  speed_player: equ 1*256 ; 1 pixels per frame 16.8 fixed
043CAE             0005*  
043CAE             0006*  ; ######### PLAYER SPRITE PARAMETERS ##########
043CAE             0007*  ; uses the same offsets from its table base as the main sprite table:
043CAE             0008*  player_start_variables: ; label marking beginning of table
043CAE 0F          0009*  player_id:               db table_max_records-1
043CAF 00          0010*  player_type:             db     0x00 ; 1 bytes currently not used
043CB0 32 01 00    0011*  player_base_bufferId:    dl BUF_PAC_MAN_00_00 ; 3 bytes bitmap bufferId
043CB3 00 00 00    0012*  player_move_program:     dl 0x000000 ; 3 bytes not currently used
043CB6 00          0013*  player_collisions:       db     0x00 ; 1 bytes uses sprite_alive and sprite_just_died flags
043CB7 00          0014*  player_dim_x:            db     0x00 ; 1 bytes sprite width in pixels
043CB8 00          0015*  player_dim_y:            db     0x00 ; 1 bytes sprite height in pixels
043CB9 00 00 00    0016*  player_x:                dl 0x000000 ; 3 bytes 16.8 fractional x position in pixels
043CBC 00 00 00    0017*  player_y:                dl 0x000000 ; 3 bytes 16.8 fractional y position in pixels
043CBF 00 00 00    0018*  player_xvel:             dl 0x000000 ; 3 bytes x-component velocity, 16.8 fixed, pixels
043CC2 00 00 00    0019*  player_yvel:             dl 0x000000 ; 3 bytes y-component velocity, 16.8 fixed, pixels
043CC5 00 00 00    0020*  player_vel:              dl 0x000000 ; 3 bytes velocity px/frame (16.8 fixed)
043CC8 00 00 00    0021*  player_heading:          dl 0x000000 ; 3 bytes sprite movement direction deg256 16.8 fixed
043CCB 01 00 00    0022*  player_orientation:      dl 1 ; 3 bytes, low four bits are direction mask, bit 0 = right
043CCE 00          0023*  player_animation:        db     0x00 ; 1 bytes current animation index, zero-based
043CCF 08          0024*  player_animation_timer:  db     8 ; 1 bytes
043CD0 00          0025*  player_move_timer:       db     0x00 ; 1 bytes not currently used
043CD1 00          0026*  player_move_step:        db     0x00 ; 1 bytes not currently used
043CD2 00          0027*  player_points:           db     0x00 ; 1 bytes not currently used
043CD3 00          0028*  player_shield_damage:    db     0x00 ; 1 bytes not currently used
043CD4             0029*  player_end_variables: ; for when we want to traverse this table in reverse
043CD4             0030*  
043CD4             0031*  orient_up: equ 2
043CD4             0032*  orient_left: equ 1
043CD4             0033*  orient_down: equ 3
043CD4             0034*  orient_right: equ 0
043CD4             0035*  
043CD4             0036*  ; set initial player position
043CD4             0037*  ; inputs: none,everything is hardcoded
043CD4             0038*  ; outputs: player_x/y set to bottom-left corner of screen
043CD4             0039*  ; destroys: a
043CD4             0040*  player_init:
043CD4 3A AE 3C 04 0041*  	ld a,(player_id)
043CD8 CD 6F 19 04 0042*  	call vdu_sprite_select
043CDC CD 82 19 04 0043*      call vdu_sprite_clear_frames
043CE0 21 32 01 00 0044*      ld hl,BUF_PAC_MAN_00_00
043CE4 06 0C       0045*      ld b,12 ; number of frames in the sprite
043CE6             0046*  @loop:
043CE6 C5          0047*      push bc ; backup loop counter
043CE7 E5          0048*      push hl
043CE8 CD C4 1A 04 0049*      call vdu_sprite_add_buff
043CEC E1          0050*      pop hl
043CED 23          0051*      inc hl
043CEE C1          0052*      pop bc
043CEF 10 F5       0053*      djnz @loop
043CF1             0054*  ; initialize player position
043CF1 01 00 00 00 0055*      ld bc,0
043CF5 ED 43 B9 3C 0056*      ld (player_x),bc
       04          
043CFA 11 00 6F 01 0057*      ld de,sprite_bottom*256 ; max sprite y-coordinate
043CFE ED 53 BC 3C 0058*      ld (player_y),de
       04          
043D03 CD 3B 1A 04 0059*      call vdu_sprite_move_abs168
043D07 CD E5 19 04 0060*      call vdu_sprite_show
043D0B 21 A2 42 04 0061*      ld hl,player_alive
043D0F 22 94 42 04 0062*      ld (player_state),hl
043D13 21 B6 3C 04 0063*      ld hl,player_collisions
043D17 CB F6       0064*      set sprite_alive,(hl)
043D19             0065*  
043D19             0066*  ; ; DEBUG
043D19             0067*  ;     ld hl,speed_player
043D19             0068*  ;     ld (player_xvel),hl
043D19             0069*  ; ; END DEBUG
043D19 C9          0070*      ret
043D1A             0071*  
043D1A             0072*  ; process player keyboard input, set player bitmap
043D1A             0073*  ; velocities and draw player bitmap at updated coordinates
043D1A             0074*  ; Inputs: player_x/y set at desired position
043D1A             0075*  ; Returns: player bitmap drawn at updated position
043D1A             0076*  ; Destroys: probably everything except maybe iy
043D1A             0077*  ; NOTE: in mode 9 we draw the player as a sprite, not a bitmap
043D1A             0078*  ; TODO: requires sprite implementation
043D1A             0079*  player_input:
043D1A             0080*  ; set player as the active sprite
043D1A FD 21 AE 3C 0081*      ld iy,player_start_variables
       04          
043D1F FD 22 91 40 0082*      ld (table_pointer),iy
       04          
043D24 FD 7E 00    0083*      ld a,(iy+sprite_id)
043D27 CD 6F 19 04 0084*      call vdu_sprite_select
043D2B             0085*  ; DEBUG
043D2B CD 3A 14 04 0086*      call vdu_home_cursor
043D2F             0087*  ; END DEBUG
043D2F             0088*  ; did we die last frame?
043D2F FD 7E 08    0089*      ld a,(iy+sprite_collisions)
043D32 E6 02       0090*      and %00000010 ; zero flag will be set if not dead
043D34 28 05       0091*      jr z,player_not_dead
043D36             0092*  ; yes we died
043D36 CD 0C 3E 04 0093*      call kill_player
043D3A C9          0094*      ret ; done
043D3B             0095*  player_not_dead: ; yay we didn't die
043D3B             0096*  ; check for keypresses and branch accordingly
043D3B             0097*  ; for how this works,see: https://github.com/breakintoprogram/agon-docs/wiki/MOS-API-%E2%80%90-Virtual-Keyboard
043D3B             0098*      MOSCALL	mos_getkbmap ;ix = pointer to MOS virtual keys table
043D3B 3E 1E       0001*M 			LD	A, function
043D3D 5B CF       0002*M 			RST.LIL	08h
043D3F             0099*  ; we test all four arrow keys and add/subract velocities accordingly
043D3F             0100*  ; this handles the case where two opposing movement keys
043D3F             0101*  ; are down simultaneously (velocities will net to zero)
043D3F AF          0102*      xor a ; reset orientation bits
043D40             0103*  ; 26 Left: move player left
043D40 DD CB 03 4E 0104*      bit 1,(ix+3)
043D44 CA 4A 3D 04 0105*      jp z,@F
043D48 CB CF       0106*      set orient_left,a
043D4A             0107*  @@:
043D4A             0108*  ; 122 Right: move player right
043D4A DD CB 0F 4E 0109*      bit 1,(ix+15)
043D4E CA 54 3D 04 0110*  	jp z,@F
043D52 CB C7       0111*      set orient_right,a
043D54             0112*  @@:
043D54             0113*  ; 58 Up: move player up
043D54 DD CB 07 4E 0114*      bit 1,(ix+7)
043D58 CA 5E 3D 04 0115*  	jp z,@F
043D5C CB D7       0116*      set orient_up,a
043D5E             0117*  @@:
043D5E             0118*  ; 42 Down: move player down
043D5E DD CB 05 4E 0119*      bit 1,(ix+5)
043D62 CA 68 3D 04 0120*  	jp z,@F
043D66 CB DF       0121*      set orient_down,a
043D68             0122*  @@:
043D68             0123*  ; test for no keyboard input
043D68 A7          0124*      and a
043D69 C2 74 3D 04 0125*      jp nz,@F ; we have input
043D6D FD 7E 1D    0126*      ld a,(iy+sprite_orientation) ; use last orientation
043D70 C3 7F 3D 04 0127*      jp @animation_timer
043D74             0128*  @@:
043D74             0129*  ; test for more than one input key pressed
043D74 47          0130*      ld b,a
043D75 3D          0131*      dec a
043D76 A0          0132*      and a,b
043D77 78          0133*      ld a,b
043D78             0134*  ; zero means only one key pressed
043D78             0135*  ; (or none, if we had not done the zero check above)
043D78 CA 7F 3D 04 0136*      jp z,@animation_timer
043D7C FD 7E 1D    0137*      ld a,(iy+sprite_orientation) ; use last orientation
043D7F             0138*      ; fall through to @animation_timer
043D7F             0139*  @animation_timer:
043D7F FD 77 1D    0140*      ld (iy+sprite_orientation),a
043D82             0141*  ; time to bump the animation frame?
043D82 FD 35 21    0142*      dec (iy+sprite_animation_timer)
043D85 C2 9E 3D 04 0143*      jp nz,@select_frame ; not time yet
043D89             0144*  ; reset animation timer
043D89 3E 08       0145*      ld a,8
043D8B FD 77 21    0146*      ld (iy+sprite_animation_timer),a
043D8E             0147*  ; bump the animation frame
043D8E FD 34 20    0148*      inc (iy+sprite_animation)
043D91             0149*  ; time to wrap around to first frame?
043D91 3E 03       0150*      ld a,3
043D93 FD BE 20    0151*      cp a,(iy+sprite_animation)
043D96 C2 9E 3D 04 0152*      jp nz,@select_frame ; not time yet
043D9A             0153*  ; reset animation frame
043D9A AF          0154*      xor a
043D9B FD 77 20    0155*      ld (iy+sprite_animation),a
043D9E             0156*      ; fall through to @select_frame
043D9E             0157*  @select_frame:
043D9E FD 7E 1D    0158*      ld a,(iy+sprite_orientation)
043DA1             0159*  ; find which bit is set in orientation
043DA1 2E 00       0160*      ld l,0 ; bit counter
043DA3             0161*  @find_bit:
043DA3 0F          0162*      rrca ; bit 0 to carry
043DA4 DA AD 3D 04 0163*      jp c,@found_bit
043DA8 2C          0164*      inc l ; next bit
043DA9 C3 A3 3D 04 0165*      jp @find_bit
043DAD             0166*  @found_bit:
043DAD 26 03       0167*      ld h,3 ; three frames per orientation
043DAF ED 6C       0168*      mlt hl
043DB1 FD 7E 20    0169*      ld a,(iy+sprite_animation)
043DB4 85          0170*      add a,l
043DB5 CD D2 19 04 0171*      call vdu_sprite_select_frame
043DB9             0172*  ; set player velocities based on orientation
043DB9 FD 7E 1D    0173*      ld a,(iy+sprite_orientation)
043DBC 21 00 01 00 0174*      ld hl,speed_player
043DC0 CD D9 3D 04 0175*      call velocity_from_orientation
043DC4 FD 0F 11    0176*      ld (iy+sprite_xvel),bc
043DC7 FD 1F 14    0177*      ld (iy+sprite_yvel),de
043DCA             0178*  ; draw player at updated position
043DCA CD 08 41 04 0179*      call move_sprite
043DCE FD 07 0B    0180*      ld bc,(iy+sprite_x)
043DD1 FD 17 0E    0181*      ld de,(iy+sprite_y)
043DD4 CD 3B 1A 04 0182*  	call vdu_sprite_move_abs168
043DD8             0183*  ; done
043DD8 C9          0184*      ret
043DD9             0185*  ; end player_input
043DD9             0186*  
043DD9             0187*  ; inputs: a = orientation, uh.l = speed in 16.8 fixed format
043DD9             0188*  ; outputs: ub.c and ud.e are vel_x and vel_y in 16.8 fixed format
043DD9             0189*  velocity_from_orientation:
043DD9             0190*  ; initialize velocities to zero
043DD9 01 00 00 00 0191*      ld bc,0
043DDD 11 00 00 00 0192*      ld de,0
043DE1             0193*  ; test for orientation
043DE1 CB 4F       0194*      bit orient_left,a
043DE3 C2 FA 3D 04 0195*      jp nz,@left
043DE7 CB 47       0196*      bit orient_right,a
043DE9 C2 01 3E 04 0197*      jp nz,@right
043DED CB 57       0198*      bit orient_up,a
043DEF C2 04 3E 04 0199*      jp nz,@up
043DF3 CB 5F       0200*      bit orient_down,a
043DF5 C2 0A 3E 04 0201*      jp nz,@down
043DF9 C9          0202*      ret ; no orientation set so velocities are zero
043DFA             0203*  @left:
043DFA CD 78 07 04 0204*      call neg_hlu
043DFE E5          0205*      push hl
043DFF C1          0206*      pop bc
043E00 C9          0207*      ret
043E01             0208*  @right:
043E01 E5          0209*      push hl
043E02 C1          0210*      pop bc
043E03 C9          0211*      ret
043E04             0212*  @up:
043E04 CD 78 07 04 0213*      call neg_hlu
043E08 EB          0214*      ex de,hl
043E09 C9          0215*      ret
043E0A             0216*  @down:
043E0A EB          0217*      ex de,hl
043E0B C9          0218*      ret
043E0C             0219*  ; end velocity_from_orientation
043E0C             0220*  
043E0C             0221*  ; ###################################################################
043E0C             0222*  ; TODO: the below is all stuff from the original code we need to port
043E0C             0223*  ; ###################################################################
043E0C             0224*  
043E0C             0225*  kill_player:
043E0C             0226*  ; ; set player status to dead
043E0C             0227*  ;     xor a; sets all player flags to zero
043E0C             0228*  ;     ld (player_collisions),a
043E0C             0229*  ; ; deduct a player from the inventory
043E0C             0230*  ;     ld a,(player_lives)
043E0C             0231*  ;     dec a
043E0C             0232*  ;     ld (player_lives),a
043E0C             0233*  ; ; are we out of players?
043E0C             0234*  ;     jp z,game_over
043E0C             0235*  ; ; wait a few ticks
043E0C             0236*  ;     ld a,32 ; 32-cycle timer ~1/2 second at 60fps
043E0C             0237*  ;     ld (player_move_timer),a
043E0C             0238*  ; kill_player_loop:
043E0C             0239*  ;     call vdu_vblank
043E0C             0240*  ;     ld a,(player_move_timer)
043E0C             0241*  ;     dec a
043E0C             0242*  ;     ld (player_move_timer),a
043E0C             0243*  ;     jr nz,kill_player_loop
043E0C             0244*  ;     call player_init ; player respawn if timer zero
043E0C C9          0245*      ret ; and out
043E0D             0246*  
043E0D             0247*  ; draws the player's shields level
043E0D             0248*  ; draw_shields:
043E0D             0249*  ; TODO: Agonize this routine
043E0D             0250*  ; ; prep the loop to draw the bars
043E0D             0251*  ;     ld a,(player_shields) ; snag shields
043E0D             0252*  ;     and a
043E0D             0253*  ;     ret z ; don't draw if zero shields
043E0D             0254*  ; ; set loop counter and drawing position
043E0D             0255*  ;     ld b,a ; loop counter
043E0D             0256*  ;     ld hl,#5300+48+12
043E0D             0257*  ; ; set color based on bars remaining
043E0D             0258*  ;     ld c,103 ; bright green 28fe0a
043E0D             0259*  ;     cp 9
043E0D             0260*  ;     jp p,draw_shields_loop
043E0D             0261*  ;     ld c,74 ; bright yellow eafe5b
043E0D             0262*  ;     cp 3
043E0D             0263*  ;     jp p,draw_shields_loop
043E0D             0264*  ;     ld c,28 ; bright red fe0a0a
043E0D             0265*  ; draw_shields_loop:
043E0D             0266*  ;     push bc ; yup,outta
043E0D             0267*  ;     push hl ; registers again
043E0D             0268*  ;     ; ld a,#A8 ; ▀,168
043E0D             0269*  ;     ld a,10 ; ▀,168 ; we renumber because we don't use the full charset
043E0D             0270*  ;     ; call draw_char
043E0D             0271*  ;     call draw_num ; we nuked draw_char for the time being
043E0D             0272*  ;     pop hl
043E0D             0273*  ;     ld a,8
043E0D             0274*  ;     add a,l
043E0D             0275*  ;     ld l,a
043E0D             0276*  ;     pop bc
043E0D             0277*  ;     djnz draw_shields_loop
043E0D             0278*      ; ret
043E0D             0279*  
043E0D             0280*  score_x: equ 0
043E0D             0281*  score_y: equ 1
043E0D             0282*  ; prints the player's score
043E0D             0283*  print_score:
043E0D             0284*  ; DEBUG
043E0D 0E 00       0285*      ld c,score_x
043E0F 06 00       0286*      ld b,score_y-1
043E11 CD 71 14 04 0287*      call vdu_move_cursor
043E15 CD 70 00 04 0288*      call printInline
043E19 53 63 6F 72 0289*      asciz "Score:"
       65 3A 00    
043E20             0290*  ; END DEBUG
043E20 0E 00       0291*      ld c,score_x
043E22 06 01       0292*      ld b,score_y
043E24 CD 71 14 04 0293*      call vdu_move_cursor
043E28 2A AA 3C 04 0294*      ld hl,(player_score)
043E2C CD 76 01 04 0295*      call printDec
043E30 C9          0296*      ret
043E31             0297*  
043E31             0298*  ; draw_lives:
043E31             0299*  ;     ld hl,player_small ; make small yellow player the active sprite
043E31             0300*  ;     ld (sprite_base_bufferId),hl
043E31             0301*  ;     ; ld a,#80 ; northern orientation
043E31             0302*  ;     ; ld (sprite_orientation),a
043E31             0303*  ;     ld hl,0 ; north
043E31             0304*  ;     ld (sprite_heading),hl
043E31             0305*  ;     xor a
043E31             0306*  ;     ld (sprite_animation),a
043E31             0307*  ;     ld a,#56 ; top of visible screen
043E31             0308*  ;     ld (sprite_y+1),a
043E31             0309*  ;     call vdu_bmp_select ; TODO: convert to vdu_buff_select
043E31             0310*  ;     ld a,(player_lives)
043E31             0311*  ;     dec a ; we draw one fewer players than lives
043E31             0312*  ;     ret z ; nothing to draw here, move along
043E31             0313*  ;     ld b,a ; loop counter
043E31             0314*  ;     ld a,256-16 ; initial x position
043E31             0315*  ; draw_lives_loop:
043E31             0316*  ;     ld (sprite_x+1),a
043E31             0317*  ;     push af
043E31             0318*  ;     push bc
043E31             0319*  ;     call vdu_bmp_draw ; convert to vdu_bmp_plot
043E31             0320*  ;     pop bc
043E31             0321*  ;     pop af
043E31             0322*  ;     sub 10
043E31             0323*  ;     djnz draw_lives_loop
043E31             0324*  ;     ret
043E31             0052       include "sprites.inc"
043E31             0001*  ; ###### SPRITE TABLE FIELD INDICES ######
043E31             0002*  table_bytes_per_record: equ 38 ; 38 bytes per sprite record
043E31             0003*  sprite_id:              equ 00 ; 1 bytes unique spriteId, zero-based
043E31             0004*  sprite_type:            equ 01 ; 1 bytes type of sprite as defined in enemies.inc
043E31             0005*  sprite_base_bufferId:   equ 02 ; 3 bytes bitmap bufferId
043E31             0006*  sprite_move_program:    equ 05 ; 3 bytes address of sprite's behavior subroutine
043E31             0007*  sprite_collisions:      equ 08 ; 1 bytes see collisions.inc constants for bit definitions
043E31             0008*  sprite_dim_x:           equ 09 ; 1 bytes sprite width in pixels
043E31             0009*  sprite_dim_y:           equ 10 ; 1 bytes sprite height in pixels
043E31             0010*  sprite_x:               equ 11 ; 3 bytes 16.8 fractional x position in pixels
043E31             0011*  sprite_y:               equ 14 ; 3 bytes 16.8 fractional y position in pixels
043E31             0012*  sprite_xvel:            equ 17 ; 3 bytes x-component velocity, 16.8 fixed, pixels
043E31             0013*  sprite_yvel:            equ 20 ; 3 bytes y-component velocity, 16.8 fixed, pixels
043E31             0014*  sprite_vel:             equ 23 ; 3 bytes velocity px/frame (16.8 fixed)
043E31             0015*  sprite_heading:         equ 26 ; 3 bytes sprite movement direction deg256 16.8 fixed
043E31             0016*  sprite_orientation:     equ 29 ; 3 bytes orientation bits
043E31             0017*  sprite_animation:       equ 32 ; 1 bytes current animation index, zero-based
043E31             0018*  sprite_animation_timer: equ 33 ; 1 bytes when hits zero, draw next animation
043E31             0019*  sprite_move_timer:      equ 34 ; 1 bytes when zero, go to next move program, or step
043E31             0020*  sprite_move_step:       equ 35 ; 1 bytes stage in a move program sequence, varies
043E31             0021*  sprite_points:          equ 36 ; 1 bytes points awarded for killing this sprite type
043E31             0022*  sprite_shield_damage:   equ 37 ; 1 bytes shield points deducted for collision
043E31             0023*  
043E31             0024*  ; ###### SPRITE TABLE VARIABLES ######
043E31             0025*  ; maximum number of sprites
043E31             0026*  table_max_records: equ 16 ; it can handle more but this is pushing it
043E31             0027*  table_total_bytes: equ table_max_records*table_bytes_per_record
043E31             0028*  
043E31             0029*  ; #### THIS IS THE SPACE ALLOCATED TO THE SPRITE TABLE ####
043E31             0030*  table_base:
043E31 00 00 00 00 0031*  sprite_start_variables:  blkb table_total_bytes, 0 ; fill with zeroes
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
044091             0032*  sprite_end_variables: ; in case we want to traverse the table in reverse
044091             0033*  
044091             0034*  ; pointer to top address of current record, initialized to table_base
044091 31 3E 04    0035*  table_pointer: dl table_base
044094             0036*  ; how many active sprites
044094 00          0037*  table_active_sprites: db 0x00
044095             0038*  ; flag indicating collision with screen edge
044095             0039*  ; uses orientation codes to specify which edge(s)
044095 00          0040*  sprite_screen_edge: db #00
044096             0041*  ; next sprite id to use
044096 00          0042*  sprite_next_id: db 0
044097             0043*  
044097             0044*  ; origin_top: equ 48
044097             0045*  origin_top: equ 0 ; DEBUG
044097             0046*  origin_left: equ 128
044097             0047*  field_top: equ 0
044097             0048*  field_bottom: equ 383-origin_top
044097             0049*  field_left: equ 0
044097             0050*  field_right: equ 255
044097             0051*  sprite_top: equ 0
044097             0052*  sprite_bottom: equ field_bottom-16
044097             0053*  sprite_left: equ field_left
044097             0054*  sprite_right: equ field_right-16
044097             0055*  
044097             0056*  ; ######### COLLISION SPRITE PARAMETERS ##########
044097             0057*  ; integer coordinates are all that are needed for collision calculations
044097 00          0058*  collision_x: db 0x00
044098 00          0059*  collision_y: db 0x00
044099 00          0060*  collision_dim_x: db 0x00
04409A 00          0061*  collision_dim_y: db 0x00
04409B             0062*  
04409B             0063*  ; scratch variables
04409B 00          0064*  x: db 0x00 ; 8-bit signed integer
04409C 00          0065*  y: db 0x00 ; 8-bit signed integer
04409D 00 00 00    0066*  x0: dl 0x000000 ; 16.8 signed fixed place
0440A0 00 00 00    0067*  y0: dl 0x000000 ; 16.8 signed fixed place
0440A3 00 00 00    0068*  incx1: dl 0x000000 ; 16.8 signed fixed place
0440A6 00 00 00    0069*  incy1: dl 0x000000 ; 16.8 signed fixed place
0440A9 00 00 00    0070*  incx2: dl 0x000000 ; 16.8 signed fixed place
0440AC 00 00 00    0071*  incy2: dl 0x000000 ; 16.8 signed fixed place
0440AF             0072*  
0440AF             0073*  ; sprite_heading: dl 0x000000 ; signed fixed 16.8
0440AF 00 00 00    0074*  radius: dl 0x000000 ; signed fixed 16.8 (but should always be positive)
0440B2 00 00 00    0075*  sin_sprite_heading: dl 0x000000 ; signed fixed 16.8
0440B5 00 00 00    0076*  cos_sprite_heading: dl 0x000000 ; signed fixed 16.8
0440B8             0077*  
0440B8             0078*  ; gets the next available sprite id
0440B8             0079*  ; inputs; none
0440B8             0080*  ; returns: if new sprite available, a = sprite id,
0440B8             0081*  ;           ix pointing to new sprite vars, carry set
0440B8             0082*  ;      otherwise, a = 0, carry flag reset, ix pointing to highest sprite vars
0440B8             0083*  ; destroys: a,b,hl,ix
0440B8             0084*  ; affects: bumps table_active_sprites by one
0440B8             0085*  table_get_next_id:
0440B8 DD 21 31 3E 0086*      ld ix,table_base
       04          
0440BD 11 26 00 00 0087*      ld de,table_bytes_per_record
0440C1 06 10       0088*      ld b,table_max_records
0440C3             0089*  @loop:
0440C3 DD 7E 01    0090*      ld a,(ix+sprite_type)
0440C6 A7          0091*      and a
0440C7 28 06       0092*      jr z,@found
0440C9 DD 19       0093*      add ix,de
0440CB 10 F6       0094*      djnz @loop
0440CD             0095*  @notfound:
0440CD AF          0096*      xor a ; a = 0 and reset carry flag indicating that we didn't find a free sprite
0440CE C9          0097*      ret
0440CF             0098*  @found:
0440CF             0099*  ; bump number of active sprites
0440CF 21 94 40 04 0100*      ld hl,table_active_sprites
0440D3 34          0101*      inc (hl)
0440D4             0102*  ; return sprite id
0440D4 3E 10       0103*      ld a,table_max_records
0440D6 90          0104*      sub b
0440D7 32 96 40 04 0105*      ld (sprite_next_id),a
0440DB 37          0106*      scf ; sets carry flag indicating we found a free sprite
0440DC C9          0107*      ret ; done
0440DD             0108*  ; end table_get_next_id
0440DD             0109*  
0440DD             0110*  ; deactivate the sprite with the given id
0440DD             0111*  ; inputs: iy set to sprite record, vdu_sprite_select called
0440DD             0112*  ; outputs: nothing
0440DD             0113*  ; destroys: a,hl
0440DD             0114*  ; affects: decrements table_active_sprites by one
0440DD             0115*  table_deactivate_sprite:
0440DD CD F3 19 04 0116*      call vdu_sprite_hide
0440E1 AF          0117*      xor a
0440E2 FD 77 01    0118*      ld (iy+sprite_type),a
0440E5 21 94 40 04 0119*      ld hl,table_active_sprites
0440E9 35          0120*      dec (hl)
0440EA C9          0121*      ret
0440EB             0122*  ; end table_deactivate_sprite
0440EB             0123*  
0440EB             0124*  sprites_init:
0440EB             0125*  ; initialize sprites
0440EB CD A3 1A 04 0126*  	call vdu_sprite_reset ; out of an abundance of caution (copilot: and paranoia)
0440EF AF          0127*  	xor a
0440F0             0128*  @sprite_loop:
0440F0 F5          0129*  	push af
0440F1 CD 6F 19 04 0130*  	call vdu_sprite_select
0440F5 21 00 01 00 0131*  	ld hl,256 ; can be anything, so we just use the first one on the list
0440F9 CD C4 1A 04 0132*  	call vdu_sprite_add_buff
0440FD F1          0133*  	pop af
0440FE 3C          0134*  	inc a
0440FF FE 10       0135*  	cp table_max_records
044101 20 ED       0136*  	jr nz,@sprite_loop
044103 CD A3 19 04 0137*  	call vdu_sprite_activate
044107             0138*  ; all done
044107 C9          0139*      ret
044108             0140*  ; end sprites_init
044108             0141*  
044108             0142*  ; compute a sprite's new position based on its component x,y velocities
044108             0143*  ; with screen boundary checking and update its sprite table record accordingly
044108             0144*  ; inputs: table_pointer set to sprite record
044108             0145*  ; returns: updated x, y positions and edge collision flags in sprite table record
044108             0146*  ; destroys: everything
044108             0147*  ; note: actual rendering of sprite must be handled by caller
044108             0148*  move_sprite:
044108 FD 2A 91 40 0149*      ld iy,(table_pointer) ; TODO: see if we can get IY to land here with the proper value
       04          
04410D             0150*  ; x-axis movement
04410D FD 27 0B    0151*      ld hl,(iy+sprite_x)
044110 FD 17 11    0152*      ld de,(iy+sprite_xvel)
044113 19          0153*      add hl,de
044114 FD 2F 0B    0154*      ld (iy+sprite_x),hl
044117             0155*  ; y-axis movement
044117 FD 27 0E    0156*      ld hl,(iy+sprite_y)
04411A FD 17 14    0157*      ld de,(iy+sprite_yvel)
04411D 19          0158*      add hl,de
04411E FD 2F 0E    0159*      ld (iy+sprite_y),hl
044121             0160*  ; detect screen edge collisions
044121 AF          0161*      xor a ; reset screen edge collision flag and clear carry
044122 32 95 40 04 0162*      ld (sprite_screen_edge),a
044126             0163*  ; y-axis first since we already have it in hl
044126 11 00 00 00 0164*      ld de,-sprite_top*256
04412A ED 5A       0165*      adc hl,de
04412C FA 56 41 04 0166*      jp m,@top
044130 ED 52       0167*      sbc hl,de ; hl back to original value
044132 11 00 91 FE 0168*      ld de,-sprite_bottom*256
044136 ED 5A       0169*      adc hl,de
044138 F2 60 41 04 0170*      jp p,@bottom
04413C             0171*  @xaxis:
04413C FD 27 0B    0172*      ld hl,(iy+sprite_x)
04413F 11 00 00 00 0173*      ld de,-sprite_left*256
044143 ED 5A       0174*      adc hl,de
044145 FA 7B 41 04 0175*      jp m,@left
044149 ED 52       0176*      sbc hl,de ; hl back to original value
04414B 11 00 11 FF 0177*      ld de,-sprite_right*256
04414F ED 5A       0178*      adc hl,de
044151 F2 89 41 04 0179*      jp p,@right
044155             0180*  ; no edge collisions so go home
044155 C9          0181*      ret
044156             0182*  @top:
044156 3E 08       0183*      ld a,collide_top
044158 21 00 00 00 0184*      ld hl,sprite_top*256
04415C C3 66 41 04 0185*      jp @collide_y
044160             0186*  @bottom:
044160 3E 04       0187*      ld a,collide_bottom
044162 21 00 6F 01 0188*      ld hl,sprite_bottom*256
044166             0189*  @collide_y:
044166 32 95 40 04 0190*      ld (sprite_screen_edge),a
04416A FD 2F 0E    0191*      ld (iy+sprite_y),hl
04416D             0192*  ; reverse y-axis velocity
04416D FD 27 14    0193*      ld hl,(iy+sprite_yvel)
044170 CD 78 07 04 0194*      call neg_hlu
044174 FD 2F 14    0195*      ld (iy+sprite_yvel),hl
044177             0196*  ; go check for x-axis collisions
044177 C3 3C 41 04 0197*      jp @xaxis
04417B             0198*  @left:
04417B 3A 95 40 04 0199*      ld a,(sprite_screen_edge)
04417F F6 02       0200*      or a,collide_left
044181 21 00 00 00 0201*      ld hl,sprite_left*256
044185 C3 93 41 04 0202*      jp @collide_x
044189             0203*  @right:
044189 3A 95 40 04 0204*      ld a,(sprite_screen_edge)
04418D F6 01       0205*      or a,collide_right
04418F 21 00 EF 00 0206*      ld hl,sprite_right*256
044193             0207*  @collide_x:
044193 32 95 40 04 0208*      ld (sprite_screen_edge),a
044197 FD 2F 0B    0209*      ld (iy+sprite_x),hl
04419A             0210*  ; reverse x-axis velocity
04419A FD 27 11    0211*      ld hl,(iy+sprite_xvel)
04419D CD 78 07 04 0212*      call neg_hlu
0441A1 FD 2F 11    0213*      ld (iy+sprite_xvel),hl
0441A4             0214*  ; final collision flag to a and return
0441A4 3A 95 40 04 0215*      ld a,(sprite_screen_edge)
0441A8 C9          0216*      ret
0441A9             0217*  ; end move_sprite
0441A9             0218*  
0441A9             0219*  sprite_compute_velocities:
0441A9 FD 2A 91 40 0220*      ld iy,(table_pointer) ; TODO: see if we can get IY to land here with the proper value
       04          
0441AE FD 17 17    0221*      ld de,(iy+sprite_vel)
0441B1 CD 02 0A 04 0222*      call polar_to_cartesian
0441B5 FD 2A 91 40 0223*      ld iy,(table_pointer) ; TODO: see if we can get IY to land here with the proper value
       04          
0441BA FD 0F 11    0224*      ld (iy+sprite_xvel),bc ; save x-velocity component
0441BD FD 1F 14    0225*      ld (iy+sprite_yvel),de ; save y-velocity component
0441C0 C9          0226*      ret
0441C1             0227*  ; end sprite_compute_velocities
0441C1             0053       include "state.inc"
0441C1 00          0001*  cur_level: db 0
0441C2             0002*  
0441C2             0003*  init_level: ; TODO: Implement level initialization
0441C2             0004*  ; BEGIN DEBUG
0441C2 DD 21 3F 32 0005*      ld ix,maze_walls
       04          
0441C7 21 4E 01 00 0006*      ld hl,BUF_TILE_00
0441CB CD 34 2E 04 0007*      call draw_maze
0441CF DD 21 31 39 0008*      ld ix,maze_pellets
       04          
0441D4 21 20 01 00 0009*      ld hl,BUF_MAZE_PELLETS_00
0441D8 CD 34 2E 04 0010*      call draw_maze
0441DC             0011*      ; call waitKeypress
0441DC             0012*  ; END DEBUG
0441DC C9          0013*      ret
0441DD             0014*  
0441DD             0015*  ; Game state variables
0441DD EB 41 04    0016*  game_state:  dl game_main_menu
0441E0             0017*  
0441E0             0018*  do_game:
0441E0 2A DD 41 04 0019*      ld hl,(game_state)   ; Load the current game state
0441E4             0020*      callHL                ; Call the corresponding state handler
0441E4 01 EA 41 04 0001*M     ld bc,@F ; Address of first instruction after the jump
0441E8 C5          0002*M     push bc ; which constitutes the return address
0441E9 E9          0003*M     jp (hl) ; Jump to the address in HL
0441EA             0004*M @@:
0441EA C9          0021*      ret
0441EB             0022*  
0441EB             0023*  ; ========================
0441EB             0024*  ; Main Game States
0441EB             0025*  ; ========================
0441EB             0026*  
0441EB             0027*  game_main_menu:
0441EB             0028*      ; Handle main menu options
0441EB             0029*      ; Example: Check input for "Start Game"
0441EB CD BC 42 04 0030*      call check_input_menu
0441EF C2 F4 41 04 0031*      jp nz, game_initialize ; Start game on selection
0441F3 C9          0032*      ret
0441F4             0033*  
0441F4             0034*  game_initialize:
0441F4             0035*  ; reset the sprite table
0441F4 AF          0036*      xor a
0441F5 32 94 40 04 0037*      ld (table_active_sprites),a
0441F9 21 31 3E 04 0038*      ld hl,table_base
0441FD 22 91 40 04 0039*      ld (table_pointer),hl
044201             0040*  ; initialize sprites
044201 CD EB 40 04 0041*      call sprites_init
044205             0042*  ; initialize the first level
044205 AF          0043*      xor a
044206 32 C1 41 04 0044*      ld (cur_level),a
04420A CD C2 41 04 0045*      call init_level
04420E             0046*  ; initialize player
04420E 21 00 00 00 0047*      ld hl,0
044212 22 AA 3C 04 0048*      ld (player_score),hl
044216 3E 03       0049*      ld a,3
044218 32 AD 3C 04 0050*      ld (player_lives),a
04421C CD D4 3C 04 0051*      call player_init
044220             0052*  ; set the game state to playing
044220 21 2A 42 04 0053*      ld hl,game_playing
044224 22 DD 41 04 0054*      ld (game_state), hl
044228 C9          0055*      ret
044229             0056*  ; done initializing
044229 C9          0057*      ret
04422A             0058*  
04422A             0059*  game_playing:
04422A             0060*  ; Main gameplay loop
04422A CD 97 42 04 0061*      call do_player
04422E CD A8 42 04 0062*      call do_enemies
044232             0063*  ; update UI: TODO make this a standalone function
044232 CD 0D 3E 04 0064*      call print_score
044236 C9          0065*      ret
044237             0066*  
044237             0067*  game_paused:
044237             0068*      ; Pause menu logic
044237 CD BF 42 04 0069*      call check_input_pause
04423B C2 2A 42 04 0070*      jp nz, game_playing ; Resume game
04423F CA EB 41 04 0071*      jp z, game_main_menu ; Exit to main menu
044243 C9          0072*      ret
044244             0073*  
044244             0074*  game_level_transition:
044244             0075*      ; Handle level transitions
044244 CD C0 42 04 0076*      call load_next_level
044248 21 2A 42 04 0077*      ld hl, game_playing
04424C 22 DD 41 04 0078*      ld (game_state), hl
044250 C9          0079*      ret
044251             0080*  
044251             0081*  game_over:
044251             0082*      ; Display game over screen
044251 CD C1 42 04 0083*      call display_game_over
044255 C2 EB 41 04 0084*      jp nz, game_main_menu ; Return to main menu on input
044259 C9          0085*      ret
04425A             0086*  
04425A             0087*  game_victory:
04425A             0088*      ; Display victory screen
04425A CD C2 42 04 0089*      call display_victory
04425E C2 EB 41 04 0090*      jp nz, game_main_menu ; Return to main menu on input
044262 C9          0091*      ret
044263             0092*  
044263             0093*  ; ========================
044263             0094*  ; Supporting States
044263             0095*  ; ========================
044263             0096*  
044263             0097*  game_loading:
044263             0098*      ; Show loading screen while preparing assets
044263 CD C3 42 04 0099*      call load_resources
044267 21 F4 41 04 0100*      ld hl, game_initialize
04426B 22 DD 41 04 0101*      ld (game_state), hl
04426F C9          0102*      ret
044270             0103*  
044270             0104*  game_cutscene:
044270             0105*      ; Play a non-interactive cutscene
044270 CD C4 42 04 0106*      call play_cutscene
044274 C2 2A 42 04 0107*      jp nz, game_playing ; Return to gameplay after cutscene
044278 C9          0108*      ret
044279             0109*  
044279             0110*  game_inventory:
044279             0111*      ; Open inventory or shop
044279 CD C5 42 04 0112*      call display_inventory
04427D C2 2A 42 04 0113*      jp nz, game_playing ; Return to gameplay after inventory close
044281 C9          0114*      ret
044282             0115*  
044282             0116*  game_map:
044282             0117*      ; Display map or quest
044282 CD C6 42 04 0118*      call display_map
044286 C2 2A 42 04 0119*      jp nz, game_playing ; Return to gameplay after map close
04428A C9          0120*      ret
04428B             0121*  
04428B             0122*  game_exit:
04428B             0123*      ; Handle exit logic
04428B CD C7 42 04 0124*      call save_game
04428F C3 C8 42 04 0125*      jp exit_game         ; Safely shut down
044293 C9          0126*      ret
044294             0127*  
044294             0128*  ; ========================
044294             0129*  ; Sub-state branching (Example for player state)
044294             0130*  ; ========================
044294             0131*  
044294 A2 42 04    0132*  player_state:  dl player_alive ; Player state variable
044297             0133*  
044297             0134*  do_player:
044297 2A 94 42 04 0135*      ld hl,(player_state)
04429B             0136*      callHL                ; Call the corresponding player state
04429B 01 A1 42 04 0001*M     ld bc,@F ; Address of first instruction after the jump
04429F C5          0002*M     push bc ; which constitutes the return address
0442A0 E9          0003*M     jp (hl) ; Jump to the address in HL
0442A1             0004*M @@:
0442A1 C9          0137*      ret
0442A2             0138*  
0442A2             0139*  player_alive:
0442A2 CD 1A 3D 04 0140*      call player_input     ; Handle player input
0442A6 C9          0141*      ret
0442A7             0142*  
0442A7             0143*  player_dead:
0442A7 C9          0144*      ret
0442A8             0145*  
0442A8             0146*  do_enemies:
0442A8 2A B3 42 04 0147*      ld hl, (enemies_state)
0442AC             0148*      callHL
0442AC 01 B2 42 04 0001*M     ld bc,@F ; Address of first instruction after the jump
0442B0 C5          0002*M     push bc ; which constitutes the return address
0442B1 E9          0003*M     jp (hl) ; Jump to the address in HL
0442B2             0004*M @@:
0442B2 C9          0149*      ret
0442B3 B6 42 04    0150*  enemies_state: dl enemies_dead
0442B6             0151*  enemies_dead:
0442B6 C9          0152*      ret
0442B7             0153*  
0442B7             0154*  enemies_alive:
0442B7 CD 0C 1B 04 0155*      call move_enemies
0442BB C9          0156*      ret
0442BC             0157*  
0442BC             0158*  check_input_menu:
0442BC C9          0159*      ret
0442BD             0160*  
0442BD             0161*  update_game_world:
0442BD C9          0162*      ret
0442BE             0163*  
0442BE             0164*  check_game_events:
0442BE C9          0165*      ret
0442BF             0166*  
0442BF             0167*  check_input_pause:
0442BF C9          0168*      ret
0442C0             0169*  
0442C0             0170*  load_next_level:
0442C0 C9          0171*      ret
0442C1             0172*  
0442C1             0173*  display_game_over:
0442C1 C9          0174*      ret
0442C2             0175*  
0442C2             0176*  display_victory:
0442C2 C9          0177*      ret
0442C3             0178*  
0442C3             0179*  load_resources:
0442C3 C9          0180*      ret
0442C4             0181*  
0442C4             0182*  play_cutscene:
0442C4 C9          0183*      ret
0442C5             0184*  
0442C5             0185*  display_inventory:
0442C5 C9          0186*      ret
0442C6             0187*  
0442C6             0188*  display_map:
0442C6 C9          0189*      ret
0442C7             0190*  
0442C7             0191*  save_game:
0442C7 C9          0192*      ret
0442C8             0193*  
0442C8             0194*  exit_game:
0442C8 C9          0195*      ret
0442C9             0196*  
0442C9             0054   
0442C9             0055   init:
0442C9 C9          0056       ret
0442CA             0057   
0442CA             0058   main:
0442CA CD 8C 00 04 0059       call printNewLine
0442CE DD 21 C6 2E 0060       ld ix,maze_index
       04          
0442D3 01 33 37 00 0061       ld bc,0x003733 ; 55.2
0442D7 11 66 16 00 0062       ld de,0x001666 ; 22.4
0442DB CD 9B 2E 04 0063       call screen_to_cell
0442DF DD 7E 00    0064       ld a,(ix)
0442E2 CD 26 04 04 0065       call dumpRegistersHex
0442E6 CD 8C 00 04 0066       call printNewLine
0442EA             0067   
0442EA             0068   main_end:
0442EA C9          0069       ret
