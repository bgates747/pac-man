# Directional bitmask definitions
ORIENT_UP = 2
ORIENT_LEFT = 1
ORIENT_DOWN = 3
ORIENT_RIGHT = 0

def read_map_file(map_filepath):
    """
    Reads the maze data from a CSV file and returns it as a 2D list of integers.
    """
    with open(map_filepath, 'r') as file:
        return [[int(cell) for cell in row.split(',')] for row in file.read().splitlines()]

def get_direction_mask(maze, x, y, wrap_horiz, wrap_vert):
    """
    Calculates the bitmask for a cell based on its neighbors.
    """
    num_rows, num_cols = len(maze), len(maze[0])

    def get_cell(nx, ny):
        if wrap_horiz:
            nx %= num_cols
        if wrap_vert:
            ny %= num_rows
        return maze[ny][nx] if 0 <= nx < num_cols and 0 <= ny < num_rows else 0
    
    # Only calculate the mask if the current cell is 01
    if maze[y][x] == 0:
        return 0

    mask = 0
    if get_cell(x, y - 1):  # Up
        mask |= (1 << ORIENT_UP)
    if get_cell(x - 1, y):  # Left
        mask |= (1 << ORIENT_LEFT)
    if get_cell(x, y + 1):  # Down
        mask |= (1 << ORIENT_DOWN)
    if get_cell(x + 1, y):  # Right
        mask |= (1 << ORIENT_RIGHT)
    return mask

def make_assembly_file(map_type, tile_size, map_filepath, asm_filepath, wrap_horiz, wrap_vert):
    """
    Generates an assembly file with the direction masks for each cell in the maze.
    """
    maze = read_map_file(map_filepath)
    num_rows, num_cols = len(maze), len(maze[0])

    with open(asm_filepath, 'w') as f:
        f.write(f'; Generated by beegee747/build/scripts/build_99_asm_maze_walls.py\n')
        f.write(f"; Source file: {map_filepath}\n\n")
        f.write(f'{map_type}:\n')
        f.write(f'{map_type}_num_cols: dl {num_cols}\n')
        f.write(f'{map_type}_num_rows: dl {num_rows}\n')
        f.write(f'{map_type}_tile_size: dl {tile_size}\n')
        f.write(f'{map_type}_null_tile: dl 0 ; not used for maze path definitions.\n')
        f.write(f'{map_type}_x: dl 0\n')
        f.write(f'{map_type}_y: dl 0\n')
        f.write(f'{map_type}_base_bufferId: dl 0 ; now used for maze path definitions.\n\n')
        f.write(f"{map_type}_map:\n")

        for y in range(num_rows):
            f.write("    db ")
            row_masks = [
                f"{get_direction_mask(maze, x, y, wrap_horiz, wrap_vert):02}" for x in range(num_cols)
            ]
            f.write(",".join(row_masks))
            f.write("\n")

    print(f"Assembly file generated at {asm_filepath}")

if __name__ == '__main__':
    map_type =              'maze_path'
    tile_size =             8
    map_filepath =         f'beegee747/src/assets/design/sprites/{map_type}/{map_type}.csv'
    asm_filepath =         f'beegee747/src/asm/{map_type}.inc'
    wrap_horiz   =         True
    wrap_vert    =         False

    make_assembly_file(map_type, tile_size, map_filepath, asm_filepath, wrap_horiz, wrap_vert)
